
Bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000003f6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000004e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000158e  00000000  00000000  000005c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008e4  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000063b  00000000  00000000  00002436  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a61  00000000  00000000  00002bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000949  00000000  00000000  00003651  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00003f9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 0d 01 	call	0x21a	; 0x21a <main>
  7a:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Bluetooth_Init>:

void Bluetooth_Init(UART_ConfigTypes * options){
	UART_Init(options);
}
void Bluetooth_TransmaitChar(u8 data){
	UART_TransmaitChar(data);
  82:	0e 94 34 01 	call	0x268	; 0x268 <UART_Init>
  86:	08 95       	ret

00000088 <Bluetooth_TransmaitString>:
}
void Bluetooth_TransmaitString(s8 * string){
	UART_TransmaitString(string);
  88:	0e 94 c0 01 	call	0x380	; 0x380 <UART_TransmaitString>
  8c:	08 95       	ret

0000008e <Bluetooth_Receive>:
}
u8 Bluetooth_Receive(){
	return UART_Receive();
  8e:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <UART_Receive>
  92:	08 95       	ret

00000094 <DIO_ConfigChannel>:
		break;
	}
	return BitValue;
}
void DIO_ConfigChannel(DIO_ChannelTypes ChannelId,DIO_DirTypes direction){
	DIO_PortTypes Portx = ChannelId/8;
  94:	98 2f       	mov	r25, r24
  96:	96 95       	lsr	r25
  98:	96 95       	lsr	r25
  9a:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = ChannelId%8;
  9c:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
  9e:	91 30       	cpi	r25, 0x01	; 1
  a0:	21 f1       	breq	.+72     	; 0xea <DIO_ConfigChannel+0x56>
  a2:	30 f0       	brcs	.+12     	; 0xb0 <DIO_ConfigChannel+0x1c>
  a4:	92 30       	cpi	r25, 0x02	; 2
  a6:	f1 f1       	breq	.+124    	; 0x124 <DIO_ConfigChannel+0x90>
  a8:	93 30       	cpi	r25, 0x03	; 3
  aa:	09 f4       	brne	.+2      	; 0xae <DIO_ConfigChannel+0x1a>
  ac:	58 c0       	rjmp	.+176    	; 0x15e <DIO_ConfigChannel+0xca>
  ae:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
  b0:	61 30       	cpi	r22, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
  b4:	4a b3       	in	r20, 0x1a	; 26
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	b9 01       	movw	r22, r18
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_ConfigChannel+0x2e>
  be:	66 0f       	add	r22, r22
  c0:	77 1f       	adc	r23, r23
  c2:	8a 95       	dec	r24
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_ConfigChannel+0x2a>
  c6:	cb 01       	movw	r24, r22
  c8:	84 2b       	or	r24, r20
  ca:	8a bb       	out	0x1a, r24	; 26
  cc:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
  ce:	4a b3       	in	r20, 0x1a	; 26
  d0:	21 e0       	ldi	r18, 0x01	; 1
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	b9 01       	movw	r22, r18
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_ConfigChannel+0x48>
  d8:	66 0f       	add	r22, r22
  da:	77 1f       	adc	r23, r23
  dc:	8a 95       	dec	r24
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_ConfigChannel+0x44>
  e0:	cb 01       	movw	r24, r22
  e2:	80 95       	com	r24
  e4:	84 23       	and	r24, r20
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (direction == Output)
  ea:	61 30       	cpi	r22, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
  ee:	47 b3       	in	r20, 0x17	; 23
  f0:	21 e0       	ldi	r18, 0x01	; 1
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	b9 01       	movw	r22, r18
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_ConfigChannel+0x68>
  f8:	66 0f       	add	r22, r22
  fa:	77 1f       	adc	r23, r23
  fc:	8a 95       	dec	r24
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_ConfigChannel+0x64>
 100:	cb 01       	movw	r24, r22
 102:	84 2b       	or	r24, r20
 104:	87 bb       	out	0x17, r24	; 23
 106:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 108:	47 b3       	in	r20, 0x17	; 23
 10a:	21 e0       	ldi	r18, 0x01	; 1
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	b9 01       	movw	r22, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_ConfigChannel+0x82>
 112:	66 0f       	add	r22, r22
 114:	77 1f       	adc	r23, r23
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_ConfigChannel+0x7e>
 11a:	cb 01       	movw	r24, r22
 11c:	80 95       	com	r24
 11e:	84 23       	and	r24, r20
 120:	87 bb       	out	0x17, r24	; 23
 122:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (direction == Output)
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 128:	44 b3       	in	r20, 0x14	; 20
 12a:	21 e0       	ldi	r18, 0x01	; 1
 12c:	30 e0       	ldi	r19, 0x00	; 0
 12e:	b9 01       	movw	r22, r18
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_ConfigChannel+0xa2>
 132:	66 0f       	add	r22, r22
 134:	77 1f       	adc	r23, r23
 136:	8a 95       	dec	r24
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_ConfigChannel+0x9e>
 13a:	cb 01       	movw	r24, r22
 13c:	84 2b       	or	r24, r20
 13e:	84 bb       	out	0x14, r24	; 20
 140:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 142:	44 b3       	in	r20, 0x14	; 20
 144:	21 e0       	ldi	r18, 0x01	; 1
 146:	30 e0       	ldi	r19, 0x00	; 0
 148:	b9 01       	movw	r22, r18
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_ConfigChannel+0xbc>
 14c:	66 0f       	add	r22, r22
 14e:	77 1f       	adc	r23, r23
 150:	8a 95       	dec	r24
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_ConfigChannel+0xb8>
 154:	cb 01       	movw	r24, r22
 156:	80 95       	com	r24
 158:	84 23       	and	r24, r20
 15a:	84 bb       	out	0x14, r24	; 20
 15c:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (direction == Output)
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 162:	41 b3       	in	r20, 0x11	; 17
 164:	21 e0       	ldi	r18, 0x01	; 1
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	b9 01       	movw	r22, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_ConfigChannel+0xdc>
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	8a 95       	dec	r24
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_ConfigChannel+0xd8>
 174:	cb 01       	movw	r24, r22
 176:	84 2b       	or	r24, r20
 178:	81 bb       	out	0x11, r24	; 17
 17a:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 17c:	41 b3       	in	r20, 0x11	; 17
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_ConfigChannel+0xf6>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_ConfigChannel+0xf2>
 18e:	cb 01       	movw	r24, r22
 190:	80 95       	com	r24
 192:	84 23       	and	r24, r20
 194:	81 bb       	out	0x11, r24	; 17
 196:	08 95       	ret

00000198 <DIO_ToggleChannel>:
		}
		break;
	}
}
void DIO_ToggleChannel(DIO_ChannelTypes ChannelId){
	DIO_PortTypes Portx = ChannelId/8;
 198:	98 2f       	mov	r25, r24
 19a:	96 95       	lsr	r25
 19c:	96 95       	lsr	r25
 19e:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = ChannelId%8;
 1a0:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
 1a2:	91 30       	cpi	r25, 0x01	; 1
 1a4:	99 f0       	breq	.+38     	; 0x1cc <DIO_ToggleChannel+0x34>
 1a6:	28 f0       	brcs	.+10     	; 0x1b2 <DIO_ToggleChannel+0x1a>
 1a8:	92 30       	cpi	r25, 0x02	; 2
 1aa:	e9 f0       	breq	.+58     	; 0x1e6 <DIO_ToggleChannel+0x4e>
 1ac:	93 30       	cpi	r25, 0x03	; 3
 1ae:	41 f1       	breq	.+80     	; 0x200 <DIO_ToggleChannel+0x68>
 1b0:	08 95       	ret
		case DIO_PortA:
		ToggleBit(PORTA_Reg,BitNo);
 1b2:	4b b3       	in	r20, 0x1b	; 27
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	30 e0       	ldi	r19, 0x00	; 0
 1b8:	b9 01       	movw	r22, r18
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DIO_ToggleChannel+0x28>
 1bc:	66 0f       	add	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	8a 95       	dec	r24
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <DIO_ToggleChannel+0x24>
 1c4:	cb 01       	movw	r24, r22
 1c6:	84 27       	eor	r24, r20
 1c8:	8b bb       	out	0x1b, r24	; 27
		break;
 1ca:	08 95       	ret
		case DIO_PortB:
		ToggleBit(PORTB_Reg,BitNo);
 1cc:	48 b3       	in	r20, 0x18	; 24
 1ce:	21 e0       	ldi	r18, 0x01	; 1
 1d0:	30 e0       	ldi	r19, 0x00	; 0
 1d2:	b9 01       	movw	r22, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_ToggleChannel+0x42>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	8a 95       	dec	r24
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_ToggleChannel+0x3e>
 1de:	cb 01       	movw	r24, r22
 1e0:	84 27       	eor	r24, r20
 1e2:	88 bb       	out	0x18, r24	; 24
		break;
 1e4:	08 95       	ret
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
 1e6:	45 b3       	in	r20, 0x15	; 21
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_ToggleChannel+0x5c>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	8a 95       	dec	r24
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_ToggleChannel+0x58>
 1f8:	cb 01       	movw	r24, r22
 1fa:	84 27       	eor	r24, r20
 1fc:	85 bb       	out	0x15, r24	; 21
		break;
 1fe:	08 95       	ret
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
 200:	42 b3       	in	r20, 0x12	; 18
 202:	21 e0       	ldi	r18, 0x01	; 1
 204:	30 e0       	ldi	r19, 0x00	; 0
 206:	b9 01       	movw	r22, r18
 208:	02 c0       	rjmp	.+4      	; 0x20e <DIO_ToggleChannel+0x76>
 20a:	66 0f       	add	r22, r22
 20c:	77 1f       	adc	r23, r23
 20e:	8a 95       	dec	r24
 210:	e2 f7       	brpl	.-8      	; 0x20a <DIO_ToggleChannel+0x72>
 212:	cb 01       	movw	r24, r22
 214:	84 27       	eor	r24, r20
 216:	82 bb       	out	0x12, r24	; 18
 218:	08 95       	ret

0000021a <main>:
#include "Bluetooth.h"



int main(void)
{
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	cd b7       	in	r28, 0x3d	; 61
 220:	de b7       	in	r29, 0x3e	; 62
 222:	28 97       	sbiw	r28, 0x08	; 8
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	f8 94       	cli
 228:	de bf       	out	0x3e, r29	; 62
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	cd bf       	out	0x3d, r28	; 61
	DIO_ConfigChannel(DIO_ChannelB3,Output);
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	8b e0       	ldi	r24, 0x0B	; 11
 232:	0e 94 4a 00 	call	0x94	; 0x94 <DIO_ConfigChannel>
	UART_ConfigTypes options = {BaudRate_9600,DoupleSpeed_Disable,CharacterSize_8,Stop_1Bit,Parity_Disable,TX_Enable,RX_Enable};
 236:	88 e0       	ldi	r24, 0x08	; 8
 238:	e0 e6       	ldi	r30, 0x60	; 96
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	de 01       	movw	r26, r28
 23e:	11 96       	adiw	r26, 0x01	; 1
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <main+0x26>
	Bluetooth_Init(&options);
 248:	ce 01       	movw	r24, r28
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	0e 94 41 00 	call	0x82	; 0x82 <Bluetooth_Init>
	Bluetooth_TransmaitString("Test");
 250:	88 e6       	ldi	r24, 0x68	; 104
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 44 00 	call	0x88	; 0x88 <Bluetooth_TransmaitString>
	u8 rxdata = 0;
	/* Replace with your application code */
	while (1)
	{
		rxdata = Bluetooth_Receive();
 258:	0e 94 47 00 	call	0x8e	; 0x8e <Bluetooth_Receive>
		if(rxdata == '1')
 25c:	81 33       	cpi	r24, 0x31	; 49
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x3e>
		{
			DIO_ToggleChannel(DIO_ChannelB3);
 260:	8b e0       	ldi	r24, 0x0B	; 11
 262:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_ToggleChannel>
 266:	f8 cf       	rjmp	.-16     	; 0x258 <main+0x3e>

00000268 <UART_Init>:
* Created: 10/21/2023 3:30:25 PM
*  Author: user
*/
#include "UART.h"

void UART_Init(UART_ConfigTypes * options){
 268:	cf 93       	push	r28
 26a:	df 93       	push	r29
 26c:	ec 01       	movw	r28, r24
	u16 MyUBRR = 0;
	if (options->doupleSpeedStatus == DoupleSpeed_Enable)
 26e:	8a 81       	ldd	r24, Y+2	; 0x02
 270:	81 30       	cpi	r24, 0x01	; 1
 272:	f9 f4       	brne	.+62     	; 0x2b2 <UART_Init+0x4a>
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 1;
 274:	8b b1       	in	r24, 0x0b	; 11
 276:	82 60       	ori	r24, 0x02	; 2
 278:	8b b9       	out	0x0b, r24	; 11
		MyUBRR = (F_CPU/(8UL*options->baudRate))-1;
 27a:	28 81       	ld	r18, Y
 27c:	39 81       	ldd	r19, Y+1	; 0x01
 27e:	c9 01       	movw	r24, r18
 280:	a0 e0       	ldi	r26, 0x00	; 0
 282:	b0 e0       	ldi	r27, 0x00	; 0
 284:	88 0f       	add	r24, r24
 286:	99 1f       	adc	r25, r25
 288:	aa 1f       	adc	r26, r26
 28a:	bb 1f       	adc	r27, r27
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	aa 1f       	adc	r26, r26
 292:	bb 1f       	adc	r27, r27
 294:	9c 01       	movw	r18, r24
 296:	ad 01       	movw	r20, r26
 298:	22 0f       	add	r18, r18
 29a:	33 1f       	adc	r19, r19
 29c:	44 1f       	adc	r20, r20
 29e:	55 1f       	adc	r21, r21
 2a0:	60 e0       	ldi	r22, 0x00	; 0
 2a2:	74 e2       	ldi	r23, 0x24	; 36
 2a4:	84 ef       	ldi	r24, 0xF4	; 244
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__udivmodsi4>
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	31 09       	sbc	r19, r1
 2b0:	22 c0       	rjmp	.+68     	; 0x2f6 <UART_Init+0x8e>
	}
	else
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 0;
 2b2:	8b b1       	in	r24, 0x0b	; 11
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	8b b9       	out	0x0b, r24	; 11
		MyUBRR = (F_CPU/(16UL*options->baudRate))-1;
 2b8:	28 81       	ld	r18, Y
 2ba:	39 81       	ldd	r19, Y+1	; 0x01
 2bc:	c9 01       	movw	r24, r18
 2be:	a0 e0       	ldi	r26, 0x00	; 0
 2c0:	b0 e0       	ldi	r27, 0x00	; 0
 2c2:	88 0f       	add	r24, r24
 2c4:	99 1f       	adc	r25, r25
 2c6:	aa 1f       	adc	r26, r26
 2c8:	bb 1f       	adc	r27, r27
 2ca:	88 0f       	add	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	9c 01       	movw	r18, r24
 2d4:	ad 01       	movw	r20, r26
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	44 1f       	adc	r20, r20
 2dc:	55 1f       	adc	r21, r21
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	44 1f       	adc	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	74 e2       	ldi	r23, 0x24	; 36
 2ea:	84 ef       	ldi	r24, 0xF4	; 244
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__udivmodsi4>
 2f2:	21 50       	subi	r18, 0x01	; 1
 2f4:	31 09       	sbc	r19, r1
	}
	UART->UBRRL_Reg = MyUBRR;
 2f6:	29 b9       	out	0x09, r18	; 9
	UART->UCSRC_UBRRH_Reg.AllRegister = MyUBRR>>8;
 2f8:	30 bd       	out	0x20, r19	; 32
	
	if (options->characterSizeStatus == CharacterSize_9)
 2fa:	9b 81       	ldd	r25, Y+3	; 0x03
 2fc:	97 30       	cpi	r25, 0x07	; 7
 2fe:	39 f4       	brne	.+14     	; 0x30e <UART_Init+0xa6>
	{
		UART->UCSRB_Reg.Bits.UCSZ2_Bit = 1;
 300:	8a b1       	in	r24, 0x0a	; 10
 302:	84 60       	ori	r24, 0x04	; 4
 304:	8a b9       	out	0x0a, r24	; 10
		UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | (3<<1);
 306:	80 b5       	in	r24, 0x20	; 32
 308:	86 68       	ori	r24, 0x86	; 134
 30a:	80 bd       	out	0x20, r24	; 32
 30c:	08 c0       	rjmp	.+16     	; 0x31e <UART_Init+0xb6>
	}
	else
	{
		UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | options->characterSizeStatus<<1;
 30e:	20 b5       	in	r18, 0x20	; 32
 310:	89 2f       	mov	r24, r25
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	82 2b       	or	r24, r18
 31a:	80 68       	ori	r24, 0x80	; 128
 31c:	80 bd       	out	0x20, r24	; 32
	}
	
	UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | options->parityStatus<<4;
 31e:	20 b5       	in	r18, 0x20	; 32
 320:	9d 81       	ldd	r25, Y+5	; 0x05
 322:	30 e1       	ldi	r19, 0x10	; 16
 324:	93 9f       	mul	r25, r19
 326:	c0 01       	movw	r24, r0
 328:	11 24       	eor	r1, r1
 32a:	82 2b       	or	r24, r18
 32c:	80 68       	ori	r24, 0x80	; 128
 32e:	80 bd       	out	0x20, r24	; 32
	UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | options->stopBitsStatus<<3;
 330:	20 b5       	in	r18, 0x20	; 32
 332:	9c 81       	ldd	r25, Y+4	; 0x04
 334:	89 2f       	mov	r24, r25
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	88 0f       	add	r24, r24
 33a:	99 1f       	adc	r25, r25
 33c:	88 0f       	add	r24, r24
 33e:	99 1f       	adc	r25, r25
 340:	88 0f       	add	r24, r24
 342:	99 1f       	adc	r25, r25
 344:	82 2b       	or	r24, r18
 346:	80 68       	ori	r24, 0x80	; 128
 348:	80 bd       	out	0x20, r24	; 32
	UART->UCSRB_Reg.AllRegister |= options->txStatus<<3;
 34a:	2a b1       	in	r18, 0x0a	; 10
 34c:	9e 81       	ldd	r25, Y+6	; 0x06
 34e:	89 2f       	mov	r24, r25
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	88 0f       	add	r24, r24
 354:	99 1f       	adc	r25, r25
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	82 2b       	or	r24, r18
 360:	8a b9       	out	0x0a, r24	; 10
	UART->UCSRB_Reg.AllRegister |= options->rxStatus<<4;
 362:	2a b1       	in	r18, 0x0a	; 10
 364:	9f 81       	ldd	r25, Y+7	; 0x07
 366:	30 e1       	ldi	r19, 0x10	; 16
 368:	93 9f       	mul	r25, r19
 36a:	c0 01       	movw	r24, r0
 36c:	11 24       	eor	r1, r1
 36e:	82 2b       	or	r24, r18
 370:	8a b9       	out	0x0a, r24	; 10
}
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret

00000378 <UART_TransmaitChar>:
void UART_TransmaitChar(u8 data){
	while (UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
 378:	5d 9b       	sbis	0x0b, 5	; 11
 37a:	fe cf       	rjmp	.-4      	; 0x378 <UART_TransmaitChar>
	UART->UDR_Reg = data;
 37c:	8c b9       	out	0x0c, r24	; 12
 37e:	08 95       	ret

00000380 <UART_TransmaitString>:
}
void UART_TransmaitString(s8 * string){
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	8c 01       	movw	r16, r24
	u8 i=0;
 388:	c0 e0       	ldi	r28, 0x00	; 0
	while(string[i] != '\0'){
 38a:	03 c0       	rjmp	.+6      	; 0x392 <UART_TransmaitString+0x12>
		UART_TransmaitChar(string[i]);
 38c:	0e 94 bc 01 	call	0x378	; 0x378 <UART_TransmaitChar>
		i++;
 390:	cf 5f       	subi	r28, 0xFF	; 255
	while (UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
	UART->UDR_Reg = data;
}
void UART_TransmaitString(s8 * string){
	u8 i=0;
	while(string[i] != '\0'){
 392:	f8 01       	movw	r30, r16
 394:	ec 0f       	add	r30, r28
 396:	f1 1d       	adc	r31, r1
 398:	80 81       	ld	r24, Z
 39a:	81 11       	cpse	r24, r1
 39c:	f7 cf       	rjmp	.-18     	; 0x38c <UART_TransmaitString+0xc>
		UART_TransmaitChar(string[i]);
		i++;
	}
}
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <UART_Receive>:
u8 UART_Receive(){
	while(UART->UCSRA_Reg.Bits.RXC_Bit == 0);
 3a6:	5f 9b       	sbis	0x0b, 7	; 11
 3a8:	fe cf       	rjmp	.-4      	; 0x3a6 <UART_Receive>
	return UART->UDR_Reg;
 3aa:	8c b1       	in	r24, 0x0c	; 12
 3ac:	08 95       	ret

000003ae <__udivmodsi4>:
 3ae:	a1 e2       	ldi	r26, 0x21	; 33
 3b0:	1a 2e       	mov	r1, r26
 3b2:	aa 1b       	sub	r26, r26
 3b4:	bb 1b       	sub	r27, r27
 3b6:	fd 01       	movw	r30, r26
 3b8:	0d c0       	rjmp	.+26     	; 0x3d4 <__udivmodsi4_ep>

000003ba <__udivmodsi4_loop>:
 3ba:	aa 1f       	adc	r26, r26
 3bc:	bb 1f       	adc	r27, r27
 3be:	ee 1f       	adc	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	a2 17       	cp	r26, r18
 3c4:	b3 07       	cpc	r27, r19
 3c6:	e4 07       	cpc	r30, r20
 3c8:	f5 07       	cpc	r31, r21
 3ca:	20 f0       	brcs	.+8      	; 0x3d4 <__udivmodsi4_ep>
 3cc:	a2 1b       	sub	r26, r18
 3ce:	b3 0b       	sbc	r27, r19
 3d0:	e4 0b       	sbc	r30, r20
 3d2:	f5 0b       	sbc	r31, r21

000003d4 <__udivmodsi4_ep>:
 3d4:	66 1f       	adc	r22, r22
 3d6:	77 1f       	adc	r23, r23
 3d8:	88 1f       	adc	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	1a 94       	dec	r1
 3de:	69 f7       	brne	.-38     	; 0x3ba <__udivmodsi4_loop>
 3e0:	60 95       	com	r22
 3e2:	70 95       	com	r23
 3e4:	80 95       	com	r24
 3e6:	90 95       	com	r25
 3e8:	9b 01       	movw	r18, r22
 3ea:	ac 01       	movw	r20, r24
 3ec:	bd 01       	movw	r22, r26
 3ee:	cf 01       	movw	r24, r30
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
