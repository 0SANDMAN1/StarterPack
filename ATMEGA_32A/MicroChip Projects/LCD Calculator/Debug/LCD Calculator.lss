
LCD Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000db2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000db2  00000e26  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000eb0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  00000eec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d05  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a5e  00000000  00000000  00002cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000daa  00000000  00000000  00003757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00004504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000074b  00000000  00000000  000046f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001076  00000000  00000000  00004e43  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00005eb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 eb       	ldi	r30, 0xB2	; 178
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 6f 03 	call	0x6de	; 0x6de <main>
  7a:	0c 94 d7 06 	jmp	0xdae	; 0xdae <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,BitNo);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,BitNo);
  82:	98 2f       	mov	r25, r24
  84:	96 95       	lsr	r25
  86:	96 95       	lsr	r25
  88:	96 95       	lsr	r25
  8a:	87 70       	andi	r24, 0x07	; 7
  8c:	91 30       	cpi	r25, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <DIO_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <DIO_WriteChannel+0x1c>
  92:	92 30       	cpi	r25, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <DIO_WriteChannel+0x90>
  96:	93 30       	cpi	r25, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <DIO_WriteChannel+0xca>
  9c:	08 95       	ret
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <DIO_WriteChannel+0x3a>
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WriteChannel+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WriteChannel+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_WriteChannel+0x74>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_WriteChannel+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_WriteChannel+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_WriteChannel+0xae>
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_WriteChannel+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_WriteChannel+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <DIO_WriteChannel+0xe8>
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WriteChannel+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WriteChannel+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_ReadChannel>:
 186:	98 2f       	mov	r25, r24
 188:	96 95       	lsr	r25
 18a:	96 95       	lsr	r25
 18c:	96 95       	lsr	r25
 18e:	48 2f       	mov	r20, r24
 190:	47 70       	andi	r20, 0x07	; 7
 192:	91 30       	cpi	r25, 0x01	; 1
 194:	81 f0       	breq	.+32     	; 0x1b6 <DIO_ReadChannel+0x30>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <DIO_ReadChannel+0x1c>
 198:	92 30       	cpi	r25, 0x02	; 2
 19a:	b9 f0       	breq	.+46     	; 0x1ca <DIO_ReadChannel+0x44>
 19c:	93 30       	cpi	r25, 0x03	; 3
 19e:	f9 f0       	breq	.+62     	; 0x1de <DIO_ReadChannel+0x58>
 1a0:	28 c0       	rjmp	.+80     	; 0x1f2 <DIO_ReadChannel+0x6c>
 1a2:	99 b3       	in	r25, 0x19	; 25
 1a4:	89 2f       	mov	r24, r25
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <DIO_ReadChannel+0x28>
 1aa:	95 95       	asr	r25
 1ac:	87 95       	ror	r24
 1ae:	4a 95       	dec	r20
 1b0:	e2 f7       	brpl	.-8      	; 0x1aa <DIO_ReadChannel+0x24>
 1b2:	81 70       	andi	r24, 0x01	; 1
 1b4:	08 95       	ret
 1b6:	26 b3       	in	r18, 0x16	; 22
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	c9 01       	movw	r24, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_ReadChannel+0x3c>
 1be:	95 95       	asr	r25
 1c0:	87 95       	ror	r24
 1c2:	4a 95       	dec	r20
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_ReadChannel+0x38>
 1c6:	81 70       	andi	r24, 0x01	; 1
 1c8:	08 95       	ret
 1ca:	23 b3       	in	r18, 0x13	; 19
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	c9 01       	movw	r24, r18
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_ReadChannel+0x50>
 1d2:	95 95       	asr	r25
 1d4:	87 95       	ror	r24
 1d6:	4a 95       	dec	r20
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_ReadChannel+0x4c>
 1da:	81 70       	andi	r24, 0x01	; 1
 1dc:	08 95       	ret
 1de:	20 b3       	in	r18, 0x10	; 16
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	c9 01       	movw	r24, r18
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_ReadChannel+0x64>
 1e6:	95 95       	asr	r25
 1e8:	87 95       	ror	r24
 1ea:	4a 95       	dec	r20
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_ReadChannel+0x60>
 1ee:	81 70       	andi	r24, 0x01	; 1
 1f0:	08 95       	ret
 1f2:	80 e0       	ldi	r24, 0x00	; 0
 1f4:	08 95       	ret

000001f6 <DIO_ConfigChannel>:
 1f6:	98 2f       	mov	r25, r24
 1f8:	96 95       	lsr	r25
 1fa:	96 95       	lsr	r25
 1fc:	96 95       	lsr	r25
 1fe:	87 70       	andi	r24, 0x07	; 7
 200:	91 30       	cpi	r25, 0x01	; 1
 202:	21 f1       	breq	.+72     	; 0x24c <DIO_ConfigChannel+0x56>
 204:	30 f0       	brcs	.+12     	; 0x212 <DIO_ConfigChannel+0x1c>
 206:	92 30       	cpi	r25, 0x02	; 2
 208:	f1 f1       	breq	.+124    	; 0x286 <DIO_ConfigChannel+0x90>
 20a:	93 30       	cpi	r25, 0x03	; 3
 20c:	09 f4       	brne	.+2      	; 0x210 <DIO_ConfigChannel+0x1a>
 20e:	58 c0       	rjmp	.+176    	; 0x2c0 <DIO_ConfigChannel+0xca>
 210:	08 95       	ret
 212:	61 30       	cpi	r22, 0x01	; 1
 214:	69 f4       	brne	.+26     	; 0x230 <DIO_ConfigChannel+0x3a>
 216:	4a b3       	in	r20, 0x1a	; 26
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_ConfigChannel+0x2e>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_ConfigChannel+0x2a>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	8a bb       	out	0x1a, r24	; 26
 22e:	08 95       	ret
 230:	4a b3       	in	r20, 0x1a	; 26
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_ConfigChannel+0x48>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_ConfigChannel+0x44>
 242:	cb 01       	movw	r24, r22
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	8a bb       	out	0x1a, r24	; 26
 24a:	08 95       	ret
 24c:	61 30       	cpi	r22, 0x01	; 1
 24e:	69 f4       	brne	.+26     	; 0x26a <DIO_ConfigChannel+0x74>
 250:	47 b3       	in	r20, 0x17	; 23
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_ConfigChannel+0x68>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_ConfigChannel+0x64>
 262:	cb 01       	movw	r24, r22
 264:	84 2b       	or	r24, r20
 266:	87 bb       	out	0x17, r24	; 23
 268:	08 95       	ret
 26a:	47 b3       	in	r20, 0x17	; 23
 26c:	21 e0       	ldi	r18, 0x01	; 1
 26e:	30 e0       	ldi	r19, 0x00	; 0
 270:	b9 01       	movw	r22, r18
 272:	02 c0       	rjmp	.+4      	; 0x278 <DIO_ConfigChannel+0x82>
 274:	66 0f       	add	r22, r22
 276:	77 1f       	adc	r23, r23
 278:	8a 95       	dec	r24
 27a:	e2 f7       	brpl	.-8      	; 0x274 <DIO_ConfigChannel+0x7e>
 27c:	cb 01       	movw	r24, r22
 27e:	80 95       	com	r24
 280:	84 23       	and	r24, r20
 282:	87 bb       	out	0x17, r24	; 23
 284:	08 95       	ret
 286:	61 30       	cpi	r22, 0x01	; 1
 288:	69 f4       	brne	.+26     	; 0x2a4 <DIO_ConfigChannel+0xae>
 28a:	44 b3       	in	r20, 0x14	; 20
 28c:	21 e0       	ldi	r18, 0x01	; 1
 28e:	30 e0       	ldi	r19, 0x00	; 0
 290:	b9 01       	movw	r22, r18
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_ConfigChannel+0xa2>
 294:	66 0f       	add	r22, r22
 296:	77 1f       	adc	r23, r23
 298:	8a 95       	dec	r24
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_ConfigChannel+0x9e>
 29c:	cb 01       	movw	r24, r22
 29e:	84 2b       	or	r24, r20
 2a0:	84 bb       	out	0x14, r24	; 20
 2a2:	08 95       	ret
 2a4:	44 b3       	in	r20, 0x14	; 20
 2a6:	21 e0       	ldi	r18, 0x01	; 1
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	b9 01       	movw	r22, r18
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_ConfigChannel+0xbc>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	8a 95       	dec	r24
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_ConfigChannel+0xb8>
 2b6:	cb 01       	movw	r24, r22
 2b8:	80 95       	com	r24
 2ba:	84 23       	and	r24, r20
 2bc:	84 bb       	out	0x14, r24	; 20
 2be:	08 95       	ret
 2c0:	61 30       	cpi	r22, 0x01	; 1
 2c2:	69 f4       	brne	.+26     	; 0x2de <DIO_ConfigChannel+0xe8>
 2c4:	41 b3       	in	r20, 0x11	; 17
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	b9 01       	movw	r22, r18
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <DIO_ConfigChannel+0xdc>
 2ce:	66 0f       	add	r22, r22
 2d0:	77 1f       	adc	r23, r23
 2d2:	8a 95       	dec	r24
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <DIO_ConfigChannel+0xd8>
 2d6:	cb 01       	movw	r24, r22
 2d8:	84 2b       	or	r24, r20
 2da:	81 bb       	out	0x11, r24	; 17
 2dc:	08 95       	ret
 2de:	41 b3       	in	r20, 0x11	; 17
 2e0:	21 e0       	ldi	r18, 0x01	; 1
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	b9 01       	movw	r22, r18
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_ConfigChannel+0xf6>
 2e8:	66 0f       	add	r22, r22
 2ea:	77 1f       	adc	r23, r23
 2ec:	8a 95       	dec	r24
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_ConfigChannel+0xf2>
 2f0:	cb 01       	movw	r24, r22
 2f2:	80 95       	com	r24
 2f4:	84 23       	and	r24, r20
 2f6:	81 bb       	out	0x11, r24	; 17
 2f8:	08 95       	ret

000002fa <DIO_ReadPort>:
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
	switch(portId){
 2fa:	81 30       	cpi	r24, 0x01	; 1
 2fc:	41 f0       	breq	.+16     	; 0x30e <DIO_ReadPort+0x14>
 2fe:	28 f0       	brcs	.+10     	; 0x30a <DIO_ReadPort+0x10>
 300:	82 30       	cpi	r24, 0x02	; 2
 302:	39 f0       	breq	.+14     	; 0x312 <DIO_ReadPort+0x18>
 304:	83 30       	cpi	r24, 0x03	; 3
 306:	39 f0       	breq	.+14     	; 0x316 <DIO_ReadPort+0x1c>
 308:	08 c0       	rjmp	.+16     	; 0x31a <DIO_ReadPort+0x20>
		case DIO_PortA:
		portValue = PORTA_Reg;
 30a:	8b b3       	in	r24, 0x1b	; 27
		break;
 30c:	08 95       	ret
		case DIO_PortB:
		portValue = PORTB_Reg;
 30e:	88 b3       	in	r24, 0x18	; 24
		break;
 310:	08 95       	ret
		case DIO_PortC:
		portValue = PORTC_Reg;
 312:	85 b3       	in	r24, 0x15	; 21
		break;
 314:	08 95       	ret
		case DIO_PortD:
		portValue = PORTD_Reg;
 316:	82 b3       	in	r24, 0x12	; 18
		break;
 318:	08 95       	ret
		ToggleBit(PORTD_Reg,BitNo);
		break;
	}
}
u8 DIO_ReadPort(DIO_PortTypes portId){
	u8 portValue = STD_Low;
 31a:	80 e0       	ldi	r24, 0x00	; 0
		case DIO_PortD:
		portValue = PORTD_Reg;
		break;
	}
	return portValue;
}
 31c:	08 95       	ret

0000031e <DIO_WritePort>:
void DIO_WritePort(DIO_PortTypes portId,u8 portValue){
	switch(portId){
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	41 f0       	breq	.+16     	; 0x332 <DIO_WritePort+0x14>
 322:	28 f0       	brcs	.+10     	; 0x32e <DIO_WritePort+0x10>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	39 f0       	breq	.+14     	; 0x336 <DIO_WritePort+0x18>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	39 f0       	breq	.+14     	; 0x33a <DIO_WritePort+0x1c>
 32c:	08 95       	ret
		case DIO_PortA:
		PORTA_Reg = portValue;
 32e:	6b bb       	out	0x1b, r22	; 27
		break;
 330:	08 95       	ret
		case DIO_PortB:
		PORTB_Reg = portValue;
 332:	68 bb       	out	0x18, r22	; 24
		break;
 334:	08 95       	ret
		case DIO_PortC:
		PORTC_Reg = portValue;
 336:	65 bb       	out	0x15, r22	; 21
		break;
 338:	08 95       	ret
		case DIO_PortD:
		PORTD_Reg = portValue;
 33a:	62 bb       	out	0x12, r22	; 18
 33c:	08 95       	ret

0000033e <DIO_Init>:
void DIO_Init(){
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	DIO_ChannelTypes count = DIO_ChannelA0;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	a0 c0       	rjmp	.+320    	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
	{
		Portx = count/8;
 342:	98 2f       	mov	r25, r24
 344:	96 95       	lsr	r25
 346:	96 95       	lsr	r25
 348:	96 95       	lsr	r25
		BitNo = count%8;
 34a:	28 2f       	mov	r18, r24
 34c:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 34e:	91 30       	cpi	r25, 0x01	; 1
 350:	61 f1       	breq	.+88     	; 0x3aa <DIO_Init+0x6c>
 352:	38 f0       	brcs	.+14     	; 0x362 <DIO_Init+0x24>
 354:	92 30       	cpi	r25, 0x02	; 2
 356:	09 f4       	brne	.+2      	; 0x35a <DIO_Init+0x1c>
 358:	4c c0       	rjmp	.+152    	; 0x3f2 <DIO_Init+0xb4>
 35a:	93 30       	cpi	r25, 0x03	; 3
 35c:	09 f4       	brne	.+2      	; 0x360 <DIO_Init+0x22>
 35e:	6d c0       	rjmp	.+218    	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 360:	8f c0       	rjmp	.+286    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 362:	e8 2f       	mov	r30, r24
 364:	f0 e0       	ldi	r31, 0x00	; 0
 366:	ee 0f       	add	r30, r30
 368:	ff 1f       	adc	r31, r31
 36a:	e0 5a       	subi	r30, 0xA0	; 160
 36c:	ff 4f       	sbci	r31, 0xFF	; 255
 36e:	90 81       	ld	r25, Z
 370:	91 30       	cpi	r25, 0x01	; 1
 372:	69 f4       	brne	.+26     	; 0x38e <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
 374:	9a b3       	in	r25, 0x1a	; 26
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	50 e0       	ldi	r21, 0x00	; 0
 37a:	ba 01       	movw	r22, r20
 37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_Init+0x44>
 37e:	66 0f       	add	r22, r22
 380:	77 1f       	adc	r23, r23
 382:	2a 95       	dec	r18
 384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_Init+0x40>
 386:	9b 01       	movw	r18, r22
 388:	29 2b       	or	r18, r25
 38a:	2a bb       	out	0x1a, r18	; 26
 38c:	79 c0       	rjmp	.+242    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 38e:	9a b3       	in	r25, 0x1a	; 26
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	50 e0       	ldi	r21, 0x00	; 0
 394:	ba 01       	movw	r22, r20
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_Init+0x5e>
 398:	66 0f       	add	r22, r22
 39a:	77 1f       	adc	r23, r23
 39c:	2a 95       	dec	r18
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_Init+0x5a>
 3a0:	9b 01       	movw	r18, r22
 3a2:	20 95       	com	r18
 3a4:	29 23       	and	r18, r25
 3a6:	2a bb       	out	0x1a, r18	; 26
 3a8:	6b c0       	rjmp	.+214    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
			break;
			
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 3aa:	e8 2f       	mov	r30, r24
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	e0 5a       	subi	r30, 0xA0	; 160
 3b4:	ff 4f       	sbci	r31, 0xFF	; 255
 3b6:	90 81       	ld	r25, Z
 3b8:	91 30       	cpi	r25, 0x01	; 1
 3ba:	69 f4       	brne	.+26     	; 0x3d6 <DIO_Init+0x98>
			{
				SetBit(DDRB_Reg,BitNo);
 3bc:	97 b3       	in	r25, 0x17	; 23
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	ba 01       	movw	r22, r20
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_Init+0x8c>
 3c6:	66 0f       	add	r22, r22
 3c8:	77 1f       	adc	r23, r23
 3ca:	2a 95       	dec	r18
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_Init+0x88>
 3ce:	9b 01       	movw	r18, r22
 3d0:	29 2b       	or	r18, r25
 3d2:	27 bb       	out	0x17, r18	; 23
 3d4:	55 c0       	rjmp	.+170    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 3d6:	97 b3       	in	r25, 0x17	; 23
 3d8:	41 e0       	ldi	r20, 0x01	; 1
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	ba 01       	movw	r22, r20
 3de:	02 c0       	rjmp	.+4      	; 0x3e4 <DIO_Init+0xa6>
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	2a 95       	dec	r18
 3e6:	e2 f7       	brpl	.-8      	; 0x3e0 <DIO_Init+0xa2>
 3e8:	9b 01       	movw	r18, r22
 3ea:	20 95       	com	r18
 3ec:	29 23       	and	r18, r25
 3ee:	27 bb       	out	0x17, r18	; 23
 3f0:	47 c0       	rjmp	.+142    	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
			break;
			
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 3f2:	e8 2f       	mov	r30, r24
 3f4:	f0 e0       	ldi	r31, 0x00	; 0
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	e0 5a       	subi	r30, 0xA0	; 160
 3fc:	ff 4f       	sbci	r31, 0xFF	; 255
 3fe:	90 81       	ld	r25, Z
 400:	91 30       	cpi	r25, 0x01	; 1
 402:	69 f4       	brne	.+26     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
			{
				SetBit(DDRC_Reg,BitNo);
 404:	94 b3       	in	r25, 0x14	; 20
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	50 e0       	ldi	r21, 0x00	; 0
 40a:	ba 01       	movw	r22, r20
 40c:	02 c0       	rjmp	.+4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40e:	66 0f       	add	r22, r22
 410:	77 1f       	adc	r23, r23
 412:	2a 95       	dec	r18
 414:	e2 f7       	brpl	.-8      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 416:	9b 01       	movw	r18, r22
 418:	29 2b       	or	r18, r25
 41a:	24 bb       	out	0x14, r18	; 20
 41c:	31 c0       	rjmp	.+98     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 41e:	94 b3       	in	r25, 0x14	; 20
 420:	41 e0       	ldi	r20, 0x01	; 1
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	ba 01       	movw	r22, r20
 426:	02 c0       	rjmp	.+4      	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 428:	66 0f       	add	r22, r22
 42a:	77 1f       	adc	r23, r23
 42c:	2a 95       	dec	r18
 42e:	e2 f7       	brpl	.-8      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 430:	9b 01       	movw	r18, r22
 432:	20 95       	com	r18
 434:	29 23       	and	r18, r25
 436:	24 bb       	out	0x14, r18	; 20
 438:	23 c0       	rjmp	.+70     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
			break;
			
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 43a:	e8 2f       	mov	r30, r24
 43c:	f0 e0       	ldi	r31, 0x00	; 0
 43e:	ee 0f       	add	r30, r30
 440:	ff 1f       	adc	r31, r31
 442:	e0 5a       	subi	r30, 0xA0	; 160
 444:	ff 4f       	sbci	r31, 0xFF	; 255
 446:	90 81       	ld	r25, Z
 448:	91 30       	cpi	r25, 0x01	; 1
 44a:	69 f4       	brne	.+26     	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
			{
				SetBit(DDRD_Reg,BitNo);
 44c:	91 b3       	in	r25, 0x11	; 17
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	50 e0       	ldi	r21, 0x00	; 0
 452:	ba 01       	movw	r22, r20
 454:	02 c0       	rjmp	.+4      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 456:	66 0f       	add	r22, r22
 458:	77 1f       	adc	r23, r23
 45a:	2a 95       	dec	r18
 45c:	e2 f7       	brpl	.-8      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 45e:	9b 01       	movw	r18, r22
 460:	29 2b       	or	r18, r25
 462:	21 bb       	out	0x11, r18	; 17
 464:	0d c0       	rjmp	.+26     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 466:	91 b3       	in	r25, 0x11	; 17
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	50 e0       	ldi	r21, 0x00	; 0
 46c:	ba 01       	movw	r22, r20
 46e:	02 c0       	rjmp	.+4      	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 470:	66 0f       	add	r22, r22
 472:	77 1f       	adc	r23, r23
 474:	2a 95       	dec	r18
 476:	e2 f7       	brpl	.-8      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 478:	9b 01       	movw	r18, r22
 47a:	20 95       	com	r18
 47c:	29 23       	and	r18, r25
 47e:	21 bb       	out	0x11, r18	; 17
void DIO_Init(){
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	DIO_ChannelTypes count = DIO_ChannelA0;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 480:	8f 5f       	subi	r24, 0xFF	; 255
 482:	80 32       	cpi	r24, 0x20	; 32
 484:	08 f4       	brcc	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 486:	5d cf       	rjmp	.-326    	; 0x342 <DIO_Init+0x4>
			}
			break;
		}
	}
	
 488:	08 95       	ret

0000048a <Keypad_Init>:
*  Author: user
*/
#include "Keypad.h"
#include "Keypad_Config.h"

void Keypad_Init(){
 48a:	1f 93       	push	r17
 48c:	cf 93       	push	r28
 48e:	df 93       	push	r29
	//cols Input
	for (u8 j=0;j<colsCount;j++)
 490:	10 e0       	ldi	r17, 0x00	; 0
 492:	0d c0       	rjmp	.+26     	; 0x4ae <Keypad_Init+0x24>
	{
		DIO_ConfigChannel(KeypadCols[j],Input);
 494:	c1 2f       	mov	r28, r17
 496:	d0 e0       	ldi	r29, 0x00	; 0
 498:	c0 55       	subi	r28, 0x50	; 80
 49a:	df 4f       	sbci	r29, 0xFF	; 255
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	88 81       	ld	r24, Y
 4a0:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_ConfigChannel>
		DIO_WriteChannel(KeypadCols[j],STD_High);//connect pullup res.
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	88 81       	ld	r24, Y
 4a8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
#include "Keypad.h"
#include "Keypad_Config.h"

void Keypad_Init(){
	//cols Input
	for (u8 j=0;j<colsCount;j++)
 4ac:	1f 5f       	subi	r17, 0xFF	; 255
 4ae:	14 30       	cpi	r17, 0x04	; 4
 4b0:	88 f3       	brcs	.-30     	; 0x494 <Keypad_Init+0xa>
 4b2:	10 e0       	ldi	r17, 0x00	; 0
 4b4:	0d c0       	rjmp	.+26     	; 0x4d0 <Keypad_Init+0x46>
		DIO_ConfigChannel(KeypadCols[j],Input);
		DIO_WriteChannel(KeypadCols[j],STD_High);//connect pullup res.
	}
	//rows Output
	for(u8 i=0;i<rowsCount;i++){
		DIO_ConfigChannel(KeypadRows[i],Output);
 4b6:	c1 2f       	mov	r28, r17
 4b8:	d0 e0       	ldi	r29, 0x00	; 0
 4ba:	cc 54       	subi	r28, 0x4C	; 76
 4bc:	df 4f       	sbci	r29, 0xFF	; 255
 4be:	61 e0       	ldi	r22, 0x01	; 1
 4c0:	88 81       	ld	r24, Y
 4c2:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <DIO_ConfigChannel>
		DIO_WriteChannel(KeypadRows[i],STD_High);
 4c6:	61 e0       	ldi	r22, 0x01	; 1
 4c8:	88 81       	ld	r24, Y
 4ca:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
	{
		DIO_ConfigChannel(KeypadCols[j],Input);
		DIO_WriteChannel(KeypadCols[j],STD_High);//connect pullup res.
	}
	//rows Output
	for(u8 i=0;i<rowsCount;i++){
 4ce:	1f 5f       	subi	r17, 0xFF	; 255
 4d0:	14 30       	cpi	r17, 0x04	; 4
 4d2:	88 f3       	brcs	.-30     	; 0x4b6 <Keypad_Init+0x2c>
		DIO_ConfigChannel(KeypadRows[i],Output);
		DIO_WriteChannel(KeypadRows[i],STD_High);
	}
}
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	08 95       	ret

000004dc <GetKey>:
u8 GetKey(){
 4dc:	ef 92       	push	r14
 4de:	ff 92       	push	r15
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
	for (u8 i=0;i<rowsCount;i++)
 4e8:	d0 e0       	ldi	r29, 0x00	; 0
 4ea:	34 c0       	rjmp	.+104    	; 0x554 <GetKey+0x78>
	{
		DIO_WriteChannel(KeypadRows[i],STD_Low);
 4ec:	ed 2e       	mov	r14, r29
 4ee:	f1 2c       	mov	r15, r1
 4f0:	f7 01       	movw	r30, r14
 4f2:	ec 54       	subi	r30, 0x4C	; 76
 4f4:	ff 4f       	sbci	r31, 0xFF	; 255
 4f6:	60 e0       	ldi	r22, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
		for (u8 j=0;j<colsCount;j++)
 4fe:	c0 e0       	ldi	r28, 0x00	; 0
 500:	1f c0       	rjmp	.+62     	; 0x540 <GetKey+0x64>
		{
			if (DIO_ReadChannel(KeypadCols[j]) == STD_Low)
 502:	0c 2f       	mov	r16, r28
 504:	10 e0       	ldi	r17, 0x00	; 0
 506:	f8 01       	movw	r30, r16
 508:	e0 55       	subi	r30, 0x50	; 80
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	80 81       	ld	r24, Z
 50e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_ReadChannel>
 512:	81 11       	cpse	r24, r1
 514:	14 c0       	rjmp	.+40     	; 0x53e <GetKey+0x62>
			{
				while(DIO_ReadChannel(KeypadCols[j]) == STD_Low);
 516:	f8 01       	movw	r30, r16
 518:	e0 55       	subi	r30, 0x50	; 80
 51a:	ff 4f       	sbci	r31, 0xFF	; 255
 51c:	80 81       	ld	r24, Z
 51e:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_ReadChannel>
 522:	88 23       	and	r24, r24
 524:	c1 f3       	breq	.-16     	; 0x516 <GetKey+0x3a>
				return Keypad[i][j];
 526:	c7 01       	movw	r24, r14
 528:	88 0f       	add	r24, r24
 52a:	99 1f       	adc	r25, r25
 52c:	88 0f       	add	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	80 56       	subi	r24, 0x60	; 96
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	fc 01       	movw	r30, r24
 536:	e0 0f       	add	r30, r16
 538:	f1 1f       	adc	r31, r17
 53a:	80 81       	ld	r24, Z
 53c:	0e c0       	rjmp	.+28     	; 0x55a <GetKey+0x7e>
}
u8 GetKey(){
	for (u8 i=0;i<rowsCount;i++)
	{
		DIO_WriteChannel(KeypadRows[i],STD_Low);
		for (u8 j=0;j<colsCount;j++)
 53e:	cf 5f       	subi	r28, 0xFF	; 255
 540:	c4 30       	cpi	r28, 0x04	; 4
 542:	f8 f2       	brcs	.-66     	; 0x502 <GetKey+0x26>
			{
				while(DIO_ReadChannel(KeypadCols[j]) == STD_Low);
				return Keypad[i][j];
			}
		}
		DIO_WriteChannel(KeypadRows[i],STD_High);
 544:	f7 01       	movw	r30, r14
 546:	ec 54       	subi	r30, 0x4C	; 76
 548:	ff 4f       	sbci	r31, 0xFF	; 255
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	80 81       	ld	r24, Z
 54e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
		DIO_ConfigChannel(KeypadRows[i],Output);
		DIO_WriteChannel(KeypadRows[i],STD_High);
	}
}
u8 GetKey(){
	for (u8 i=0;i<rowsCount;i++)
 552:	df 5f       	subi	r29, 0xFF	; 255
 554:	d4 30       	cpi	r29, 0x04	; 4
 556:	50 f2       	brcs	.-108    	; 0x4ec <GetKey+0x10>
				return Keypad[i][j];
			}
		}
		DIO_WriteChannel(KeypadRows[i],STD_High);
	}
	return STD_Low;
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	08 95       	ret

00000568 <LCD_Cmd>:
	u8 i = 0;
	while(string[i] != '\0'){
		LCD_Char(string[i]);
		i++;
	}
}
 568:	cf 93       	push	r28
 56a:	c8 2f       	mov	r28, r24
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	89 e0       	ldi	r24, 0x09	; 9
 570:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 574:	80 e0       	ldi	r24, 0x00	; 0
 576:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_ReadPort>
 57a:	8f 70       	andi	r24, 0x0F	; 15
 57c:	9c 2f       	mov	r25, r28
 57e:	90 7f       	andi	r25, 0xF0	; 240
 580:	68 2f       	mov	r22, r24
 582:	69 2b       	or	r22, r25
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_WritePort>
 58a:	60 e0       	ldi	r22, 0x00	; 0
 58c:	8b e0       	ldi	r24, 0x0B	; 11
 58e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 592:	8f e8       	ldi	r24, 0x8F	; 143
 594:	91 e0       	ldi	r25, 0x01	; 1
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	f1 f7       	brne	.-4      	; 0x596 <LCD_Cmd+0x2e>
 59a:	00 c0       	rjmp	.+0      	; 0x59c <LCD_Cmd+0x34>
 59c:	00 00       	nop
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	8b e0       	ldi	r24, 0x0B	; 11
 5a2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 5a6:	8f e1       	ldi	r24, 0x1F	; 31
 5a8:	9e e4       	ldi	r25, 0x4E	; 78
 5aa:	01 97       	sbiw	r24, 0x01	; 1
 5ac:	f1 f7       	brne	.-4      	; 0x5aa <LCD_Cmd+0x42>
 5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <LCD_Cmd+0x48>
 5b0:	00 00       	nop
 5b2:	80 e0       	ldi	r24, 0x00	; 0
 5b4:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_ReadPort>
 5b8:	90 e1       	ldi	r25, 0x10	; 16
 5ba:	c9 9f       	mul	r28, r25
 5bc:	90 01       	movw	r18, r0
 5be:	11 24       	eor	r1, r1
 5c0:	8f 70       	andi	r24, 0x0F	; 15
 5c2:	68 2f       	mov	r22, r24
 5c4:	62 2b       	or	r22, r18
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_WritePort>
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	8b e0       	ldi	r24, 0x0B	; 11
 5d0:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 5d4:	8f e8       	ldi	r24, 0x8F	; 143
 5d6:	91 e0       	ldi	r25, 0x01	; 1
 5d8:	01 97       	sbiw	r24, 0x01	; 1
 5da:	f1 f7       	brne	.-4      	; 0x5d8 <LCD_Cmd+0x70>
 5dc:	00 c0       	rjmp	.+0      	; 0x5de <LCD_Cmd+0x76>
 5de:	00 00       	nop
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	8b e0       	ldi	r24, 0x0B	; 11
 5e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 5e8:	8f e3       	ldi	r24, 0x3F	; 63
 5ea:	9f e1       	ldi	r25, 0x1F	; 31
 5ec:	01 97       	sbiw	r24, 0x01	; 1
 5ee:	f1 f7       	brne	.-4      	; 0x5ec <LCD_Cmd+0x84>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <LCD_Cmd+0x8a>
 5f2:	00 00       	nop
 5f4:	cf 91       	pop	r28
 5f6:	08 95       	ret

000005f8 <LCD_Init>:
 5f8:	60 e0       	ldi	r22, 0x00	; 0
 5fa:	8a e0       	ldi	r24, 0x0A	; 10
 5fc:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	8b e0       	ldi	r24, 0x0B	; 11
 604:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 608:	2f ef       	ldi	r18, 0xFF	; 255
 60a:	89 ef       	ldi	r24, 0xF9	; 249
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	21 50       	subi	r18, 0x01	; 1
 610:	80 40       	sbci	r24, 0x00	; 0
 612:	90 40       	sbci	r25, 0x00	; 0
 614:	e1 f7       	brne	.-8      	; 0x60e <LCD_Init+0x16>
 616:	00 c0       	rjmp	.+0      	; 0x618 <LCD_Init+0x20>
 618:	00 00       	nop
 61a:	83 e3       	ldi	r24, 0x33	; 51
 61c:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_Cmd>
 620:	82 e3       	ldi	r24, 0x32	; 50
 622:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_Cmd>
 626:	88 e2       	ldi	r24, 0x28	; 40
 628:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_Cmd>
 62c:	86 e0       	ldi	r24, 0x06	; 6
 62e:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_Cmd>
 632:	8f e0       	ldi	r24, 0x0F	; 15
 634:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_Cmd>
 638:	8f e3       	ldi	r24, 0x3F	; 63
 63a:	9f e1       	ldi	r25, 0x1F	; 31
 63c:	01 97       	sbiw	r24, 0x01	; 1
 63e:	f1 f7       	brne	.-4      	; 0x63c <LCD_Init+0x44>
 640:	00 c0       	rjmp	.+0      	; 0x642 <LCD_Init+0x4a>
 642:	00 00       	nop
 644:	08 95       	ret

00000646 <LCD_Char>:
 646:	cf 93       	push	r28
 648:	c8 2f       	mov	r28, r24
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	89 e0       	ldi	r24, 0x09	; 9
 64e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 652:	80 e0       	ldi	r24, 0x00	; 0
 654:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_ReadPort>
 658:	8f 70       	andi	r24, 0x0F	; 15
 65a:	9c 2f       	mov	r25, r28
 65c:	90 7f       	andi	r25, 0xF0	; 240
 65e:	68 2f       	mov	r22, r24
 660:	69 2b       	or	r22, r25
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_WritePort>
 668:	60 e0       	ldi	r22, 0x00	; 0
 66a:	8b e0       	ldi	r24, 0x0B	; 11
 66c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 670:	8f e8       	ldi	r24, 0x8F	; 143
 672:	91 e0       	ldi	r25, 0x01	; 1
 674:	01 97       	sbiw	r24, 0x01	; 1
 676:	f1 f7       	brne	.-4      	; 0x674 <LCD_Char+0x2e>
 678:	00 c0       	rjmp	.+0      	; 0x67a <LCD_Char+0x34>
 67a:	00 00       	nop
 67c:	61 e0       	ldi	r22, 0x01	; 1
 67e:	8b e0       	ldi	r24, 0x0B	; 11
 680:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 684:	8f e1       	ldi	r24, 0x1F	; 31
 686:	9e e4       	ldi	r25, 0x4E	; 78
 688:	01 97       	sbiw	r24, 0x01	; 1
 68a:	f1 f7       	brne	.-4      	; 0x688 <LCD_Char+0x42>
 68c:	00 c0       	rjmp	.+0      	; 0x68e <LCD_Char+0x48>
 68e:	00 00       	nop
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	0e 94 7d 01 	call	0x2fa	; 0x2fa <DIO_ReadPort>
 696:	90 e1       	ldi	r25, 0x10	; 16
 698:	c9 9f       	mul	r28, r25
 69a:	90 01       	movw	r18, r0
 69c:	11 24       	eor	r1, r1
 69e:	8f 70       	andi	r24, 0x0F	; 15
 6a0:	68 2f       	mov	r22, r24
 6a2:	62 2b       	or	r22, r18
 6a4:	80 e0       	ldi	r24, 0x00	; 0
 6a6:	0e 94 8f 01 	call	0x31e	; 0x31e <DIO_WritePort>
 6aa:	60 e0       	ldi	r22, 0x00	; 0
 6ac:	8b e0       	ldi	r24, 0x0B	; 11
 6ae:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 6b2:	8f e8       	ldi	r24, 0x8F	; 143
 6b4:	91 e0       	ldi	r25, 0x01	; 1
 6b6:	01 97       	sbiw	r24, 0x01	; 1
 6b8:	f1 f7       	brne	.-4      	; 0x6b6 <LCD_Char+0x70>
 6ba:	00 c0       	rjmp	.+0      	; 0x6bc <LCD_Char+0x76>
 6bc:	00 00       	nop
 6be:	61 e0       	ldi	r22, 0x01	; 1
 6c0:	8b e0       	ldi	r24, 0x0B	; 11
 6c2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 6c6:	8f e3       	ldi	r24, 0x3F	; 63
 6c8:	9f e1       	ldi	r25, 0x1F	; 31
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <LCD_Char+0x84>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <LCD_Char+0x8a>
 6d0:	00 00       	nop
 6d2:	cf 91       	pop	r28
 6d4:	08 95       	ret

000006d6 <LCD_Clear>:
void LCD_Clear(){
	LCD_Cmd(0x01);
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	0e 94 b4 02 	call	0x568	; 0x568 <LCD_Cmd>
 6dc:	08 95       	ret

000006de <main>:
#define NOTPRESSED 0

void LCD_NumberToString(u32 data);

int main(void)
{
 6de:	cf 93       	push	r28
 6e0:	df 93       	push	r29
 6e2:	00 d0       	rcall	.+0      	; 0x6e4 <main+0x6>
 6e4:	00 d0       	rcall	.+0      	; 0x6e6 <main+0x8>
 6e6:	00 d0       	rcall	.+0      	; 0x6e8 <main+0xa>
 6e8:	cd b7       	in	r28, 0x3d	; 61
 6ea:	de b7       	in	r29, 0x3e	; 62
	/* Replace with your application code */
	DIO_Init();
 6ec:	0e 94 9f 01 	call	0x33e	; 0x33e <DIO_Init>
	Keypad_Init();
 6f0:	0e 94 45 02 	call	0x48a	; 0x48a <Keypad_Init>
	LCD_Init();
 6f4:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <LCD_Init>
	label:	LCD_Init();
 6f8:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <LCD_Init>
	Keypad_Init();
 6fc:	0e 94 45 02 	call	0x48a	; 0x48a <Keypad_Init>
	u8 arr[6]={NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED,NOTPRESSED} ;
 700:	fe 01       	movw	r30, r28
 702:	31 96       	adiw	r30, 0x01	; 1
 704:	86 e0       	ldi	r24, 0x06	; 6
 706:	df 01       	movw	r26, r30
 708:	1d 92       	st	X+, r1
 70a:	8a 95       	dec	r24
 70c:	e9 f7       	brne	.-6      	; 0x708 <main+0x2a>
	u8 res ;
	u8 counter=0 ;
 70e:	f1 2c       	mov	r15, r1
	while(1)
	{
		do
		{
			arr[counter]=GetKey();
 710:	0f 2d       	mov	r16, r15
 712:	10 e0       	ldi	r17, 0x00	; 0
 714:	0e 94 6e 02 	call	0x4dc	; 0x4dc <GetKey>
 718:	e1 e0       	ldi	r30, 0x01	; 1
 71a:	f0 e0       	ldi	r31, 0x00	; 0
 71c:	ec 0f       	add	r30, r28
 71e:	fd 1f       	adc	r31, r29
 720:	e0 0f       	add	r30, r16
 722:	f1 1f       	adc	r31, r17
 724:	80 83       	st	Z, r24
			
		} while(arr[counter]==NOTPRESSED);
 726:	88 23       	and	r24, r24
 728:	99 f3       	breq	.-26     	; 0x710 <main+0x32>
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
 72a:	81 34       	cpi	r24, 0x41	; 65
 72c:	51 f0       	breq	.+20     	; 0x742 <main+0x64>
 72e:	8d 33       	cpi	r24, 0x3D	; 61
 730:	41 f0       	breq	.+16     	; 0x742 <main+0x64>
 732:	8b 32       	cpi	r24, 0x2B	; 43
 734:	31 f0       	breq	.+12     	; 0x742 <main+0x64>
 736:	8d 32       	cpi	r24, 0x2D	; 45
 738:	21 f0       	breq	.+8      	; 0x742 <main+0x64>
 73a:	8a 32       	cpi	r24, 0x2A	; 42
 73c:	11 f0       	breq	.+4      	; 0x742 <main+0x64>
 73e:	8f 32       	cpi	r24, 0x2F	; 47
 740:	19 f4       	brne	.+6      	; 0x748 <main+0x6a>
		{
			LCD_Clear();
 742:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCD_Clear>
			goto label ;
 746:	d8 cf       	rjmp	.-80     	; 0x6f8 <main+0x1a>
		}
		else
		{
			LCD_Char(arr[counter]);
 748:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
		}
		counter++;
 74c:	ee 24       	eor	r14, r14
 74e:	e3 94       	inc	r14
 750:	ef 0c       	add	r14, r15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 752:	bf ef       	ldi	r27, 0xFF	; 255
 754:	29 ef       	ldi	r18, 0xF9	; 249
 756:	30 e0       	ldi	r19, 0x00	; 0
 758:	b1 50       	subi	r27, 0x01	; 1
 75a:	20 40       	sbci	r18, 0x00	; 0
 75c:	30 40       	sbci	r19, 0x00	; 0
 75e:	e1 f7       	brne	.-8      	; 0x758 <main+0x7a>
 760:	00 c0       	rjmp	.+0      	; 0x762 <main+0x84>
 762:	00 00       	nop
		_delay_ms(20);
		do
		{
			arr[counter]=GetKey();
 764:	0e 2d       	mov	r16, r14
 766:	10 e0       	ldi	r17, 0x00	; 0
 768:	0e 94 6e 02 	call	0x4dc	; 0x4dc <GetKey>
 76c:	e1 e0       	ldi	r30, 0x01	; 1
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	ec 0f       	add	r30, r28
 772:	fd 1f       	adc	r31, r29
 774:	e0 0f       	add	r30, r16
 776:	f1 1f       	adc	r31, r17
 778:	80 83       	st	Z, r24
			
		}while(arr[counter]==NOTPRESSED);
 77a:	88 23       	and	r24, r24
 77c:	99 f3       	breq	.-26     	; 0x764 <main+0x86>
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
 77e:	81 34       	cpi	r24, 0x41	; 65
 780:	51 f0       	breq	.+20     	; 0x796 <main+0xb8>
 782:	8d 33       	cpi	r24, 0x3D	; 61
 784:	41 f0       	breq	.+16     	; 0x796 <main+0xb8>
 786:	8b 32       	cpi	r24, 0x2B	; 43
 788:	31 f0       	breq	.+12     	; 0x796 <main+0xb8>
 78a:	8d 32       	cpi	r24, 0x2D	; 45
 78c:	21 f0       	breq	.+8      	; 0x796 <main+0xb8>
 78e:	8a 32       	cpi	r24, 0x2A	; 42
 790:	11 f0       	breq	.+4      	; 0x796 <main+0xb8>
 792:	8f 32       	cpi	r24, 0x2F	; 47
 794:	19 f4       	brne	.+6      	; 0x79c <main+0xbe>
		{
			LCD_Clear();
 796:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCD_Clear>
			goto label ;
 79a:	ae cf       	rjmp	.-164    	; 0x6f8 <main+0x1a>
		}
		else
		{
			LCD_Char(arr[counter]);
 79c:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
		}
		counter++;
 7a0:	68 94       	set
 7a2:	ee 24       	eor	r14, r14
 7a4:	e1 f8       	bld	r14, 1
 7a6:	ef 0c       	add	r14, r15
 7a8:	8f ef       	ldi	r24, 0xFF	; 255
 7aa:	99 ef       	ldi	r25, 0xF9	; 249
 7ac:	a0 e0       	ldi	r26, 0x00	; 0
 7ae:	81 50       	subi	r24, 0x01	; 1
 7b0:	90 40       	sbci	r25, 0x00	; 0
 7b2:	a0 40       	sbci	r26, 0x00	; 0
 7b4:	e1 f7       	brne	.-8      	; 0x7ae <main+0xd0>
 7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <main+0xda>
 7b8:	00 00       	nop
		_delay_ms(20);
		
		do
		{
			arr[counter]=GetKey();
 7ba:	0e 2d       	mov	r16, r14
 7bc:	10 e0       	ldi	r17, 0x00	; 0
 7be:	0e 94 6e 02 	call	0x4dc	; 0x4dc <GetKey>
 7c2:	e1 e0       	ldi	r30, 0x01	; 1
 7c4:	f0 e0       	ldi	r31, 0x00	; 0
 7c6:	ec 0f       	add	r30, r28
 7c8:	fd 1f       	adc	r31, r29
 7ca:	e0 0f       	add	r30, r16
 7cc:	f1 1f       	adc	r31, r17
 7ce:	80 83       	st	Z, r24
			
		}while(arr[counter]==NOTPRESSED);
 7d0:	88 23       	and	r24, r24
 7d2:	99 f3       	breq	.-26     	; 0x7ba <main+0xdc>
		
		if(arr[counter]=='A'||arr[counter]=='=')
 7d4:	81 34       	cpi	r24, 0x41	; 65
 7d6:	11 f0       	breq	.+4      	; 0x7dc <main+0xfe>
 7d8:	8d 33       	cpi	r24, 0x3D	; 61
 7da:	19 f4       	brne	.+6      	; 0x7e2 <main+0x104>
		{
			LCD_Clear();
 7dc:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCD_Clear>
			goto label ;
 7e0:	8b cf       	rjmp	.-234    	; 0x6f8 <main+0x1a>
		}
		else
		{
			LCD_Char(arr[counter]);
 7e2:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
		}
		counter++;
 7e6:	0f 2e       	mov	r0, r31
 7e8:	f3 e0       	ldi	r31, 0x03	; 3
 7ea:	ef 2e       	mov	r14, r31
 7ec:	f0 2d       	mov	r31, r0
 7ee:	ef 0c       	add	r14, r15
 7f0:	bf ef       	ldi	r27, 0xFF	; 255
 7f2:	29 ef       	ldi	r18, 0xF9	; 249
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	b1 50       	subi	r27, 0x01	; 1
 7f8:	20 40       	sbci	r18, 0x00	; 0
 7fa:	30 40       	sbci	r19, 0x00	; 0
 7fc:	e1 f7       	brne	.-8      	; 0x7f6 <main+0x118>
 7fe:	00 c0       	rjmp	.+0      	; 0x800 <__DATA_REGION_LENGTH__>
 800:	00 00       	nop
		_delay_ms(20);
		do
		{
			arr[counter]=GetKey();
 802:	0e 2d       	mov	r16, r14
 804:	10 e0       	ldi	r17, 0x00	; 0
 806:	0e 94 6e 02 	call	0x4dc	; 0x4dc <GetKey>
 80a:	e1 e0       	ldi	r30, 0x01	; 1
 80c:	f0 e0       	ldi	r31, 0x00	; 0
 80e:	ec 0f       	add	r30, r28
 810:	fd 1f       	adc	r31, r29
 812:	e0 0f       	add	r30, r16
 814:	f1 1f       	adc	r31, r17
 816:	80 83       	st	Z, r24
			
		}while(arr[counter]==NOTPRESSED);
 818:	88 23       	and	r24, r24
 81a:	99 f3       	breq	.-26     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
		
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
 81c:	81 34       	cpi	r24, 0x41	; 65
 81e:	51 f0       	breq	.+20     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 820:	8d 33       	cpi	r24, 0x3D	; 61
 822:	41 f0       	breq	.+16     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 824:	8b 32       	cpi	r24, 0x2B	; 43
 826:	31 f0       	breq	.+12     	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 828:	8d 32       	cpi	r24, 0x2D	; 45
 82a:	21 f0       	breq	.+8      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 82c:	8a 32       	cpi	r24, 0x2A	; 42
 82e:	11 f0       	breq	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 830:	8f 32       	cpi	r24, 0x2F	; 47
 832:	19 f4       	brne	.+6      	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
		{
			LCD_Clear();
 834:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCD_Clear>
			goto label ;
 838:	5f cf       	rjmp	.-322    	; 0x6f8 <main+0x1a>
		}
		else
		{
			LCD_Char(arr[counter]);
 83a:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
		}
		counter++;
 83e:	68 94       	set
 840:	ee 24       	eor	r14, r14
 842:	e2 f8       	bld	r14, 2
 844:	ef 0c       	add	r14, r15
 846:	8f ef       	ldi	r24, 0xFF	; 255
 848:	99 ef       	ldi	r25, 0xF9	; 249
 84a:	a0 e0       	ldi	r26, 0x00	; 0
 84c:	81 50       	subi	r24, 0x01	; 1
 84e:	90 40       	sbci	r25, 0x00	; 0
 850:	a0 40       	sbci	r26, 0x00	; 0
 852:	e1 f7       	brne	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 854:	00 c0       	rjmp	.+0      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 856:	00 00       	nop
		_delay_ms(20);
		do
		{
			arr[counter]=GetKey();
 858:	0e 2d       	mov	r16, r14
 85a:	10 e0       	ldi	r17, 0x00	; 0
 85c:	0e 94 6e 02 	call	0x4dc	; 0x4dc <GetKey>
 860:	e1 e0       	ldi	r30, 0x01	; 1
 862:	f0 e0       	ldi	r31, 0x00	; 0
 864:	ec 0f       	add	r30, r28
 866:	fd 1f       	adc	r31, r29
 868:	e0 0f       	add	r30, r16
 86a:	f1 1f       	adc	r31, r17
 86c:	80 83       	st	Z, r24
			
		}while(arr[counter]==NOTPRESSED);
 86e:	88 23       	and	r24, r24
 870:	99 f3       	breq	.-26     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
		
		if(arr[counter]=='A'||arr[counter]=='='||arr[counter]=='+'||arr[counter]=='-'||arr[counter]=='*'||arr[counter]=='/')
 872:	81 34       	cpi	r24, 0x41	; 65
 874:	51 f0       	breq	.+20     	; 0x88a <__stack+0x2b>
 876:	8d 33       	cpi	r24, 0x3D	; 61
 878:	41 f0       	breq	.+16     	; 0x88a <__stack+0x2b>
 87a:	8b 32       	cpi	r24, 0x2B	; 43
 87c:	31 f0       	breq	.+12     	; 0x88a <__stack+0x2b>
 87e:	8d 32       	cpi	r24, 0x2D	; 45
 880:	21 f0       	breq	.+8      	; 0x88a <__stack+0x2b>
 882:	8a 32       	cpi	r24, 0x2A	; 42
 884:	11 f0       	breq	.+4      	; 0x88a <__stack+0x2b>
 886:	8f 32       	cpi	r24, 0x2F	; 47
 888:	19 f4       	brne	.+6      	; 0x890 <__stack+0x31>
		{
			LCD_Clear();
 88a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCD_Clear>
			goto label ;
 88e:	34 cf       	rjmp	.-408    	; 0x6f8 <main+0x1a>
		}
		else
		{
			LCD_Char(arr[counter]);
 890:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
		}
		counter++;
 894:	b5 e0       	ldi	r27, 0x05	; 5
 896:	fb 0e       	add	r15, r27
 898:	2f ef       	ldi	r18, 0xFF	; 255
 89a:	39 ef       	ldi	r19, 0xF9	; 249
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	21 50       	subi	r18, 0x01	; 1
 8a0:	30 40       	sbci	r19, 0x00	; 0
 8a2:	80 40       	sbci	r24, 0x00	; 0
 8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
 8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <__stack+0x49>
 8a8:	00 00       	nop
		_delay_ms(20);
		
		
		do
		{
			arr[counter]=GetKey();
 8aa:	0f 2d       	mov	r16, r15
 8ac:	10 e0       	ldi	r17, 0x00	; 0
 8ae:	0e 94 6e 02 	call	0x4dc	; 0x4dc <GetKey>
 8b2:	e1 e0       	ldi	r30, 0x01	; 1
 8b4:	f0 e0       	ldi	r31, 0x00	; 0
 8b6:	ec 0f       	add	r30, r28
 8b8:	fd 1f       	adc	r31, r29
 8ba:	e0 0f       	add	r30, r16
 8bc:	f1 1f       	adc	r31, r17
 8be:	80 83       	st	Z, r24
			
		}while(arr[counter]==NOTPRESSED);
 8c0:	88 23       	and	r24, r24
 8c2:	99 f3       	breq	.-26     	; 0x8aa <__stack+0x4b>
		
		if(arr[counter]=='=')
 8c4:	8d 33       	cpi	r24, 0x3D	; 61
 8c6:	09 f0       	breq	.+2      	; 0x8ca <__stack+0x6b>
 8c8:	3d c2       	rjmp	.+1146   	; 0xd44 <__stack+0x4e5>
		{
			LCD_Char(arr[counter]);
 8ca:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
			
			
			switch(arr[counter-3])
 8ce:	f8 01       	movw	r30, r16
 8d0:	33 97       	sbiw	r30, 0x03	; 3
 8d2:	a1 e0       	ldi	r26, 0x01	; 1
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	ac 0f       	add	r26, r28
 8d8:	bd 1f       	adc	r27, r29
 8da:	ea 0f       	add	r30, r26
 8dc:	fb 1f       	adc	r31, r27
 8de:	80 81       	ld	r24, Z
 8e0:	8b 32       	cpi	r24, 0x2B	; 43
 8e2:	61 f0       	breq	.+24     	; 0x8fc <__stack+0x9d>
 8e4:	20 f4       	brcc	.+8      	; 0x8ee <__stack+0x8f>
 8e6:	8a 32       	cpi	r24, 0x2A	; 42
 8e8:	09 f4       	brne	.+2      	; 0x8ec <__stack+0x8d>
 8ea:	08 c1       	rjmp	.+528    	; 0xafc <__stack+0x29d>
 8ec:	2e c2       	rjmp	.+1116   	; 0xd4a <__stack+0x4eb>
 8ee:	8d 32       	cpi	r24, 0x2D	; 45
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <__stack+0x95>
 8f2:	85 c0       	rjmp	.+266    	; 0x9fe <__stack+0x19f>
 8f4:	8f 32       	cpi	r24, 0x2F	; 47
 8f6:	09 f4       	brne	.+2      	; 0x8fa <__stack+0x9b>
 8f8:	91 c1       	rjmp	.+802    	; 0xc1c <__stack+0x3bd>
 8fa:	27 c2       	rjmp	.+1102   	; 0xd4a <__stack+0x4eb>
			{
				case '+':
				res=(arr[counter-4]-48)+((arr[counter-5]-48)*10)+((arr[counter-2]-48)*10)+(arr[counter-1]-48);
 8fc:	f8 01       	movw	r30, r16
 8fe:	34 97       	sbiw	r30, 0x04	; 4
 900:	21 e0       	ldi	r18, 0x01	; 1
 902:	30 e0       	ldi	r19, 0x00	; 0
 904:	2c 0f       	add	r18, r28
 906:	3d 1f       	adc	r19, r29
 908:	e2 0f       	add	r30, r18
 90a:	f3 1f       	adc	r31, r19
 90c:	90 81       	ld	r25, Z
 90e:	f8 01       	movw	r30, r16
 910:	35 97       	sbiw	r30, 0x05	; 5
 912:	e2 0f       	add	r30, r18
 914:	f3 1f       	adc	r31, r19
 916:	40 81       	ld	r20, Z
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	40 53       	subi	r20, 0x30	; 48
 91c:	51 09       	sbc	r21, r1
 91e:	f8 01       	movw	r30, r16
 920:	32 97       	sbiw	r30, 0x02	; 2
 922:	e2 0f       	add	r30, r18
 924:	f3 1f       	adc	r31, r19
 926:	20 81       	ld	r18, Z
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	20 53       	subi	r18, 0x30	; 48
 92c:	31 09       	sbc	r19, r1
 92e:	01 50       	subi	r16, 0x01	; 1
 930:	11 09       	sbc	r17, r1
 932:	e1 e0       	ldi	r30, 0x01	; 1
 934:	f0 e0       	ldi	r31, 0x00	; 0
 936:	ec 0f       	add	r30, r28
 938:	fd 1f       	adc	r31, r29
 93a:	e0 0f       	add	r30, r16
 93c:	f1 1f       	adc	r31, r17
 93e:	80 81       	ld	r24, Z
 940:	44 0f       	add	r20, r20
 942:	34 2f       	mov	r19, r20
 944:	33 0f       	add	r19, r19
 946:	33 0f       	add	r19, r19
 948:	43 0f       	add	r20, r19
 94a:	49 0f       	add	r20, r25
 94c:	22 0f       	add	r18, r18
 94e:	92 2f       	mov	r25, r18
 950:	99 0f       	add	r25, r25
 952:	99 0f       	add	r25, r25
 954:	29 0f       	add	r18, r25
 956:	24 0f       	add	r18, r20
 958:	28 0f       	add	r18, r24
 95a:	10 ea       	ldi	r17, 0xA0	; 160
 95c:	12 0f       	add	r17, r18
				if(res>=100&&res<1000)
 95e:	14 36       	cpi	r17, 0x64	; 100
 960:	60 f1       	brcs	.+88     	; 0x9ba <__stack+0x15b>
				{
					LCD_Char((res/100)+48);
 962:	89 e2       	ldi	r24, 0x29	; 41
 964:	18 9f       	mul	r17, r24
 966:	81 2d       	mov	r24, r1
 968:	11 24       	eor	r1, r1
 96a:	82 95       	swap	r24
 96c:	8f 70       	andi	r24, 0x0F	; 15
 96e:	80 5d       	subi	r24, 0xD0	; 208
 970:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char(((res/10)%10)+48);
 974:	8d ec       	ldi	r24, 0xCD	; 205
 976:	18 9f       	mul	r17, r24
 978:	01 2d       	mov	r16, r1
 97a:	11 24       	eor	r1, r1
 97c:	06 95       	lsr	r16
 97e:	06 95       	lsr	r16
 980:	06 95       	lsr	r16
 982:	08 9f       	mul	r16, r24
 984:	81 2d       	mov	r24, r1
 986:	11 24       	eor	r1, r1
 988:	86 95       	lsr	r24
 98a:	86 95       	lsr	r24
 98c:	86 95       	lsr	r24
 98e:	88 0f       	add	r24, r24
 990:	98 2f       	mov	r25, r24
 992:	99 0f       	add	r25, r25
 994:	99 0f       	add	r25, r25
 996:	89 0f       	add	r24, r25
 998:	30 2f       	mov	r19, r16
 99a:	38 1b       	sub	r19, r24
 99c:	83 2f       	mov	r24, r19
 99e:	80 5d       	subi	r24, 0xD0	; 208
 9a0:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 9a4:	00 0f       	add	r16, r16
 9a6:	80 2f       	mov	r24, r16
 9a8:	88 0f       	add	r24, r24
 9aa:	88 0f       	add	r24, r24
 9ac:	08 0f       	add	r16, r24
 9ae:	81 2f       	mov	r24, r17
 9b0:	80 1b       	sub	r24, r16
 9b2:	80 5d       	subi	r24, 0xD0	; 208
 9b4:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 9b8:	c8 c1       	rjmp	.+912    	; 0xd4a <__stack+0x4eb>
				}
				else if (res>=10&&res<100)
 9ba:	86 e9       	ldi	r24, 0x96	; 150
 9bc:	82 0f       	add	r24, r18
 9be:	8a 35       	cpi	r24, 0x5A	; 90
 9c0:	b0 f4       	brcc	.+44     	; 0x9ee <__stack+0x18f>
				{
					LCD_Char((res/10)+48);
 9c2:	0d ec       	ldi	r16, 0xCD	; 205
 9c4:	10 9f       	mul	r17, r16
 9c6:	01 2d       	mov	r16, r1
 9c8:	11 24       	eor	r1, r1
 9ca:	06 95       	lsr	r16
 9cc:	06 95       	lsr	r16
 9ce:	06 95       	lsr	r16
 9d0:	80 e3       	ldi	r24, 0x30	; 48
 9d2:	80 0f       	add	r24, r16
 9d4:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 9d8:	00 0f       	add	r16, r16
 9da:	80 2f       	mov	r24, r16
 9dc:	88 0f       	add	r24, r24
 9de:	88 0f       	add	r24, r24
 9e0:	08 0f       	add	r16, r24
 9e2:	81 2f       	mov	r24, r17
 9e4:	80 1b       	sub	r24, r16
 9e6:	80 5d       	subi	r24, 0xD0	; 208
 9e8:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 9ec:	ae c1       	rjmp	.+860    	; 0xd4a <__stack+0x4eb>
				}
				else if(res<10)
 9ee:	1a 30       	cpi	r17, 0x0A	; 10
 9f0:	08 f0       	brcs	.+2      	; 0x9f4 <__stack+0x195>
 9f2:	ab c1       	rjmp	.+854    	; 0xd4a <__stack+0x4eb>
				{
					LCD_Char(res+48);
 9f4:	80 ed       	ldi	r24, 0xD0	; 208
 9f6:	82 0f       	add	r24, r18
 9f8:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 9fc:	a6 c1       	rjmp	.+844    	; 0xd4a <__stack+0x4eb>
				}
				break;
				case '-' :
				res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))-(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
 9fe:	f8 01       	movw	r30, r16
 a00:	34 97       	sbiw	r30, 0x04	; 4
 a02:	81 e0       	ldi	r24, 0x01	; 1
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	8c 0f       	add	r24, r28
 a08:	9d 1f       	adc	r25, r29
 a0a:	e8 0f       	add	r30, r24
 a0c:	f9 1f       	adc	r31, r25
 a0e:	40 81       	ld	r20, Z
 a10:	f8 01       	movw	r30, r16
 a12:	35 97       	sbiw	r30, 0x05	; 5
 a14:	e8 0f       	add	r30, r24
 a16:	f9 1f       	adc	r31, r25
 a18:	20 81       	ld	r18, Z
 a1a:	30 e0       	ldi	r19, 0x00	; 0
 a1c:	20 53       	subi	r18, 0x30	; 48
 a1e:	31 09       	sbc	r19, r1
 a20:	f8 01       	movw	r30, r16
 a22:	32 97       	sbiw	r30, 0x02	; 2
 a24:	e8 0f       	add	r30, r24
 a26:	f9 1f       	adc	r31, r25
 a28:	80 81       	ld	r24, Z
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	c0 97       	sbiw	r24, 0x30	; 48
 a2e:	01 50       	subi	r16, 0x01	; 1
 a30:	11 09       	sbc	r17, r1
 a32:	e1 e0       	ldi	r30, 0x01	; 1
 a34:	f0 e0       	ldi	r31, 0x00	; 0
 a36:	ec 0f       	add	r30, r28
 a38:	fd 1f       	adc	r31, r29
 a3a:	e0 0f       	add	r30, r16
 a3c:	f1 1f       	adc	r31, r17
 a3e:	90 81       	ld	r25, Z
 a40:	22 0f       	add	r18, r18
 a42:	12 2f       	mov	r17, r18
 a44:	11 0f       	add	r17, r17
 a46:	11 0f       	add	r17, r17
 a48:	21 0f       	add	r18, r17
 a4a:	12 2f       	mov	r17, r18
 a4c:	14 0f       	add	r17, r20
 a4e:	88 0f       	add	r24, r24
 a50:	28 2f       	mov	r18, r24
 a52:	22 0f       	add	r18, r18
 a54:	22 0f       	add	r18, r18
 a56:	82 0f       	add	r24, r18
 a58:	89 0f       	add	r24, r25
 a5a:	18 1b       	sub	r17, r24
				if(res>=100&&res<1000)
 a5c:	14 36       	cpi	r17, 0x64	; 100
 a5e:	60 f1       	brcs	.+88     	; 0xab8 <__stack+0x259>
				{
					LCD_Char((res/100)+48);
 a60:	89 e2       	ldi	r24, 0x29	; 41
 a62:	18 9f       	mul	r17, r24
 a64:	81 2d       	mov	r24, r1
 a66:	11 24       	eor	r1, r1
 a68:	82 95       	swap	r24
 a6a:	8f 70       	andi	r24, 0x0F	; 15
 a6c:	80 5d       	subi	r24, 0xD0	; 208
 a6e:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char(((res/10)%10)+48);
 a72:	8d ec       	ldi	r24, 0xCD	; 205
 a74:	18 9f       	mul	r17, r24
 a76:	01 2d       	mov	r16, r1
 a78:	11 24       	eor	r1, r1
 a7a:	06 95       	lsr	r16
 a7c:	06 95       	lsr	r16
 a7e:	06 95       	lsr	r16
 a80:	08 9f       	mul	r16, r24
 a82:	81 2d       	mov	r24, r1
 a84:	11 24       	eor	r1, r1
 a86:	86 95       	lsr	r24
 a88:	86 95       	lsr	r24
 a8a:	86 95       	lsr	r24
 a8c:	88 0f       	add	r24, r24
 a8e:	98 2f       	mov	r25, r24
 a90:	99 0f       	add	r25, r25
 a92:	99 0f       	add	r25, r25
 a94:	89 0f       	add	r24, r25
 a96:	90 2f       	mov	r25, r16
 a98:	98 1b       	sub	r25, r24
 a9a:	89 2f       	mov	r24, r25
 a9c:	80 5d       	subi	r24, 0xD0	; 208
 a9e:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 aa2:	00 0f       	add	r16, r16
 aa4:	80 2f       	mov	r24, r16
 aa6:	88 0f       	add	r24, r24
 aa8:	88 0f       	add	r24, r24
 aaa:	08 0f       	add	r16, r24
 aac:	81 2f       	mov	r24, r17
 aae:	80 1b       	sub	r24, r16
 ab0:	80 5d       	subi	r24, 0xD0	; 208
 ab2:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 ab6:	49 c1       	rjmp	.+658    	; 0xd4a <__stack+0x4eb>
				}
				else if (res>=10&&res<100)
 ab8:	86 ef       	ldi	r24, 0xF6	; 246
 aba:	81 0f       	add	r24, r17
 abc:	8a 35       	cpi	r24, 0x5A	; 90
 abe:	b0 f4       	brcc	.+44     	; 0xaec <__stack+0x28d>
				{
					LCD_Char((res/10)+48);
 ac0:	0d ec       	ldi	r16, 0xCD	; 205
 ac2:	10 9f       	mul	r17, r16
 ac4:	01 2d       	mov	r16, r1
 ac6:	11 24       	eor	r1, r1
 ac8:	06 95       	lsr	r16
 aca:	06 95       	lsr	r16
 acc:	06 95       	lsr	r16
 ace:	80 e3       	ldi	r24, 0x30	; 48
 ad0:	80 0f       	add	r24, r16
 ad2:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 ad6:	00 0f       	add	r16, r16
 ad8:	80 2f       	mov	r24, r16
 ada:	88 0f       	add	r24, r24
 adc:	88 0f       	add	r24, r24
 ade:	08 0f       	add	r16, r24
 ae0:	81 2f       	mov	r24, r17
 ae2:	80 1b       	sub	r24, r16
 ae4:	80 5d       	subi	r24, 0xD0	; 208
 ae6:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 aea:	2f c1       	rjmp	.+606    	; 0xd4a <__stack+0x4eb>
				}
				else if(res<10)
 aec:	1a 30       	cpi	r17, 0x0A	; 10
 aee:	08 f0       	brcs	.+2      	; 0xaf2 <__stack+0x293>
 af0:	2c c1       	rjmp	.+600    	; 0xd4a <__stack+0x4eb>
				{
					LCD_Char(res+48);
 af2:	80 e3       	ldi	r24, 0x30	; 48
 af4:	81 0f       	add	r24, r17
 af6:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 afa:	27 c1       	rjmp	.+590    	; 0xd4a <__stack+0x4eb>
				}
				break;
				case '*':
				res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))*(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
 afc:	f8 01       	movw	r30, r16
 afe:	34 97       	sbiw	r30, 0x04	; 4
 b00:	a1 e0       	ldi	r26, 0x01	; 1
 b02:	b0 e0       	ldi	r27, 0x00	; 0
 b04:	ac 0f       	add	r26, r28
 b06:	bd 1f       	adc	r27, r29
 b08:	ea 0f       	add	r30, r26
 b0a:	fb 1f       	adc	r31, r27
 b0c:	40 81       	ld	r20, Z
 b0e:	50 e0       	ldi	r21, 0x00	; 0
 b10:	40 53       	subi	r20, 0x30	; 48
 b12:	51 09       	sbc	r21, r1
 b14:	f8 01       	movw	r30, r16
 b16:	35 97       	sbiw	r30, 0x05	; 5
 b18:	ea 0f       	add	r30, r26
 b1a:	fb 1f       	adc	r31, r27
 b1c:	80 81       	ld	r24, Z
 b1e:	90 e0       	ldi	r25, 0x00	; 0
 b20:	c0 97       	sbiw	r24, 0x30	; 48
 b22:	9c 01       	movw	r18, r24
 b24:	22 0f       	add	r18, r18
 b26:	33 1f       	adc	r19, r19
 b28:	88 0f       	add	r24, r24
 b2a:	99 1f       	adc	r25, r25
 b2c:	88 0f       	add	r24, r24
 b2e:	99 1f       	adc	r25, r25
 b30:	88 0f       	add	r24, r24
 b32:	99 1f       	adc	r25, r25
 b34:	82 0f       	add	r24, r18
 b36:	93 1f       	adc	r25, r19
 b38:	48 0f       	add	r20, r24
 b3a:	59 1f       	adc	r21, r25
 b3c:	f8 01       	movw	r30, r16
 b3e:	32 97       	sbiw	r30, 0x02	; 2
 b40:	ea 0f       	add	r30, r26
 b42:	fb 1f       	adc	r31, r27
 b44:	80 81       	ld	r24, Z
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	c0 97       	sbiw	r24, 0x30	; 48
 b4a:	9c 01       	movw	r18, r24
 b4c:	22 0f       	add	r18, r18
 b4e:	33 1f       	adc	r19, r19
 b50:	88 0f       	add	r24, r24
 b52:	99 1f       	adc	r25, r25
 b54:	88 0f       	add	r24, r24
 b56:	99 1f       	adc	r25, r25
 b58:	88 0f       	add	r24, r24
 b5a:	99 1f       	adc	r25, r25
 b5c:	82 0f       	add	r24, r18
 b5e:	93 1f       	adc	r25, r19
 b60:	01 50       	subi	r16, 0x01	; 1
 b62:	11 09       	sbc	r17, r1
 b64:	fd 01       	movw	r30, r26
 b66:	e0 0f       	add	r30, r16
 b68:	f1 1f       	adc	r31, r17
 b6a:	20 81       	ld	r18, Z
 b6c:	30 e0       	ldi	r19, 0x00	; 0
 b6e:	20 53       	subi	r18, 0x30	; 48
 b70:	31 09       	sbc	r19, r1
 b72:	82 0f       	add	r24, r18
 b74:	93 1f       	adc	r25, r19
 b76:	48 9f       	mul	r20, r24
 b78:	10 2d       	mov	r17, r0
 b7a:	11 24       	eor	r1, r1
					LCD_Char(((res/100)%10)+48);
					LCD_Char(((res/10)%10)+48);
					LCD_Char((res%10)+48);
					
				}
				else if(res>=100&&res<1000)
 b7c:	14 36       	cpi	r17, 0x64	; 100
 b7e:	60 f1       	brcs	.+88     	; 0xbd8 <__stack+0x379>
				{
					LCD_Char((res/100)+48);
 b80:	89 e2       	ldi	r24, 0x29	; 41
 b82:	18 9f       	mul	r17, r24
 b84:	81 2d       	mov	r24, r1
 b86:	11 24       	eor	r1, r1
 b88:	82 95       	swap	r24
 b8a:	8f 70       	andi	r24, 0x0F	; 15
 b8c:	80 5d       	subi	r24, 0xD0	; 208
 b8e:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char(((res/10)%10)+48);
 b92:	8d ec       	ldi	r24, 0xCD	; 205
 b94:	18 9f       	mul	r17, r24
 b96:	01 2d       	mov	r16, r1
 b98:	11 24       	eor	r1, r1
 b9a:	06 95       	lsr	r16
 b9c:	06 95       	lsr	r16
 b9e:	06 95       	lsr	r16
 ba0:	08 9f       	mul	r16, r24
 ba2:	81 2d       	mov	r24, r1
 ba4:	11 24       	eor	r1, r1
 ba6:	86 95       	lsr	r24
 ba8:	86 95       	lsr	r24
 baa:	86 95       	lsr	r24
 bac:	88 0f       	add	r24, r24
 bae:	98 2f       	mov	r25, r24
 bb0:	99 0f       	add	r25, r25
 bb2:	99 0f       	add	r25, r25
 bb4:	89 0f       	add	r24, r25
 bb6:	b0 2f       	mov	r27, r16
 bb8:	b8 1b       	sub	r27, r24
 bba:	8b 2f       	mov	r24, r27
 bbc:	80 5d       	subi	r24, 0xD0	; 208
 bbe:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 bc2:	00 0f       	add	r16, r16
 bc4:	80 2f       	mov	r24, r16
 bc6:	88 0f       	add	r24, r24
 bc8:	88 0f       	add	r24, r24
 bca:	08 0f       	add	r16, r24
 bcc:	81 2f       	mov	r24, r17
 bce:	80 1b       	sub	r24, r16
 bd0:	80 5d       	subi	r24, 0xD0	; 208
 bd2:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 bd6:	b9 c0       	rjmp	.+370    	; 0xd4a <__stack+0x4eb>
				}
				else if (res>=10&&res<100)
 bd8:	86 ef       	ldi	r24, 0xF6	; 246
 bda:	81 0f       	add	r24, r17
 bdc:	8a 35       	cpi	r24, 0x5A	; 90
 bde:	b0 f4       	brcc	.+44     	; 0xc0c <__stack+0x3ad>
				{
					LCD_Char((res/10)+48);
 be0:	0d ec       	ldi	r16, 0xCD	; 205
 be2:	10 9f       	mul	r17, r16
 be4:	01 2d       	mov	r16, r1
 be6:	11 24       	eor	r1, r1
 be8:	06 95       	lsr	r16
 bea:	06 95       	lsr	r16
 bec:	06 95       	lsr	r16
 bee:	80 e3       	ldi	r24, 0x30	; 48
 bf0:	80 0f       	add	r24, r16
 bf2:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 bf6:	00 0f       	add	r16, r16
 bf8:	80 2f       	mov	r24, r16
 bfa:	88 0f       	add	r24, r24
 bfc:	88 0f       	add	r24, r24
 bfe:	08 0f       	add	r16, r24
 c00:	81 2f       	mov	r24, r17
 c02:	80 1b       	sub	r24, r16
 c04:	80 5d       	subi	r24, 0xD0	; 208
 c06:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 c0a:	9f c0       	rjmp	.+318    	; 0xd4a <__stack+0x4eb>
				}
				else if(res<10)
 c0c:	1a 30       	cpi	r17, 0x0A	; 10
 c0e:	08 f0       	brcs	.+2      	; 0xc12 <__stack+0x3b3>
 c10:	9c c0       	rjmp	.+312    	; 0xd4a <__stack+0x4eb>
				{
					LCD_Char(res+48);
 c12:	80 e3       	ldi	r24, 0x30	; 48
 c14:	81 0f       	add	r24, r17
 c16:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 c1a:	97 c0       	rjmp	.+302    	; 0xd4a <__stack+0x4eb>
				}
				break;
				case '/':
				res=((arr[counter-4]-48)+((arr[counter-5]-48)*10))/(((arr[counter-2]-48)*10)+(arr[counter-1]-48));
 c1c:	f8 01       	movw	r30, r16
 c1e:	34 97       	sbiw	r30, 0x04	; 4
 c20:	21 e0       	ldi	r18, 0x01	; 1
 c22:	30 e0       	ldi	r19, 0x00	; 0
 c24:	2c 0f       	add	r18, r28
 c26:	3d 1f       	adc	r19, r29
 c28:	e2 0f       	add	r30, r18
 c2a:	f3 1f       	adc	r31, r19
 c2c:	80 81       	ld	r24, Z
 c2e:	90 e0       	ldi	r25, 0x00	; 0
 c30:	c0 97       	sbiw	r24, 0x30	; 48
 c32:	f8 01       	movw	r30, r16
 c34:	35 97       	sbiw	r30, 0x05	; 5
 c36:	e2 0f       	add	r30, r18
 c38:	f3 1f       	adc	r31, r19
 c3a:	20 81       	ld	r18, Z
 c3c:	30 e0       	ldi	r19, 0x00	; 0
 c3e:	20 53       	subi	r18, 0x30	; 48
 c40:	31 09       	sbc	r19, r1
 c42:	a9 01       	movw	r20, r18
 c44:	44 0f       	add	r20, r20
 c46:	55 1f       	adc	r21, r21
 c48:	22 0f       	add	r18, r18
 c4a:	33 1f       	adc	r19, r19
 c4c:	22 0f       	add	r18, r18
 c4e:	33 1f       	adc	r19, r19
 c50:	22 0f       	add	r18, r18
 c52:	33 1f       	adc	r19, r19
 c54:	24 0f       	add	r18, r20
 c56:	35 1f       	adc	r19, r21
 c58:	82 0f       	add	r24, r18
 c5a:	93 1f       	adc	r25, r19
 c5c:	f8 01       	movw	r30, r16
 c5e:	32 97       	sbiw	r30, 0x02	; 2
 c60:	a1 e0       	ldi	r26, 0x01	; 1
 c62:	b0 e0       	ldi	r27, 0x00	; 0
 c64:	ac 0f       	add	r26, r28
 c66:	bd 1f       	adc	r27, r29
 c68:	ea 0f       	add	r30, r26
 c6a:	fb 1f       	adc	r31, r27
 c6c:	20 81       	ld	r18, Z
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	20 53       	subi	r18, 0x30	; 48
 c72:	31 09       	sbc	r19, r1
 c74:	b9 01       	movw	r22, r18
 c76:	66 0f       	add	r22, r22
 c78:	77 1f       	adc	r23, r23
 c7a:	22 0f       	add	r18, r18
 c7c:	33 1f       	adc	r19, r19
 c7e:	22 0f       	add	r18, r18
 c80:	33 1f       	adc	r19, r19
 c82:	22 0f       	add	r18, r18
 c84:	33 1f       	adc	r19, r19
 c86:	26 0f       	add	r18, r22
 c88:	37 1f       	adc	r19, r23
 c8a:	01 50       	subi	r16, 0x01	; 1
 c8c:	11 09       	sbc	r17, r1
 c8e:	fd 01       	movw	r30, r26
 c90:	e0 0f       	add	r30, r16
 c92:	f1 1f       	adc	r31, r17
 c94:	60 81       	ld	r22, Z
 c96:	70 e0       	ldi	r23, 0x00	; 0
 c98:	60 53       	subi	r22, 0x30	; 48
 c9a:	71 09       	sbc	r23, r1
 c9c:	62 0f       	add	r22, r18
 c9e:	73 1f       	adc	r23, r19
 ca0:	0e 94 af 06 	call	0xd5e	; 0xd5e <__divmodhi4>
 ca4:	16 2f       	mov	r17, r22
				if(res>=100&&res<1000)
 ca6:	64 36       	cpi	r22, 0x64	; 100
 ca8:	60 f1       	brcs	.+88     	; 0xd02 <__stack+0x4a3>
				{
					LCD_Char((res/100)+48);
 caa:	89 e2       	ldi	r24, 0x29	; 41
 cac:	68 9f       	mul	r22, r24
 cae:	81 2d       	mov	r24, r1
 cb0:	11 24       	eor	r1, r1
 cb2:	82 95       	swap	r24
 cb4:	8f 70       	andi	r24, 0x0F	; 15
 cb6:	80 5d       	subi	r24, 0xD0	; 208
 cb8:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char(((res/10)%10)+48);
 cbc:	8d ec       	ldi	r24, 0xCD	; 205
 cbe:	18 9f       	mul	r17, r24
 cc0:	01 2d       	mov	r16, r1
 cc2:	11 24       	eor	r1, r1
 cc4:	06 95       	lsr	r16
 cc6:	06 95       	lsr	r16
 cc8:	06 95       	lsr	r16
 cca:	08 9f       	mul	r16, r24
 ccc:	81 2d       	mov	r24, r1
 cce:	11 24       	eor	r1, r1
 cd0:	86 95       	lsr	r24
 cd2:	86 95       	lsr	r24
 cd4:	86 95       	lsr	r24
 cd6:	88 0f       	add	r24, r24
 cd8:	98 2f       	mov	r25, r24
 cda:	99 0f       	add	r25, r25
 cdc:	99 0f       	add	r25, r25
 cde:	89 0f       	add	r24, r25
 ce0:	b0 2f       	mov	r27, r16
 ce2:	b8 1b       	sub	r27, r24
 ce4:	8b 2f       	mov	r24, r27
 ce6:	80 5d       	subi	r24, 0xD0	; 208
 ce8:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 cec:	00 0f       	add	r16, r16
 cee:	80 2f       	mov	r24, r16
 cf0:	88 0f       	add	r24, r24
 cf2:	88 0f       	add	r24, r24
 cf4:	08 0f       	add	r16, r24
 cf6:	81 2f       	mov	r24, r17
 cf8:	80 1b       	sub	r24, r16
 cfa:	80 5d       	subi	r24, 0xD0	; 208
 cfc:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 d00:	24 c0       	rjmp	.+72     	; 0xd4a <__stack+0x4eb>
				}
				else if (res>=10&&res<100)
 d02:	96 ef       	ldi	r25, 0xF6	; 246
 d04:	96 0f       	add	r25, r22
 d06:	9a 35       	cpi	r25, 0x5A	; 90
 d08:	b0 f4       	brcc	.+44     	; 0xd36 <__stack+0x4d7>
				{
					LCD_Char((res/10)+48);
 d0a:	0d ec       	ldi	r16, 0xCD	; 205
 d0c:	60 9f       	mul	r22, r16
 d0e:	01 2d       	mov	r16, r1
 d10:	11 24       	eor	r1, r1
 d12:	06 95       	lsr	r16
 d14:	06 95       	lsr	r16
 d16:	06 95       	lsr	r16
 d18:	80 e3       	ldi	r24, 0x30	; 48
 d1a:	80 0f       	add	r24, r16
 d1c:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
					LCD_Char((res%10)+48);
 d20:	00 0f       	add	r16, r16
 d22:	80 2f       	mov	r24, r16
 d24:	88 0f       	add	r24, r24
 d26:	88 0f       	add	r24, r24
 d28:	08 0f       	add	r16, r24
 d2a:	81 2f       	mov	r24, r17
 d2c:	80 1b       	sub	r24, r16
 d2e:	80 5d       	subi	r24, 0xD0	; 208
 d30:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 d34:	0a c0       	rjmp	.+20     	; 0xd4a <__stack+0x4eb>
				}
				else if(res<10)
 d36:	6a 30       	cpi	r22, 0x0A	; 10
 d38:	40 f4       	brcc	.+16     	; 0xd4a <__stack+0x4eb>
				{
					LCD_Char(res+48);
 d3a:	80 e3       	ldi	r24, 0x30	; 48
 d3c:	86 0f       	add	r24, r22
 d3e:	0e 94 23 03 	call	0x646	; 0x646 <LCD_Char>
 d42:	03 c0       	rjmp	.+6      	; 0xd4a <__stack+0x4eb>
				
			}
		}
		else
		{
			LCD_Clear();
 d44:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <LCD_Clear>
			goto label ;
 d48:	d7 cc       	rjmp	.-1618   	; 0x6f8 <main+0x1a>
 d4a:	2f ef       	ldi	r18, 0xFF	; 255
 d4c:	39 ef       	ldi	r19, 0xF9	; 249
 d4e:	80 e0       	ldi	r24, 0x00	; 0
 d50:	21 50       	subi	r18, 0x01	; 1
 d52:	30 40       	sbci	r19, 0x00	; 0
 d54:	80 40       	sbci	r24, 0x00	; 0
 d56:	e1 f7       	brne	.-8      	; 0xd50 <__stack+0x4f1>
 d58:	00 c0       	rjmp	.+0      	; 0xd5a <__stack+0x4fb>
 d5a:	00 00       	nop
 d5c:	d9 cc       	rjmp	.-1614   	; 0x710 <main+0x32>

00000d5e <__divmodhi4>:
 d5e:	97 fb       	bst	r25, 7
 d60:	07 2e       	mov	r0, r23
 d62:	16 f4       	brtc	.+4      	; 0xd68 <__divmodhi4+0xa>
 d64:	00 94       	com	r0
 d66:	07 d0       	rcall	.+14     	; 0xd76 <__divmodhi4_neg1>
 d68:	77 fd       	sbrc	r23, 7
 d6a:	09 d0       	rcall	.+18     	; 0xd7e <__divmodhi4_neg2>
 d6c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__udivmodhi4>
 d70:	07 fc       	sbrc	r0, 7
 d72:	05 d0       	rcall	.+10     	; 0xd7e <__divmodhi4_neg2>
 d74:	3e f4       	brtc	.+14     	; 0xd84 <__divmodhi4_exit>

00000d76 <__divmodhi4_neg1>:
 d76:	90 95       	com	r25
 d78:	81 95       	neg	r24
 d7a:	9f 4f       	sbci	r25, 0xFF	; 255
 d7c:	08 95       	ret

00000d7e <__divmodhi4_neg2>:
 d7e:	70 95       	com	r23
 d80:	61 95       	neg	r22
 d82:	7f 4f       	sbci	r23, 0xFF	; 255

00000d84 <__divmodhi4_exit>:
 d84:	08 95       	ret

00000d86 <__udivmodhi4>:
 d86:	aa 1b       	sub	r26, r26
 d88:	bb 1b       	sub	r27, r27
 d8a:	51 e1       	ldi	r21, 0x11	; 17
 d8c:	07 c0       	rjmp	.+14     	; 0xd9c <__udivmodhi4_ep>

00000d8e <__udivmodhi4_loop>:
 d8e:	aa 1f       	adc	r26, r26
 d90:	bb 1f       	adc	r27, r27
 d92:	a6 17       	cp	r26, r22
 d94:	b7 07       	cpc	r27, r23
 d96:	10 f0       	brcs	.+4      	; 0xd9c <__udivmodhi4_ep>
 d98:	a6 1b       	sub	r26, r22
 d9a:	b7 0b       	sbc	r27, r23

00000d9c <__udivmodhi4_ep>:
 d9c:	88 1f       	adc	r24, r24
 d9e:	99 1f       	adc	r25, r25
 da0:	5a 95       	dec	r21
 da2:	a9 f7       	brne	.-22     	; 0xd8e <__udivmodhi4_loop>
 da4:	80 95       	com	r24
 da6:	90 95       	com	r25
 da8:	bc 01       	movw	r22, r24
 daa:	cd 01       	movw	r24, r26
 dac:	08 95       	ret

00000dae <_exit>:
 dae:	f8 94       	cli

00000db0 <__stop_program>:
 db0:	ff cf       	rjmp	.-2      	; 0xdb0 <__stop_program>
