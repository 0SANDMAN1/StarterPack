
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000490  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000490  00000504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000516  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000548  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fc1  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000078e  00000000  00000000  000015f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000690  00000000  00000000  00001d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00002414  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045c  00000000  00000000  00002550  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000935  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000032e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e9       	ldi	r30, 0x90	; 144
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 46 02 	jmp	0x48c	; 0x48c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:


int main(void)
{
    /* Replace with your application code */
	LCD_Init();
  82:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_Init>
	LCD_Setpos(1, 5);
  86:	65 e0       	ldi	r22, 0x05	; 5
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Setpos>
	LCD_String("Eslam");
  8e:	80 e6       	ldi	r24, 0x60	; 96
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	0e 94 22 02 	call	0x444	; 0x444 <LCD_String>
	LCD_Setpos(0, 1);
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	0e 94 35 02 	call	0x46a	; 0x46a <LCD_Setpos>
	LCD_String("FantaBlack");
  9e:	86 e6       	ldi	r24, 0x66	; 102
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	0e 94 22 02 	call	0x444	; 0x444 <LCD_String>
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <main+0x24>

000000a8 <DIO_voidSetPinDirection>:
    case PortB: Loc_uint8Result = Get( PinB_Reg,  Pin); break;
    case PortC: Loc_uint8Result = Get( PinC_Reg,  Pin); break;
    case PortD: Loc_uint8Result = Get( PinD_Reg,  Pin); break;
    }
    return Loc_uint8Result;
}
  a8:	81 30       	cpi	r24, 0x01	; 1
  aa:	01 f1       	breq	.+64     	; 0xec <DIO_voidSetPinDirection+0x44>
  ac:	30 f0       	brcs	.+12     	; 0xba <DIO_voidSetPinDirection+0x12>
  ae:	82 30       	cpi	r24, 0x02	; 2
  b0:	b1 f1       	breq	.+108    	; 0x11e <DIO_voidSetPinDirection+0x76>
  b2:	83 30       	cpi	r24, 0x03	; 3
  b4:	09 f4       	brne	.+2      	; 0xb8 <DIO_voidSetPinDirection+0x10>
  b6:	4c c0       	rjmp	.+152    	; 0x150 <DIO_voidSetPinDirection+0xa8>
  b8:	08 95       	ret
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	59 f4       	brne	.+22     	; 0xd4 <DIO_voidSetPinDirection+0x2c>
  be:	2a b3       	in	r18, 0x1a	; 26
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_voidSetPinDirection+0x22>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	6a 95       	dec	r22
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_voidSetPinDirection+0x1e>
  ce:	82 2b       	or	r24, r18
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	08 95       	ret
  d4:	2a b3       	in	r18, 0x1a	; 26
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <DIO_voidSetPinDirection+0x38>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <DIO_voidSetPinDirection+0x34>
  e4:	80 95       	com	r24
  e6:	82 23       	and	r24, r18
  e8:	8a bb       	out	0x1a, r24	; 26
  ea:	08 95       	ret
  ec:	41 30       	cpi	r20, 0x01	; 1
  ee:	59 f4       	brne	.+22     	; 0x106 <DIO_voidSetPinDirection+0x5e>
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_voidSetPinDirection+0x54>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_voidSetPinDirection+0x50>
 100:	82 2b       	or	r24, r18
 102:	87 bb       	out	0x17, r24	; 23
 104:	08 95       	ret
 106:	27 b3       	in	r18, 0x17	; 23
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_voidSetPinDirection+0x6a>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_voidSetPinDirection+0x66>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	87 bb       	out	0x17, r24	; 23
 11c:	08 95       	ret
 11e:	41 30       	cpi	r20, 0x01	; 1
 120:	59 f4       	brne	.+22     	; 0x138 <DIO_voidSetPinDirection+0x90>
 122:	24 b3       	in	r18, 0x14	; 20
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_voidSetPinDirection+0x86>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_voidSetPinDirection+0x82>
 132:	82 2b       	or	r24, r18
 134:	84 bb       	out	0x14, r24	; 20
 136:	08 95       	ret
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_voidSetPinDirection+0x9c>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_voidSetPinDirection+0x98>
 148:	80 95       	com	r24
 14a:	82 23       	and	r24, r18
 14c:	84 bb       	out	0x14, r24	; 20
 14e:	08 95       	ret
 150:	41 30       	cpi	r20, 0x01	; 1
 152:	59 f4       	brne	.+22     	; 0x16a <DIO_voidSetPinDirection+0xc2>
 154:	21 b3       	in	r18, 0x11	; 17
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	02 c0       	rjmp	.+4      	; 0x160 <DIO_voidSetPinDirection+0xb8>
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	6a 95       	dec	r22
 162:	e2 f7       	brpl	.-8      	; 0x15c <DIO_voidSetPinDirection+0xb4>
 164:	82 2b       	or	r24, r18
 166:	81 bb       	out	0x11, r24	; 17
 168:	08 95       	ret
 16a:	21 b3       	in	r18, 0x11	; 17
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 c0       	rjmp	.+4      	; 0x176 <DIO_voidSetPinDirection+0xce>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	6a 95       	dec	r22
 178:	e2 f7       	brpl	.-8      	; 0x172 <DIO_voidSetPinDirection+0xca>
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	81 bb       	out	0x11, r24	; 17
 180:	08 95       	ret

00000182 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(uint8 Port, uint8 Pin, uint8 Value)
{
    switch (Port)
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	01 f1       	breq	.+64     	; 0x1c6 <DIO_voidSetPinValue+0x44>
 186:	30 f0       	brcs	.+12     	; 0x194 <DIO_voidSetPinValue+0x12>
 188:	82 30       	cpi	r24, 0x02	; 2
 18a:	b1 f1       	breq	.+108    	; 0x1f8 <DIO_voidSetPinValue+0x76>
 18c:	83 30       	cpi	r24, 0x03	; 3
 18e:	09 f4       	brne	.+2      	; 0x192 <DIO_voidSetPinValue+0x10>
 190:	4c c0       	rjmp	.+152    	; 0x22a <DIO_voidSetPinValue+0xa8>
 192:	08 95       	ret
    {
    case PortA: if(Value == High) Set( PortA_Reg,  Pin); else Clr( PortA_Reg, Pin); break;
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	59 f4       	brne	.+22     	; 0x1ae <DIO_voidSetPinValue+0x2c>
 198:	2b b3       	in	r18, 0x1b	; 27
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPinValue+0x22>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPinValue+0x1e>
 1a8:	82 2b       	or	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
 1ae:	2b b3       	in	r18, 0x1b	; 27
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_voidSetPinValue+0x38>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_voidSetPinValue+0x34>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	8b bb       	out	0x1b, r24	; 27
 1c4:	08 95       	ret
    case PortB: if(Value == High) Set( PortB_Reg,  Pin); else Clr( PortB_Reg, Pin); break;
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_voidSetPinValue+0x5e>
 1ca:	28 b3       	in	r18, 0x18	; 24
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_voidSetPinValue+0x54>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_voidSetPinValue+0x50>
 1da:	82 2b       	or	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
 1e0:	28 b3       	in	r18, 0x18	; 24
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_voidSetPinValue+0x6a>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_voidSetPinValue+0x66>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	88 bb       	out	0x18, r24	; 24
 1f6:	08 95       	ret
    case PortC: if(Value == High) Set( PortC_Reg,  Pin); else Clr( PortC_Reg, Pin); break;
 1f8:	41 30       	cpi	r20, 0x01	; 1
 1fa:	59 f4       	brne	.+22     	; 0x212 <DIO_voidSetPinValue+0x90>
 1fc:	25 b3       	in	r18, 0x15	; 21
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_voidSetPinValue+0x86>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_voidSetPinValue+0x82>
 20c:	82 2b       	or	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
 212:	25 b3       	in	r18, 0x15	; 21
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	02 c0       	rjmp	.+4      	; 0x21e <DIO_voidSetPinValue+0x9c>
 21a:	88 0f       	add	r24, r24
 21c:	99 1f       	adc	r25, r25
 21e:	6a 95       	dec	r22
 220:	e2 f7       	brpl	.-8      	; 0x21a <DIO_voidSetPinValue+0x98>
 222:	80 95       	com	r24
 224:	82 23       	and	r24, r18
 226:	85 bb       	out	0x15, r24	; 21
 228:	08 95       	ret
    case PortD: if(Value == High) Set( PortD_Reg,  Pin); else Clr( PortD_Reg, Pin); break;
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	59 f4       	brne	.+22     	; 0x244 <DIO_voidSetPinValue+0xc2>
 22e:	22 b3       	in	r18, 0x12	; 18
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_voidSetPinValue+0xb8>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_voidSetPinValue+0xb4>
 23e:	82 2b       	or	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret
 244:	22 b3       	in	r18, 0x12	; 18
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <DIO_voidSetPinValue+0xce>
 24c:	88 0f       	add	r24, r24
 24e:	99 1f       	adc	r25, r25
 250:	6a 95       	dec	r22
 252:	e2 f7       	brpl	.-8      	; 0x24c <DIO_voidSetPinValue+0xca>
 254:	80 95       	com	r24
 256:	82 23       	and	r24, r18
 258:	82 bb       	out	0x12, r24	; 18
 25a:	08 95       	ret

0000025c <DIO_ReadPort>:
}

uint8 DIO_ReadPort(uint8 Port)
{
	uint8 portValue = 0;
	switch(Port)
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	41 f0       	breq	.+16     	; 0x270 <DIO_ReadPort+0x14>
 260:	28 f0       	brcs	.+10     	; 0x26c <DIO_ReadPort+0x10>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	39 f0       	breq	.+14     	; 0x274 <DIO_ReadPort+0x18>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	39 f0       	breq	.+14     	; 0x278 <DIO_ReadPort+0x1c>
 26a:	08 c0       	rjmp	.+16     	; 0x27c <DIO_ReadPort+0x20>
	{
		case PortA:
		portValue = PortA_Reg;
 26c:	8b b3       	in	r24, 0x1b	; 27
		break;
 26e:	08 95       	ret
		
		case PortB:
		portValue = PortB_Reg;
 270:	88 b3       	in	r24, 0x18	; 24
		break;
 272:	08 95       	ret
		
		case PortC:
		portValue = PortC_Reg;
 274:	85 b3       	in	r24, 0x15	; 21
		break;
 276:	08 95       	ret
		
		case PortD:
		portValue = PortD_Reg;
 278:	82 b3       	in	r24, 0x12	; 18
		break;
 27a:	08 95       	ret
    }
}

uint8 DIO_ReadPort(uint8 Port)
{
	uint8 portValue = 0;
 27c:	80 e0       	ldi	r24, 0x00	; 0
		portValue = PortD_Reg;
		break;
	}
	
	return portValue;
}
 27e:	08 95       	ret

00000280 <DIO_WritePort>:

void DIO_WritePort(uint8 Port, uint8 portValue)
{
	switch(Port)
 280:	81 30       	cpi	r24, 0x01	; 1
 282:	41 f0       	breq	.+16     	; 0x294 <DIO_WritePort+0x14>
 284:	28 f0       	brcs	.+10     	; 0x290 <DIO_WritePort+0x10>
 286:	82 30       	cpi	r24, 0x02	; 2
 288:	39 f0       	breq	.+14     	; 0x298 <DIO_WritePort+0x18>
 28a:	83 30       	cpi	r24, 0x03	; 3
 28c:	39 f0       	breq	.+14     	; 0x29c <DIO_WritePort+0x1c>
 28e:	08 95       	ret
	{
		case PortA:
		PortA_Reg = portValue ;
 290:	6b bb       	out	0x1b, r22	; 27
		break;
 292:	08 95       	ret
		case PortB:
		PortB_Reg = portValue;
 294:	68 bb       	out	0x18, r22	; 24
		break;
 296:	08 95       	ret
		case PortC:
		PortC_Reg  = portValue;
 298:	65 bb       	out	0x15, r22	; 21
		break;
 29a:	08 95       	ret
		case PortD:
		PortD_Reg = portValue;
 29c:	62 bb       	out	0x12, r22	; 18
 29e:	08 95       	ret

000002a0 <LCD_CMD>:
	}
}

void LCD_Clear()
{
	LCD_CMD(0x01);
 2a0:	cf 93       	push	r28
 2a2:	c8 2f       	mov	r28, r24
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_voidSetPinDirection>
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_ReadPort>
 2b4:	8f 70       	andi	r24, 0x0F	; 15
 2b6:	9c 2f       	mov	r25, r28
 2b8:	90 7f       	andi	r25, 0xF0	; 240
 2ba:	68 2f       	mov	r22, r24
 2bc:	69 2b       	or	r22, r25
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WritePort>
 2c4:	40 e0       	ldi	r20, 0x00	; 0
 2c6:	63 e0       	ldi	r22, 0x03	; 3
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 2ce:	8f e8       	ldi	r24, 0x8F	; 143
 2d0:	91 e0       	ldi	r25, 0x01	; 1
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_CMD+0x32>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_CMD+0x38>
 2d8:	00 00       	nop
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 2e4:	8f e1       	ldi	r24, 0x1F	; 31
 2e6:	9e e4       	ldi	r25, 0x4E	; 78
 2e8:	01 97       	sbiw	r24, 0x01	; 1
 2ea:	f1 f7       	brne	.-4      	; 0x2e8 <LCD_CMD+0x48>
 2ec:	00 c0       	rjmp	.+0      	; 0x2ee <LCD_CMD+0x4e>
 2ee:	00 00       	nop
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_ReadPort>
 2f6:	90 e1       	ldi	r25, 0x10	; 16
 2f8:	c9 9f       	mul	r28, r25
 2fa:	90 01       	movw	r18, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	8f 70       	andi	r24, 0x0F	; 15
 300:	68 2f       	mov	r22, r24
 302:	62 2b       	or	r22, r18
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WritePort>
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 314:	8f e8       	ldi	r24, 0x8F	; 143
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	01 97       	sbiw	r24, 0x01	; 1
 31a:	f1 f7       	brne	.-4      	; 0x318 <LCD_CMD+0x78>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <LCD_CMD+0x7e>
 31e:	00 00       	nop
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	63 e0       	ldi	r22, 0x03	; 3
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 32a:	8f e3       	ldi	r24, 0x3F	; 63
 32c:	9f e1       	ldi	r25, 0x1F	; 31
 32e:	01 97       	sbiw	r24, 0x01	; 1
 330:	f1 f7       	brne	.-4      	; 0x32e <LCD_CMD+0x8e>
 332:	00 c0       	rjmp	.+0      	; 0x334 <LCD_CMD+0x94>
 334:	00 00       	nop
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <LCD_Init>:
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_voidSetPinDirection>
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	63 e0       	ldi	r22, 0x03	; 3
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_voidSetPinDirection>
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_voidSetPinDirection>
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	63 e0       	ldi	r22, 0x03	; 3
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 36c:	2f ef       	ldi	r18, 0xFF	; 255
 36e:	89 ef       	ldi	r24, 0xF9	; 249
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	21 50       	subi	r18, 0x01	; 1
 374:	80 40       	sbci	r24, 0x00	; 0
 376:	90 40       	sbci	r25, 0x00	; 0
 378:	e1 f7       	brne	.-8      	; 0x372 <LCD_Init+0x38>
 37a:	00 c0       	rjmp	.+0      	; 0x37c <LCD_Init+0x42>
 37c:	00 00       	nop
 37e:	83 e3       	ldi	r24, 0x33	; 51
 380:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_CMD>
 384:	82 e3       	ldi	r24, 0x32	; 50
 386:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_CMD>
 38a:	88 e2       	ldi	r24, 0x28	; 40
 38c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_CMD>
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_CMD>
 396:	8f e0       	ldi	r24, 0x0F	; 15
 398:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_CMD>
 39c:	8f e3       	ldi	r24, 0x3F	; 63
 39e:	9f e1       	ldi	r25, 0x1F	; 31
 3a0:	01 97       	sbiw	r24, 0x01	; 1
 3a2:	f1 f7       	brne	.-4      	; 0x3a0 <LCD_Init+0x66>
 3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <LCD_Init+0x6c>
 3a6:	00 00       	nop
 3a8:	08 95       	ret

000003aa <LCD_Char>:
 3aa:	cf 93       	push	r28
 3ac:	c8 2f       	mov	r28, r24
 3ae:	41 e0       	ldi	r20, 0x01	; 1
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	0e 94 54 00 	call	0xa8	; 0xa8 <DIO_voidSetPinDirection>
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_ReadPort>
 3be:	8f 70       	andi	r24, 0x0F	; 15
 3c0:	9c 2f       	mov	r25, r28
 3c2:	90 7f       	andi	r25, 0xF0	; 240
 3c4:	68 2f       	mov	r22, r24
 3c6:	69 2b       	or	r22, r25
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WritePort>
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	63 e0       	ldi	r22, 0x03	; 3
 3d2:	81 e0       	ldi	r24, 0x01	; 1
 3d4:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 3d8:	8f e8       	ldi	r24, 0x8F	; 143
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	01 97       	sbiw	r24, 0x01	; 1
 3de:	f1 f7       	brne	.-4      	; 0x3dc <LCD_Char+0x32>
 3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LCD_Char+0x38>
 3e2:	00 00       	nop
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	63 e0       	ldi	r22, 0x03	; 3
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 3ee:	8f e1       	ldi	r24, 0x1F	; 31
 3f0:	9e e4       	ldi	r25, 0x4E	; 78
 3f2:	01 97       	sbiw	r24, 0x01	; 1
 3f4:	f1 f7       	brne	.-4      	; 0x3f2 <LCD_Char+0x48>
 3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LCD_Char+0x4e>
 3f8:	00 00       	nop
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 2e 01 	call	0x25c	; 0x25c <DIO_ReadPort>
 400:	90 e1       	ldi	r25, 0x10	; 16
 402:	c9 9f       	mul	r28, r25
 404:	90 01       	movw	r18, r0
 406:	11 24       	eor	r1, r1
 408:	8f 70       	andi	r24, 0x0F	; 15
 40a:	68 2f       	mov	r22, r24
 40c:	62 2b       	or	r22, r18
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	0e 94 40 01 	call	0x280	; 0x280 <DIO_WritePort>
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	63 e0       	ldi	r22, 0x03	; 3
 418:	81 e0       	ldi	r24, 0x01	; 1
 41a:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 41e:	8f e8       	ldi	r24, 0x8F	; 143
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	f1 f7       	brne	.-4      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 428:	00 00       	nop
 42a:	41 e0       	ldi	r20, 0x01	; 1
 42c:	63 e0       	ldi	r22, 0x03	; 3
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 c1 00 	call	0x182	; 0x182 <DIO_voidSetPinValue>
 434:	8f e3       	ldi	r24, 0x3F	; 63
 436:	9f e1       	ldi	r25, 0x1F	; 31
 438:	01 97       	sbiw	r24, 0x01	; 1
 43a:	f1 f7       	brne	.-4      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43e:	00 00       	nop
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <LCD_String>:
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	8c 01       	movw	r16, r24
 44c:	c0 e0       	ldi	r28, 0x00	; 0
 44e:	03 c0       	rjmp	.+6      	; 0x456 <LCD_String+0x12>
 450:	0e 94 d5 01 	call	0x3aa	; 0x3aa <LCD_Char>
 454:	cf 5f       	subi	r28, 0xFF	; 255
 456:	f8 01       	movw	r30, r16
 458:	ec 0f       	add	r30, r28
 45a:	f1 1d       	adc	r31, r1
 45c:	80 81       	ld	r24, Z
 45e:	81 11       	cpse	r24, r1
 460:	f7 cf       	rjmp	.-18     	; 0x450 <LCD_String+0xc>
 462:	cf 91       	pop	r28
 464:	1f 91       	pop	r17
 466:	0f 91       	pop	r16
 468:	08 95       	ret

0000046a <LCD_Setpos>:
}

void LCD_Setpos(uint8 line, uint8 pos)
{
	switch(line)
 46a:	81 30       	cpi	r24, 0x01	; 1
 46c:	19 f0       	breq	.+6      	; 0x474 <LCD_Setpos+0xa>
 46e:	82 30       	cpi	r24, 0x02	; 2
 470:	39 f0       	breq	.+14     	; 0x480 <LCD_Setpos+0x16>
 472:	08 95       	ret
	{
		case 1:
		LCD_CMD(0x80 | (pos & 0x0F));
 474:	86 2f       	mov	r24, r22
 476:	8f 70       	andi	r24, 0x0F	; 15
 478:	80 68       	ori	r24, 0x80	; 128
 47a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_CMD>
		break;
 47e:	08 95       	ret
		case 2:
		LCD_CMD(0xC0 | (pos & 0x0F));
 480:	86 2f       	mov	r24, r22
 482:	8f 70       	andi	r24, 0x0F	; 15
 484:	80 6c       	ori	r24, 0xC0	; 192
 486:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCD_CMD>
 48a:	08 95       	ret

0000048c <_exit>:
 48c:	f8 94       	cli

0000048e <__stop_program>:
 48e:	ff cf       	rjmp	.-2      	; 0x48e <__stop_program>
