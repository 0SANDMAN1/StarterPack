
ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c19  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000765  00000000  00000000  00000f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000061c  00000000  00000000  000016b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000dc  00000000  00000000  00001cd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000067e  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007fb  00000000  00000000  0000242a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  7a:	0c 94 eb 00 	jmp	0x1d6	; 0x1d6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <InitPWM>:
#include "DIO.h"
#include "Dimmer.h"

void InitPWM()
{
	TCCR0 |= 1 << WGM00 | 1 << WGM01 | 1 << CS00 | 1 << COM01;
  82:	83 b7       	in	r24, 0x33	; 51
  84:	89 66       	ori	r24, 0x69	; 105
  86:	83 bf       	out	0x33, r24	; 51
	DIO_ConfigChannel(DIO_ChannelB3, Output);
  88:	61 e0       	ldi	r22, 0x01	; 1
  8a:	8b e0       	ldi	r24, 0x0B	; 11
  8c:	0e 94 4b 00 	call	0x96	; 0x96 <DIO_ConfigChannel>
  90:	08 95       	ret

00000092 <SetPWMOutPut>:
}

void SetPWMOutPut (u8 duty)
{
	OCR0 = duty;
  92:	8c bf       	out	0x3c, r24	; 60
  94:	08 95       	ret

00000096 <DIO_ConfigChannel>:
		break;
	}
	return BitValue;
}
void DIO_ConfigChannel(DIO_ChannelTypes ChannelId,DIO_DirTypes direction){
	DIO_PortTypes Portx = ChannelId/8;
  96:	98 2f       	mov	r25, r24
  98:	96 95       	lsr	r25
  9a:	96 95       	lsr	r25
  9c:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = ChannelId%8;
  9e:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
  a0:	91 30       	cpi	r25, 0x01	; 1
  a2:	21 f1       	breq	.+72     	; 0xec <DIO_ConfigChannel+0x56>
  a4:	30 f0       	brcs	.+12     	; 0xb2 <DIO_ConfigChannel+0x1c>
  a6:	92 30       	cpi	r25, 0x02	; 2
  a8:	f1 f1       	breq	.+124    	; 0x126 <DIO_ConfigChannel+0x90>
  aa:	93 30       	cpi	r25, 0x03	; 3
  ac:	09 f4       	brne	.+2      	; 0xb0 <DIO_ConfigChannel+0x1a>
  ae:	58 c0       	rjmp	.+176    	; 0x160 <DIO_ConfigChannel+0xca>
  b0:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
  b2:	61 30       	cpi	r22, 0x01	; 1
  b4:	69 f4       	brne	.+26     	; 0xd0 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
  b6:	4a b3       	in	r20, 0x1a	; 26
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_ConfigChannel+0x2e>
  c0:	66 0f       	add	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_ConfigChannel+0x2a>
  c8:	cb 01       	movw	r24, r22
  ca:	84 2b       	or	r24, r20
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
  d0:	4a b3       	in	r20, 0x1a	; 26
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	b9 01       	movw	r22, r18
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_ConfigChannel+0x48>
  da:	66 0f       	add	r22, r22
  dc:	77 1f       	adc	r23, r23
  de:	8a 95       	dec	r24
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_ConfigChannel+0x44>
  e2:	cb 01       	movw	r24, r22
  e4:	80 95       	com	r24
  e6:	84 23       	and	r24, r20
  e8:	8a bb       	out	0x1a, r24	; 26
  ea:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (direction == Output)
  ec:	61 30       	cpi	r22, 0x01	; 1
  ee:	69 f4       	brne	.+26     	; 0x10a <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
  f0:	47 b3       	in	r20, 0x17	; 23
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	b9 01       	movw	r22, r18
  f8:	02 c0       	rjmp	.+4      	; 0xfe <DIO_ConfigChannel+0x68>
  fa:	66 0f       	add	r22, r22
  fc:	77 1f       	adc	r23, r23
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <DIO_ConfigChannel+0x64>
 102:	cb 01       	movw	r24, r22
 104:	84 2b       	or	r24, r20
 106:	87 bb       	out	0x17, r24	; 23
 108:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 10a:	47 b3       	in	r20, 0x17	; 23
 10c:	21 e0       	ldi	r18, 0x01	; 1
 10e:	30 e0       	ldi	r19, 0x00	; 0
 110:	b9 01       	movw	r22, r18
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_ConfigChannel+0x82>
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	8a 95       	dec	r24
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_ConfigChannel+0x7e>
 11c:	cb 01       	movw	r24, r22
 11e:	80 95       	com	r24
 120:	84 23       	and	r24, r20
 122:	87 bb       	out	0x17, r24	; 23
 124:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (direction == Output)
 126:	61 30       	cpi	r22, 0x01	; 1
 128:	69 f4       	brne	.+26     	; 0x144 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 12a:	44 b3       	in	r20, 0x14	; 20
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	b9 01       	movw	r22, r18
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_ConfigChannel+0xa2>
 134:	66 0f       	add	r22, r22
 136:	77 1f       	adc	r23, r23
 138:	8a 95       	dec	r24
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_ConfigChannel+0x9e>
 13c:	cb 01       	movw	r24, r22
 13e:	84 2b       	or	r24, r20
 140:	84 bb       	out	0x14, r24	; 20
 142:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 144:	44 b3       	in	r20, 0x14	; 20
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	b9 01       	movw	r22, r18
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_ConfigChannel+0xbc>
 14e:	66 0f       	add	r22, r22
 150:	77 1f       	adc	r23, r23
 152:	8a 95       	dec	r24
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_ConfigChannel+0xb8>
 156:	cb 01       	movw	r24, r22
 158:	80 95       	com	r24
 15a:	84 23       	and	r24, r20
 15c:	84 bb       	out	0x14, r24	; 20
 15e:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (direction == Output)
 160:	61 30       	cpi	r22, 0x01	; 1
 162:	69 f4       	brne	.+26     	; 0x17e <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 164:	41 b3       	in	r20, 0x11	; 17
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_ConfigChannel+0xdc>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	8a 95       	dec	r24
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_ConfigChannel+0xd8>
 176:	cb 01       	movw	r24, r22
 178:	84 2b       	or	r24, r20
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 17e:	41 b3       	in	r20, 0x11	; 17
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	b9 01       	movw	r22, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_ConfigChannel+0xf6>
 188:	66 0f       	add	r22, r22
 18a:	77 1f       	adc	r23, r23
 18c:	8a 95       	dec	r24
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_ConfigChannel+0xf2>
 190:	cb 01       	movw	r24, r22
 192:	80 95       	com	r24
 194:	84 23       	and	r24, r20
 196:	81 bb       	out	0x11, r24	; 17
 198:	08 95       	ret

0000019a <main>:


int main(void)
{
	u8 BR = 0;
	InitPWM();
 19a:	0e 94 41 00 	call	0x82	; 0x82 <InitPWM>
    while (1) 
    {
		for (BR = 0; BR < 255; BR++)
 19e:	c0 e0       	ldi	r28, 0x00	; 0
 1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <main+0x1c>
		{
			SetPWMOutPut(BR);
 1a2:	8c 2f       	mov	r24, r28
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <SetPWMOutPut>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a8:	8f e1       	ldi	r24, 0x1F	; 31
 1aa:	9e e4       	ldi	r25, 0x4E	; 78
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <main+0x12>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x18>
 1b2:	00 00       	nop
{
	u8 BR = 0;
	InitPWM();
    while (1) 
    {
		for (BR = 0; BR < 255; BR++)
 1b4:	cf 5f       	subi	r28, 0xFF	; 255
 1b6:	cf 3f       	cpi	r28, 0xFF	; 255
 1b8:	a1 f7       	brne	.-24     	; 0x1a2 <main+0x8>
 1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <main+0x36>
			SetPWMOutPut(BR);
			_delay_ms(5);
		}
		for (BR = 255; BR > 0; BR--)
		{
			SetPWMOutPut(BR);
 1bc:	8c 2f       	mov	r24, r28
 1be:	0e 94 49 00 	call	0x92	; 0x92 <SetPWMOutPut>
 1c2:	8f e1       	ldi	r24, 0x1F	; 31
 1c4:	9e e4       	ldi	r25, 0x4E	; 78
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <main+0x2c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <main+0x32>
 1cc:	00 00       	nop
		for (BR = 0; BR < 255; BR++)
		{
			SetPWMOutPut(BR);
			_delay_ms(5);
		}
		for (BR = 255; BR > 0; BR--)
 1ce:	c1 50       	subi	r28, 0x01	; 1
 1d0:	c1 11       	cpse	r28, r1
 1d2:	f4 cf       	rjmp	.-24     	; 0x1bc <main+0x22>
 1d4:	e4 cf       	rjmp	.-56     	; 0x19e <main+0x4>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
