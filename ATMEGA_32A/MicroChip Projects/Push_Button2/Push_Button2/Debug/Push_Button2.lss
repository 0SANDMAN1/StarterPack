
Push_Button2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d9  00000000  00000000  0000047c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000685  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fc  00000000  00000000  000013da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000324  00000000  00000000  00001c0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f31  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 62 01 	call	0x2c4	; 0x2c4 <main>
  64:	0c 94 b4 01 	jmp	0x368	; 0x368 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPinDirection>:
#include "bit_math.h"
#include "DIO.h"
 
void DIO_voidSetPinDirection(uint8 Port, uint8 Pin, uint8 Direction)
{
    switch (Port)
  6c:	81 30       	cpi	r24, 0x01	; 1
  6e:	21 f1       	breq	.+72     	; 0xb8 <DIO_voidSetPinDirection+0x4c>
  70:	30 f0       	brcs	.+12     	; 0x7e <DIO_voidSetPinDirection+0x12>
  72:	82 30       	cpi	r24, 0x02	; 2
  74:	f1 f1       	breq	.+124    	; 0xf2 <DIO_voidSetPinDirection+0x86>
  76:	83 30       	cpi	r24, 0x03	; 3
  78:	09 f4       	brne	.+2      	; 0x7c <DIO_voidSetPinDirection+0x10>
  7a:	58 c0       	rjmp	.+176    	; 0x12c <DIO_voidSetPinDirection+0xc0>
  7c:	08 95       	ret
    {
        case PortA: if (Direction == Output) Set(DDRA_Reg, Pin); else Clr(DDRA_Reg, Pin); break;
  7e:	41 30       	cpi	r20, 0x01	; 1
  80:	69 f4       	brne	.+26     	; 0x9c <DIO_voidSetPinDirection+0x30>
  82:	ea e1       	ldi	r30, 0x1A	; 26
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	20 81       	ld	r18, Z
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	02 c0       	rjmp	.+4      	; 0x92 <DIO_voidSetPinDirection+0x26>
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	6a 95       	dec	r22
  94:	e2 f7       	brpl	.-8      	; 0x8e <DIO_voidSetPinDirection+0x22>
  96:	82 2b       	or	r24, r18
  98:	80 83       	st	Z, r24
  9a:	08 95       	ret
  9c:	ea e1       	ldi	r30, 0x1A	; 26
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	20 81       	ld	r18, Z
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_voidSetPinDirection+0x40>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_voidSetPinDirection+0x3c>
  b0:	80 95       	com	r24
  b2:	82 23       	and	r24, r18
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret
        case PortB: if (Direction == Output) Set(DDRB_Reg, Pin); else Clr(DDRB_Reg, Pin); break;
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	69 f4       	brne	.+26     	; 0xd6 <DIO_voidSetPinDirection+0x6a>
  bc:	e7 e1       	ldi	r30, 0x17	; 23
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	20 81       	ld	r18, Z
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_voidSetPinDirection+0x60>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_voidSetPinDirection+0x5c>
  d0:	82 2b       	or	r24, r18
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret
  d6:	e7 e1       	ldi	r30, 0x17	; 23
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	20 81       	ld	r18, Z
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_voidSetPinDirection+0x7a>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_voidSetPinDirection+0x76>
  ea:	80 95       	com	r24
  ec:	82 23       	and	r24, r18
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret
        case PortC: if (Direction == Output) Set(DDRC_Reg, Pin); else Clr(DDRC_Reg, Pin); break;
  f2:	41 30       	cpi	r20, 0x01	; 1
  f4:	69 f4       	brne	.+26     	; 0x110 <DIO_voidSetPinDirection+0xa4>
  f6:	e4 e1       	ldi	r30, 0x14	; 20
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	20 81       	ld	r18, Z
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_voidSetPinDirection+0x9a>
 102:	88 0f       	add	r24, r24
 104:	99 1f       	adc	r25, r25
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_voidSetPinDirection+0x96>
 10a:	82 2b       	or	r24, r18
 10c:	80 83       	st	Z, r24
 10e:	08 95       	ret
 110:	e4 e1       	ldi	r30, 0x14	; 20
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	20 81       	ld	r18, Z
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_voidSetPinDirection+0xb4>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_voidSetPinDirection+0xb0>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret
        case PortD: if (Direction == Output) Set(DDRD_Reg, Pin); else Clr(DDRD_Reg, Pin); break;
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	69 f4       	brne	.+26     	; 0x14a <DIO_voidSetPinDirection+0xde>
 130:	e1 e1       	ldi	r30, 0x11	; 17
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	20 81       	ld	r18, Z
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDirection+0xd4>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDirection+0xd0>
 144:	82 2b       	or	r24, r18
 146:	80 83       	st	Z, r24
 148:	08 95       	ret
 14a:	e1 e1       	ldi	r30, 0x11	; 17
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	20 81       	ld	r18, Z
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_voidSetPinDirection+0xee>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_voidSetPinDirection+0xea>
 15e:	80 95       	com	r24
 160:	82 23       	and	r24, r18
 162:	80 83       	st	Z, r24
 164:	08 95       	ret

00000166 <DIO_uint8GetPinValue>:
}

uint8 DIO_uint8GetPinValue(uint8 Port, uint8 Pin)
{
    uint8 Loc_uint8Result = 0;
    switch (Port)
 166:	81 30       	cpi	r24, 0x01	; 1
 168:	81 f0       	breq	.+32     	; 0x18a <DIO_uint8GetPinValue+0x24>
 16a:	28 f0       	brcs	.+10     	; 0x176 <DIO_uint8GetPinValue+0x10>
 16c:	82 30       	cpi	r24, 0x02	; 2
 16e:	b9 f0       	breq	.+46     	; 0x19e <DIO_uint8GetPinValue+0x38>
 170:	83 30       	cpi	r24, 0x03	; 3
 172:	f9 f0       	breq	.+62     	; 0x1b2 <DIO_uint8GetPinValue+0x4c>
 174:	28 c0       	rjmp	.+80     	; 0x1c6 <DIO_uint8GetPinValue+0x60>
    {
    case PortA: Loc_uint8Result = Get( PinA_Reg,  Pin); break;
 176:	80 91 19 00 	lds	r24, 0x0019	; 0x800019 <__TEXT_REGION_LENGTH__+0x7f8019>
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 c0       	rjmp	.+4      	; 0x182 <DIO_uint8GetPinValue+0x1c>
 17e:	95 95       	asr	r25
 180:	87 95       	ror	r24
 182:	6a 95       	dec	r22
 184:	e2 f7       	brpl	.-8      	; 0x17e <DIO_uint8GetPinValue+0x18>
 186:	81 70       	andi	r24, 0x01	; 1
 188:	08 95       	ret
    case PortB: Loc_uint8Result = Get( PinB_Reg,  Pin); break;
 18a:	80 91 16 00 	lds	r24, 0x0016	; 0x800016 <__TEXT_REGION_LENGTH__+0x7f8016>
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_uint8GetPinValue+0x30>
 192:	95 95       	asr	r25
 194:	87 95       	ror	r24
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_uint8GetPinValue+0x2c>
 19a:	81 70       	andi	r24, 0x01	; 1
 19c:	08 95       	ret
    case PortC: Loc_uint8Result = Get( PinC_Reg,  Pin); break;
 19e:	80 91 13 00 	lds	r24, 0x0013	; 0x800013 <__TEXT_REGION_LENGTH__+0x7f8013>
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <DIO_uint8GetPinValue+0x44>
 1a6:	95 95       	asr	r25
 1a8:	87 95       	ror	r24
 1aa:	6a 95       	dec	r22
 1ac:	e2 f7       	brpl	.-8      	; 0x1a6 <DIO_uint8GetPinValue+0x40>
 1ae:	81 70       	andi	r24, 0x01	; 1
 1b0:	08 95       	ret
    case PortD: Loc_uint8Result = Get( PinD_Reg,  Pin); break;
 1b2:	80 91 10 00 	lds	r24, 0x0010	; 0x800010 <__TEXT_REGION_LENGTH__+0x7f8010>
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_uint8GetPinValue+0x58>
 1ba:	95 95       	asr	r25
 1bc:	87 95       	ror	r24
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_uint8GetPinValue+0x54>
 1c2:	81 70       	andi	r24, 0x01	; 1
 1c4:	08 95       	ret
    }
}

uint8 DIO_uint8GetPinValue(uint8 Port, uint8 Pin)
{
    uint8 Loc_uint8Result = 0;
 1c6:	80 e0       	ldi	r24, 0x00	; 0
    case PortB: Loc_uint8Result = Get( PinB_Reg,  Pin); break;
    case PortC: Loc_uint8Result = Get( PinC_Reg,  Pin); break;
    case PortD: Loc_uint8Result = Get( PinD_Reg,  Pin); break;
    }
    return Loc_uint8Result;
}
 1c8:	08 95       	ret

000001ca <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(uint8 Port, uint8 Pin, uint8 Value)
{
    switch (Port)
 1ca:	81 30       	cpi	r24, 0x01	; 1
 1cc:	21 f1       	breq	.+72     	; 0x216 <DIO_voidSetPinValue+0x4c>
 1ce:	30 f0       	brcs	.+12     	; 0x1dc <DIO_voidSetPinValue+0x12>
 1d0:	82 30       	cpi	r24, 0x02	; 2
 1d2:	f1 f1       	breq	.+124    	; 0x250 <DIO_voidSetPinValue+0x86>
 1d4:	83 30       	cpi	r24, 0x03	; 3
 1d6:	09 f4       	brne	.+2      	; 0x1da <DIO_voidSetPinValue+0x10>
 1d8:	58 c0       	rjmp	.+176    	; 0x28a <DIO_voidSetPinValue+0xc0>
 1da:	08 95       	ret
    {
    case PortA: if(Value == High) Set( PortA_Reg,  Pin); else Clr( PortA_Reg, Pin); break;
 1dc:	41 30       	cpi	r20, 0x01	; 1
 1de:	69 f4       	brne	.+26     	; 0x1fa <DIO_voidSetPinValue+0x30>
 1e0:	eb e1       	ldi	r30, 0x1B	; 27
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	20 81       	ld	r18, Z
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinValue+0x26>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinValue+0x22>
 1f4:	82 2b       	or	r24, r18
 1f6:	80 83       	st	Z, r24
 1f8:	08 95       	ret
 1fa:	eb e1       	ldi	r30, 0x1B	; 27
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	20 81       	ld	r18, Z
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_voidSetPinValue+0x40>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_voidSetPinValue+0x3c>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	80 83       	st	Z, r24
 214:	08 95       	ret
    case PortB: if(Value == High) Set( PortB_Reg,  Pin); else Clr( PortB_Reg, Pin); break;
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	69 f4       	brne	.+26     	; 0x234 <DIO_voidSetPinValue+0x6a>
 21a:	e8 e1       	ldi	r30, 0x18	; 24
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	20 81       	ld	r18, Z
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_voidSetPinValue+0x60>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	6a 95       	dec	r22
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_voidSetPinValue+0x5c>
 22e:	82 2b       	or	r24, r18
 230:	80 83       	st	Z, r24
 232:	08 95       	ret
 234:	e8 e1       	ldi	r30, 0x18	; 24
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	20 81       	ld	r18, Z
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_voidSetPinValue+0x7a>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_voidSetPinValue+0x76>
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret
    case PortC: if(Value == High) Set( PortC_Reg,  Pin); else Clr( PortC_Reg, Pin); break;
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	69 f4       	brne	.+26     	; 0x26e <DIO_voidSetPinValue+0xa4>
 254:	e5 e1       	ldi	r30, 0x15	; 21
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	20 81       	ld	r18, Z
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	02 c0       	rjmp	.+4      	; 0x264 <DIO_voidSetPinValue+0x9a>
 260:	88 0f       	add	r24, r24
 262:	99 1f       	adc	r25, r25
 264:	6a 95       	dec	r22
 266:	e2 f7       	brpl	.-8      	; 0x260 <DIO_voidSetPinValue+0x96>
 268:	82 2b       	or	r24, r18
 26a:	80 83       	st	Z, r24
 26c:	08 95       	ret
 26e:	e5 e1       	ldi	r30, 0x15	; 21
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	20 81       	ld	r18, Z
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	02 c0       	rjmp	.+4      	; 0x27e <DIO_voidSetPinValue+0xb4>
 27a:	88 0f       	add	r24, r24
 27c:	99 1f       	adc	r25, r25
 27e:	6a 95       	dec	r22
 280:	e2 f7       	brpl	.-8      	; 0x27a <DIO_voidSetPinValue+0xb0>
 282:	80 95       	com	r24
 284:	82 23       	and	r24, r18
 286:	80 83       	st	Z, r24
 288:	08 95       	ret
    case PortD: if(Value == High) Set( PortD_Reg,  Pin); else Clr( PortD_Reg, Pin); break;
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	69 f4       	brne	.+26     	; 0x2a8 <DIO_voidSetPinValue+0xde>
 28e:	e2 e1       	ldi	r30, 0x12	; 18
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	20 81       	ld	r18, Z
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_voidSetPinValue+0xd4>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_voidSetPinValue+0xd0>
 2a2:	82 2b       	or	r24, r18
 2a4:	80 83       	st	Z, r24
 2a6:	08 95       	ret
 2a8:	e2 e1       	ldi	r30, 0x12	; 18
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	20 81       	ld	r18, Z
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <DIO_voidSetPinValue+0xee>
 2b4:	88 0f       	add	r24, r24
 2b6:	99 1f       	adc	r25, r25
 2b8:	6a 95       	dec	r22
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <DIO_voidSetPinValue+0xea>
 2bc:	80 95       	com	r24
 2be:	82 23       	and	r24, r18
 2c0:	80 83       	st	Z, r24
 2c2:	08 95       	ret

000002c4 <main>:


int main(void)
{
    /* Replace with your application code */
	DIO_voidSetPinDirection(PortA, Pin0, Output);
 2c4:	41 e0       	ldi	r20, 0x01	; 1
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortA, Pin1, Output);
 2ce:	41 e0       	ldi	r20, 0x01	; 1
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortA, Pin2, Output);
 2d8:	41 e0       	ldi	r20, 0x01	; 1
 2da:	62 e0       	ldi	r22, 0x02	; 2
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC, Pin0, Input);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PortC, Pin0, High);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidSetPinValue>
	uint8 x = 0;
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
    while (1)
    {
		uint8 pinvalue = DIO_uint8GetPinValue(PortC, Pin0);
 2f8:	60 e0       	ldi	r22, 0x00	; 0
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	0e 94 b3 00 	call	0x166	; 0x166 <DIO_uint8GetPinValue>
		if (pinvalue == High)
 300:	81 30       	cpi	r24, 0x01	; 1
 302:	39 f4       	brne	.+14     	; 0x312 <main+0x4e>
		{
			x++;
 304:	cf 5f       	subi	r28, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	8f e0       	ldi	r24, 0x0F	; 15
 308:	97 e2       	ldi	r25, 0x27	; 39
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <main+0x46>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x4c>
 310:	00 00       	nop
			_delay_ms(40);
		}
		switch (x)
 312:	c1 30       	cpi	r28, 0x01	; 1
 314:	61 f0       	breq	.+24     	; 0x32e <main+0x6a>
 316:	28 f0       	brcs	.+10     	; 0x322 <main+0x5e>
 318:	c2 30       	cpi	r28, 0x02	; 2
 31a:	79 f0       	breq	.+30     	; 0x33a <main+0x76>
 31c:	c3 30       	cpi	r28, 0x03	; 3
 31e:	99 f0       	breq	.+38     	; 0x346 <main+0x82>
 320:	eb cf       	rjmp	.-42     	; 0x2f8 <main+0x34>
		{
			case 0: DIO_voidSetPinValue(PortA, Pin0, High); break;
 322:	41 e0       	ldi	r20, 0x01	; 1
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidSetPinValue>
 32c:	e5 cf       	rjmp	.-54     	; 0x2f8 <main+0x34>
			case 1: DIO_voidSetPinValue(PortA, Pin1, High); break;
 32e:	41 e0       	ldi	r20, 0x01	; 1
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidSetPinValue>
 338:	df cf       	rjmp	.-66     	; 0x2f8 <main+0x34>
			case 2: DIO_voidSetPinValue(PortA, Pin2, High); break;
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	62 e0       	ldi	r22, 0x02	; 2
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidSetPinValue>
 344:	d9 cf       	rjmp	.-78     	; 0x2f8 <main+0x34>
			case 3: DIO_voidSetPinValue(PortA, Pin0, Low); DIO_voidSetPinValue(PortA, Pin1, Low); DIO_voidSetPinValue(PortA, Pin2, Low); x = 0; break;
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	60 e0       	ldi	r22, 0x00	; 0
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidSetPinValue>
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidSetPinValue>
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	62 e0       	ldi	r22, 0x02	; 2
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 e5 00 	call	0x1ca	; 0x1ca <DIO_voidSetPinValue>
 364:	c0 e0       	ldi	r28, 0x00	; 0
 366:	c8 cf       	rjmp	.-112    	; 0x2f8 <main+0x34>

00000368 <_exit>:
 368:	f8 94       	cli

0000036a <__stop_program>:
 36a:	ff cf       	rjmp	.-2      	; 0x36a <__stop_program>
