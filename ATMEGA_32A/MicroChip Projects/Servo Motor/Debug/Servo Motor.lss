
Servo Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  000007ec  00000880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000a8  008000a8  000008c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018cc  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000999  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083d  00000000  00000000  00002c91  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  000034d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c27  00000000  00000000  00003728  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d0b  00000000  00000000  0000434f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 a3 02 	jmp	0x546	; 0x546 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__vector_8>
  24:	0c 94 55 02 	jmp	0x4aa	; 0x4aa <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3a       	cpi	r26, 0xA8	; 168
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 ea       	ldi	r26, 0xA8	; 168
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 3a       	cpi	r26, 0xAE	; 174
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 71 01 	call	0x2e2	; 0x2e2 <main>
  8a:	0c 94 f4 03 	jmp	0x7e8	; 0x7e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_ConfigChannel>:
		break;
	}
	return BitValue;
}
void DIO_ConfigChannel(DIO_ChannelTypes ChannelId,DIO_DirTypes direction){
	DIO_PortTypes Portx = ChannelId/8;
  92:	98 2f       	mov	r25, r24
  94:	96 95       	lsr	r25
  96:	96 95       	lsr	r25
  98:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = ChannelId%8;
  9a:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
  9c:	91 30       	cpi	r25, 0x01	; 1
  9e:	21 f1       	breq	.+72     	; 0xe8 <DIO_ConfigChannel+0x56>
  a0:	30 f0       	brcs	.+12     	; 0xae <DIO_ConfigChannel+0x1c>
  a2:	92 30       	cpi	r25, 0x02	; 2
  a4:	f1 f1       	breq	.+124    	; 0x122 <DIO_ConfigChannel+0x90>
  a6:	93 30       	cpi	r25, 0x03	; 3
  a8:	09 f4       	brne	.+2      	; 0xac <DIO_ConfigChannel+0x1a>
  aa:	58 c0       	rjmp	.+176    	; 0x15c <DIO_ConfigChannel+0xca>
  ac:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
  ae:	61 30       	cpi	r22, 0x01	; 1
  b0:	69 f4       	brne	.+26     	; 0xcc <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
  b2:	4a b3       	in	r20, 0x1a	; 26
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	b9 01       	movw	r22, r18
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_ConfigChannel+0x2e>
  bc:	66 0f       	add	r22, r22
  be:	77 1f       	adc	r23, r23
  c0:	8a 95       	dec	r24
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_ConfigChannel+0x2a>
  c4:	cb 01       	movw	r24, r22
  c6:	84 2b       	or	r24, r20
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
  cc:	4a b3       	in	r20, 0x1a	; 26
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	b9 01       	movw	r22, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <DIO_ConfigChannel+0x48>
  d6:	66 0f       	add	r22, r22
  d8:	77 1f       	adc	r23, r23
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <DIO_ConfigChannel+0x44>
  de:	cb 01       	movw	r24, r22
  e0:	80 95       	com	r24
  e2:	84 23       	and	r24, r20
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (direction == Output)
  e8:	61 30       	cpi	r22, 0x01	; 1
  ea:	69 f4       	brne	.+26     	; 0x106 <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
  ec:	47 b3       	in	r20, 0x17	; 23
  ee:	21 e0       	ldi	r18, 0x01	; 1
  f0:	30 e0       	ldi	r19, 0x00	; 0
  f2:	b9 01       	movw	r22, r18
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_ConfigChannel+0x68>
  f6:	66 0f       	add	r22, r22
  f8:	77 1f       	adc	r23, r23
  fa:	8a 95       	dec	r24
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_ConfigChannel+0x64>
  fe:	cb 01       	movw	r24, r22
 100:	84 2b       	or	r24, r20
 102:	87 bb       	out	0x17, r24	; 23
 104:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 106:	47 b3       	in	r20, 0x17	; 23
 108:	21 e0       	ldi	r18, 0x01	; 1
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	b9 01       	movw	r22, r18
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_ConfigChannel+0x82>
 110:	66 0f       	add	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	8a 95       	dec	r24
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_ConfigChannel+0x7e>
 118:	cb 01       	movw	r24, r22
 11a:	80 95       	com	r24
 11c:	84 23       	and	r24, r20
 11e:	87 bb       	out	0x17, r24	; 23
 120:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (direction == Output)
 122:	61 30       	cpi	r22, 0x01	; 1
 124:	69 f4       	brne	.+26     	; 0x140 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 126:	44 b3       	in	r20, 0x14	; 20
 128:	21 e0       	ldi	r18, 0x01	; 1
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	b9 01       	movw	r22, r18
 12e:	02 c0       	rjmp	.+4      	; 0x134 <DIO_ConfigChannel+0xa2>
 130:	66 0f       	add	r22, r22
 132:	77 1f       	adc	r23, r23
 134:	8a 95       	dec	r24
 136:	e2 f7       	brpl	.-8      	; 0x130 <DIO_ConfigChannel+0x9e>
 138:	cb 01       	movw	r24, r22
 13a:	84 2b       	or	r24, r20
 13c:	84 bb       	out	0x14, r24	; 20
 13e:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 140:	44 b3       	in	r20, 0x14	; 20
 142:	21 e0       	ldi	r18, 0x01	; 1
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	b9 01       	movw	r22, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_ConfigChannel+0xbc>
 14a:	66 0f       	add	r22, r22
 14c:	77 1f       	adc	r23, r23
 14e:	8a 95       	dec	r24
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_ConfigChannel+0xb8>
 152:	cb 01       	movw	r24, r22
 154:	80 95       	com	r24
 156:	84 23       	and	r24, r20
 158:	84 bb       	out	0x14, r24	; 20
 15a:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (direction == Output)
 15c:	61 30       	cpi	r22, 0x01	; 1
 15e:	69 f4       	brne	.+26     	; 0x17a <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 160:	41 b3       	in	r20, 0x11	; 17
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	b9 01       	movw	r22, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_ConfigChannel+0xdc>
 16a:	66 0f       	add	r22, r22
 16c:	77 1f       	adc	r23, r23
 16e:	8a 95       	dec	r24
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_ConfigChannel+0xd8>
 172:	cb 01       	movw	r24, r22
 174:	84 2b       	or	r24, r20
 176:	81 bb       	out	0x11, r24	; 17
 178:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 17a:	41 b3       	in	r20, 0x11	; 17
 17c:	21 e0       	ldi	r18, 0x01	; 1
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	b9 01       	movw	r22, r18
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_ConfigChannel+0xf6>
 184:	66 0f       	add	r22, r22
 186:	77 1f       	adc	r23, r23
 188:	8a 95       	dec	r24
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_ConfigChannel+0xf2>
 18c:	cb 01       	movw	r24, r22
 18e:	80 95       	com	r24
 190:	84 23       	and	r24, r20
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret

00000196 <DIO_Init>:
void DIO_Init(){
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	DIO_ChannelTypes count = DIO_ChannelA0;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	a0 c0       	rjmp	.+320    	; 0x2da <DIO_Init+0x144>
	{
		Portx = count/8;
 19a:	98 2f       	mov	r25, r24
 19c:	96 95       	lsr	r25
 19e:	96 95       	lsr	r25
 1a0:	96 95       	lsr	r25
		BitNo = count%8;
 1a2:	28 2f       	mov	r18, r24
 1a4:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 1a6:	91 30       	cpi	r25, 0x01	; 1
 1a8:	61 f1       	breq	.+88     	; 0x202 <DIO_Init+0x6c>
 1aa:	38 f0       	brcs	.+14     	; 0x1ba <DIO_Init+0x24>
 1ac:	92 30       	cpi	r25, 0x02	; 2
 1ae:	09 f4       	brne	.+2      	; 0x1b2 <DIO_Init+0x1c>
 1b0:	4c c0       	rjmp	.+152    	; 0x24a <DIO_Init+0xb4>
 1b2:	93 30       	cpi	r25, 0x03	; 3
 1b4:	09 f4       	brne	.+2      	; 0x1b8 <DIO_Init+0x22>
 1b6:	6d c0       	rjmp	.+218    	; 0x292 <DIO_Init+0xfc>
 1b8:	8f c0       	rjmp	.+286    	; 0x2d8 <DIO_Init+0x142>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 1ba:	e8 2f       	mov	r30, r24
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	ee 0f       	add	r30, r30
 1c0:	ff 1f       	adc	r31, r31
 1c2:	e0 5a       	subi	r30, 0xA0	; 160
 1c4:	ff 4f       	sbci	r31, 0xFF	; 255
 1c6:	90 81       	ld	r25, Z
 1c8:	91 30       	cpi	r25, 0x01	; 1
 1ca:	69 f4       	brne	.+26     	; 0x1e6 <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
 1cc:	9a b3       	in	r25, 0x1a	; 26
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	ba 01       	movw	r22, r20
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <DIO_Init+0x44>
 1d6:	66 0f       	add	r22, r22
 1d8:	77 1f       	adc	r23, r23
 1da:	2a 95       	dec	r18
 1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <DIO_Init+0x40>
 1de:	9b 01       	movw	r18, r22
 1e0:	29 2b       	or	r18, r25
 1e2:	2a bb       	out	0x1a, r18	; 26
 1e4:	79 c0       	rjmp	.+242    	; 0x2d8 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 1e6:	9a b3       	in	r25, 0x1a	; 26
 1e8:	41 e0       	ldi	r20, 0x01	; 1
 1ea:	50 e0       	ldi	r21, 0x00	; 0
 1ec:	ba 01       	movw	r22, r20
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_Init+0x5e>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	2a 95       	dec	r18
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_Init+0x5a>
 1f8:	9b 01       	movw	r18, r22
 1fa:	20 95       	com	r18
 1fc:	29 23       	and	r18, r25
 1fe:	2a bb       	out	0x1a, r18	; 26
 200:	6b c0       	rjmp	.+214    	; 0x2d8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 202:	e8 2f       	mov	r30, r24
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	ee 0f       	add	r30, r30
 208:	ff 1f       	adc	r31, r31
 20a:	e0 5a       	subi	r30, 0xA0	; 160
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	90 81       	ld	r25, Z
 210:	91 30       	cpi	r25, 0x01	; 1
 212:	69 f4       	brne	.+26     	; 0x22e <DIO_Init+0x98>
			{
				SetBit(DDRB_Reg,BitNo);
 214:	97 b3       	in	r25, 0x17	; 23
 216:	41 e0       	ldi	r20, 0x01	; 1
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	ba 01       	movw	r22, r20
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_Init+0x8c>
 21e:	66 0f       	add	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	2a 95       	dec	r18
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_Init+0x88>
 226:	9b 01       	movw	r18, r22
 228:	29 2b       	or	r18, r25
 22a:	27 bb       	out	0x17, r18	; 23
 22c:	55 c0       	rjmp	.+170    	; 0x2d8 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 22e:	97 b3       	in	r25, 0x17	; 23
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	50 e0       	ldi	r21, 0x00	; 0
 234:	ba 01       	movw	r22, r20
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_Init+0xa6>
 238:	66 0f       	add	r22, r22
 23a:	77 1f       	adc	r23, r23
 23c:	2a 95       	dec	r18
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_Init+0xa2>
 240:	9b 01       	movw	r18, r22
 242:	20 95       	com	r18
 244:	29 23       	and	r18, r25
 246:	27 bb       	out	0x17, r18	; 23
 248:	47 c0       	rjmp	.+142    	; 0x2d8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 24a:	e8 2f       	mov	r30, r24
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	e0 5a       	subi	r30, 0xA0	; 160
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	90 81       	ld	r25, Z
 258:	91 30       	cpi	r25, 0x01	; 1
 25a:	69 f4       	brne	.+26     	; 0x276 <DIO_Init+0xe0>
			{
				SetBit(DDRC_Reg,BitNo);
 25c:	94 b3       	in	r25, 0x14	; 20
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	ba 01       	movw	r22, r20
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_Init+0xd4>
 266:	66 0f       	add	r22, r22
 268:	77 1f       	adc	r23, r23
 26a:	2a 95       	dec	r18
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_Init+0xd0>
 26e:	9b 01       	movw	r18, r22
 270:	29 2b       	or	r18, r25
 272:	24 bb       	out	0x14, r18	; 20
 274:	31 c0       	rjmp	.+98     	; 0x2d8 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 276:	94 b3       	in	r25, 0x14	; 20
 278:	41 e0       	ldi	r20, 0x01	; 1
 27a:	50 e0       	ldi	r21, 0x00	; 0
 27c:	ba 01       	movw	r22, r20
 27e:	02 c0       	rjmp	.+4      	; 0x284 <DIO_Init+0xee>
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	2a 95       	dec	r18
 286:	e2 f7       	brpl	.-8      	; 0x280 <DIO_Init+0xea>
 288:	9b 01       	movw	r18, r22
 28a:	20 95       	com	r18
 28c:	29 23       	and	r18, r25
 28e:	24 bb       	out	0x14, r18	; 20
 290:	23 c0       	rjmp	.+70     	; 0x2d8 <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 292:	e8 2f       	mov	r30, r24
 294:	f0 e0       	ldi	r31, 0x00	; 0
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	e0 5a       	subi	r30, 0xA0	; 160
 29c:	ff 4f       	sbci	r31, 0xFF	; 255
 29e:	90 81       	ld	r25, Z
 2a0:	91 30       	cpi	r25, 0x01	; 1
 2a2:	69 f4       	brne	.+26     	; 0x2be <DIO_Init+0x128>
			{
				SetBit(DDRD_Reg,BitNo);
 2a4:	91 b3       	in	r25, 0x11	; 17
 2a6:	41 e0       	ldi	r20, 0x01	; 1
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	ba 01       	movw	r22, r20
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <DIO_Init+0x11c>
 2ae:	66 0f       	add	r22, r22
 2b0:	77 1f       	adc	r23, r23
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <DIO_Init+0x118>
 2b6:	9b 01       	movw	r18, r22
 2b8:	29 2b       	or	r18, r25
 2ba:	21 bb       	out	0x11, r18	; 17
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 2be:	91 b3       	in	r25, 0x11	; 17
 2c0:	41 e0       	ldi	r20, 0x01	; 1
 2c2:	50 e0       	ldi	r21, 0x00	; 0
 2c4:	ba 01       	movw	r22, r20
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <DIO_Init+0x136>
 2c8:	66 0f       	add	r22, r22
 2ca:	77 1f       	adc	r23, r23
 2cc:	2a 95       	dec	r18
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <DIO_Init+0x132>
 2d0:	9b 01       	movw	r18, r22
 2d2:	20 95       	com	r18
 2d4:	29 23       	and	r18, r25
 2d6:	21 bb       	out	0x11, r18	; 17
void DIO_Init(){
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	DIO_ChannelTypes count = DIO_ChannelA0;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 2d8:	8f 5f       	subi	r24, 0xFF	; 255
 2da:	80 32       	cpi	r24, 0x20	; 32
 2dc:	08 f4       	brcc	.+2      	; 0x2e0 <DIO_Init+0x14a>
 2de:	5d cf       	rjmp	.-326    	; 0x19a <DIO_Init+0x4>
			}
			break;
		}
	}
	
 2e0:	08 95       	ret

000002e2 <main>:
#include "ServoMotor.h"


int main(void)
{
	DIO_Init();
 2e2:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_Init>
	/* Replace with your application code */
	while (1)
	{
		ServoMotor(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 b5 01 	call	0x36a	; 0x36a <ServoMotor>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ee:	2f e9       	ldi	r18, 0x9F	; 159
 2f0:	86 e8       	ldi	r24, 0x86	; 134
 2f2:	91 e0       	ldi	r25, 0x01	; 1
 2f4:	21 50       	subi	r18, 0x01	; 1
 2f6:	80 40       	sbci	r24, 0x00	; 0
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	e1 f7       	brne	.-8      	; 0x2f4 <main+0x12>
 2fc:	00 c0       	rjmp	.+0      	; 0x2fe <main+0x1c>
 2fe:	00 00       	nop
		_delay_ms(500);
		ServoMotor(45);
 300:	8d e2       	ldi	r24, 0x2D	; 45
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 b5 01 	call	0x36a	; 0x36a <ServoMotor>
 308:	2f e9       	ldi	r18, 0x9F	; 159
 30a:	86 e8       	ldi	r24, 0x86	; 134
 30c:	91 e0       	ldi	r25, 0x01	; 1
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x2c>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x36>
 318:	00 00       	nop
		_delay_ms(500);
		ServoMotor(90);
 31a:	8a e5       	ldi	r24, 0x5A	; 90
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	0e 94 b5 01 	call	0x36a	; 0x36a <ServoMotor>
 322:	2f e9       	ldi	r18, 0x9F	; 159
 324:	86 e8       	ldi	r24, 0x86	; 134
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	21 50       	subi	r18, 0x01	; 1
 32a:	80 40       	sbci	r24, 0x00	; 0
 32c:	90 40       	sbci	r25, 0x00	; 0
 32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x46>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x50>
 332:	00 00       	nop
		_delay_ms(500);
		ServoMotor(135);
 334:	87 e8       	ldi	r24, 0x87	; 135
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 b5 01 	call	0x36a	; 0x36a <ServoMotor>
 33c:	2f e9       	ldi	r18, 0x9F	; 159
 33e:	86 e8       	ldi	r24, 0x86	; 134
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <main+0x60>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <main+0x6a>
 34c:	00 00       	nop
		_delay_ms(500);
		ServoMotor(180);
 34e:	84 eb       	ldi	r24, 0xB4	; 180
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 b5 01 	call	0x36a	; 0x36a <ServoMotor>
 356:	2f e3       	ldi	r18, 0x3F	; 63
 358:	8d e0       	ldi	r24, 0x0D	; 13
 35a:	93 e0       	ldi	r25, 0x03	; 3
 35c:	21 50       	subi	r18, 0x01	; 1
 35e:	80 40       	sbci	r24, 0x00	; 0
 360:	90 40       	sbci	r25, 0x00	; 0
 362:	e1 f7       	brne	.-8      	; 0x35c <main+0x7a>
 364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x84>
 366:	00 00       	nop
 368:	be cf       	rjmp	.-132    	; 0x2e6 <main+0x4>

0000036a <ServoMotor>:
 * Created: 10/14/2023 5:06:48 PM
 *  Author: user
 */ 
#include "ServoMotor.h"

void ServoMotor(u16 angle){
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	df 93       	push	r29
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	28 97       	sbiw	r28, 0x08	; 8
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	8c 01       	movw	r16, r24
	
	DIO_ConfigChannel(DIO_ChannelD5,Output);
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	8d e1       	ldi	r24, 0x1D	; 29
 388:	0e 94 49 00 	call	0x92	; 0x92 <DIO_ConfigChannel>
	u16 OCR1AValue = (u16)((angle-miniAngle) * ((float)(maxCount-miniCount)/(maxAngle-miniAngle)))+miniCount-1;
 38c:	b8 01       	movw	r22, r16
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <__floatunsisf>
 396:	2c e1       	ldi	r18, 0x1C	; 28
 398:	37 ec       	ldi	r19, 0xC7	; 199
 39a:	41 eb       	ldi	r20, 0xB1	; 177
 39c:	5f e3       	ldi	r21, 0x3F	; 63
 39e:	0e 94 5f 03 	call	0x6be	; 0x6be <__mulsf3>
 3a2:	0e 94 ca 02 	call	0x594	; 0x594 <__fixunssfsi>
 3a6:	8b 01       	movw	r16, r22
 3a8:	07 50       	subi	r16, 0x07	; 7
 3aa:	1f 4f       	sbci	r17, 0xFF	; 255
	u16 ICR1Value = 4999;
	Timer1_SetValue(ICR1DataReg,ICR1Value);
 3ac:	67 e8       	ldi	r22, 0x87	; 135
 3ae:	73 e1       	ldi	r23, 0x13	; 19
 3b0:	82 e0       	ldi	r24, 0x02	; 2
 3b2:	0e 94 46 02 	call	0x48c	; 0x48c <Timer1_SetValue>
	Timer1_SetValue(OCR1ADataReg,OCR1AValue);
 3b6:	b8 01       	movw	r22, r16
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 46 02 	call	0x48c	; 0x48c <Timer1_SetValue>
	
	Timer1_InitTypes options = {PWM_Fast,Clock_64,COM1A_Non_Inverting_PWM,COM1B_No_PWM,TOVInt_Disable,OC1AInt_Disable,OC1BInt_Disable,ICInt_Disable};
 3be:	88 e0       	ldi	r24, 0x08	; 8
 3c0:	e0 ea       	ldi	r30, 0xA0	; 160
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	de 01       	movw	r26, r28
 3c6:	11 96       	adiw	r26, 0x01	; 1
 3c8:	01 90       	ld	r0, Z+
 3ca:	0d 92       	st	X+, r0
 3cc:	8a 95       	dec	r24
 3ce:	e1 f7       	brne	.-8      	; 0x3c8 <ServoMotor+0x5e>
	Timer1_Init(&options);
 3d0:	ce 01       	movw	r24, r28
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	0e 94 f7 01 	call	0x3ee	; 0x3ee <Timer1_Init>
 3d8:	28 96       	adiw	r28, 0x08	; 8
 3da:	0f b6       	in	r0, 0x3f	; 63
 3dc:	f8 94       	cli
 3de:	de bf       	out	0x3e, r29	; 62
 3e0:	0f be       	out	0x3f, r0	; 63
 3e2:	cd bf       	out	0x3d, r28	; 61
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	0f 91       	pop	r16
 3ec:	08 95       	ret

000003ee <Timer1_Init>:
		break;
		case OC1BInt:
		OC1BIntFunPtr = IntCopyFunPtr;
		break;
		case ICInt:
		ICIntFunPtr = IntCopyFunPtr;
 3ee:	fc 01       	movw	r30, r24
 3f0:	9f b5       	in	r25, 0x2f	; 47
 3f2:	80 81       	ld	r24, Z
 3f4:	83 70       	andi	r24, 0x03	; 3
 3f6:	89 2b       	or	r24, r25
 3f8:	8f bd       	out	0x2f, r24	; 47
 3fa:	2e b5       	in	r18, 0x2e	; 46
 3fc:	90 81       	ld	r25, Z
 3fe:	96 95       	lsr	r25
 400:	96 95       	lsr	r25
 402:	89 2f       	mov	r24, r25
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	88 0f       	add	r24, r24
 408:	99 1f       	adc	r25, r25
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	82 2b       	or	r24, r18
 414:	8e bd       	out	0x2e, r24	; 46
 416:	9e b5       	in	r25, 0x2e	; 46
 418:	81 81       	ldd	r24, Z+1	; 0x01
 41a:	89 2b       	or	r24, r25
 41c:	8e bd       	out	0x2e, r24	; 46
 41e:	2f b5       	in	r18, 0x2f	; 47
 420:	92 81       	ldd	r25, Z+2	; 0x02
 422:	30 e4       	ldi	r19, 0x40	; 64
 424:	93 9f       	mul	r25, r19
 426:	c0 01       	movw	r24, r0
 428:	11 24       	eor	r1, r1
 42a:	82 2b       	or	r24, r18
 42c:	8f bd       	out	0x2f, r24	; 47
 42e:	2f b5       	in	r18, 0x2f	; 47
 430:	93 81       	ldd	r25, Z+3	; 0x03
 432:	30 e1       	ldi	r19, 0x10	; 16
 434:	93 9f       	mul	r25, r19
 436:	c0 01       	movw	r24, r0
 438:	11 24       	eor	r1, r1
 43a:	82 2b       	or	r24, r18
 43c:	8f bd       	out	0x2f, r24	; 47
 43e:	29 b7       	in	r18, 0x39	; 57
 440:	94 81       	ldd	r25, Z+4	; 0x04
 442:	89 2f       	mov	r24, r25
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	82 2b       	or	r24, r18
 450:	89 bf       	out	0x39, r24	; 57
 452:	29 b7       	in	r18, 0x39	; 57
 454:	96 81       	ldd	r25, Z+6	; 0x06
 456:	89 2f       	mov	r24, r25
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	88 0f       	add	r24, r24
 45c:	99 1f       	adc	r25, r25
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	88 0f       	add	r24, r24
 464:	99 1f       	adc	r25, r25
 466:	82 2b       	or	r24, r18
 468:	89 bf       	out	0x39, r24	; 57
 46a:	29 b7       	in	r18, 0x39	; 57
 46c:	95 81       	ldd	r25, Z+5	; 0x05
 46e:	30 e1       	ldi	r19, 0x10	; 16
 470:	93 9f       	mul	r25, r19
 472:	c0 01       	movw	r24, r0
 474:	11 24       	eor	r1, r1
 476:	82 2b       	or	r24, r18
 478:	89 bf       	out	0x39, r24	; 57
 47a:	29 b7       	in	r18, 0x39	; 57
 47c:	97 81       	ldd	r25, Z+7	; 0x07
 47e:	30 e2       	ldi	r19, 0x20	; 32
 480:	93 9f       	mul	r25, r19
 482:	c0 01       	movw	r24, r0
 484:	11 24       	eor	r1, r1
 486:	82 2b       	or	r24, r18
 488:	89 bf       	out	0x39, r24	; 57
 48a:	08 95       	ret

0000048c <Timer1_SetValue>:
		break;
	}
}
void Timer1_SetValue(Timer1_DataRegTypes dataRegister,u16 dataValue){
	switch(dataRegister){
 48c:	81 30       	cpi	r24, 0x01	; 1
 48e:	39 f0       	breq	.+14     	; 0x49e <Timer1_SetValue+0x12>
 490:	18 f0       	brcs	.+6      	; 0x498 <Timer1_SetValue+0xc>
 492:	82 30       	cpi	r24, 0x02	; 2
 494:	39 f0       	breq	.+14     	; 0x4a4 <Timer1_SetValue+0x18>
 496:	08 95       	ret
		case OCR1ADataReg:
		Timer1->OCR1A_Reg = dataValue;
 498:	7b bd       	out	0x2b, r23	; 43
 49a:	6a bd       	out	0x2a, r22	; 42
		break;
 49c:	08 95       	ret
		case OCR1BDataReg:
		Timer1->OCR1B_Reg = dataValue;
 49e:	79 bd       	out	0x29, r23	; 41
 4a0:	68 bd       	out	0x28, r22	; 40
		break;
 4a2:	08 95       	ret
		case ICR1DataReg:
		Timer1->ICR1_Reg = dataValue;
 4a4:	77 bd       	out	0x27, r23	; 39
 4a6:	66 bd       	out	0x26, r22	; 38
 4a8:	08 95       	ret

000004aa <__vector_9>:
		break;
	}
}

ISR(TIMER1_OVF_vect){
 4aa:	1f 92       	push	r1
 4ac:	0f 92       	push	r0
 4ae:	0f b6       	in	r0, 0x3f	; 63
 4b0:	0f 92       	push	r0
 4b2:	11 24       	eor	r1, r1
 4b4:	2f 93       	push	r18
 4b6:	3f 93       	push	r19
 4b8:	4f 93       	push	r20
 4ba:	5f 93       	push	r21
 4bc:	6f 93       	push	r22
 4be:	7f 93       	push	r23
 4c0:	8f 93       	push	r24
 4c2:	9f 93       	push	r25
 4c4:	af 93       	push	r26
 4c6:	bf 93       	push	r27
 4c8:	ef 93       	push	r30
 4ca:	ff 93       	push	r31
	TOVIntFunPtr();
 4cc:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <TOVIntFunPtr>
 4d0:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <TOVIntFunPtr+0x1>
 4d4:	09 95       	icall
}
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <__vector_8>:

//ISR(TIMER1_COMPA_vect){
//	OC1AIntFunPtr();
//}

ISR(TIMER1_COMPB_vect){
 4f8:	1f 92       	push	r1
 4fa:	0f 92       	push	r0
 4fc:	0f b6       	in	r0, 0x3f	; 63
 4fe:	0f 92       	push	r0
 500:	11 24       	eor	r1, r1
 502:	2f 93       	push	r18
 504:	3f 93       	push	r19
 506:	4f 93       	push	r20
 508:	5f 93       	push	r21
 50a:	6f 93       	push	r22
 50c:	7f 93       	push	r23
 50e:	8f 93       	push	r24
 510:	9f 93       	push	r25
 512:	af 93       	push	r26
 514:	bf 93       	push	r27
 516:	ef 93       	push	r30
 518:	ff 93       	push	r31
	OC1BIntFunPtr();
 51a:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <OC1BIntFunPtr>
 51e:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <OC1BIntFunPtr+0x1>
 522:	09 95       	icall
}
 524:	ff 91       	pop	r31
 526:	ef 91       	pop	r30
 528:	bf 91       	pop	r27
 52a:	af 91       	pop	r26
 52c:	9f 91       	pop	r25
 52e:	8f 91       	pop	r24
 530:	7f 91       	pop	r23
 532:	6f 91       	pop	r22
 534:	5f 91       	pop	r21
 536:	4f 91       	pop	r20
 538:	3f 91       	pop	r19
 53a:	2f 91       	pop	r18
 53c:	0f 90       	pop	r0
 53e:	0f be       	out	0x3f, r0	; 63
 540:	0f 90       	pop	r0
 542:	1f 90       	pop	r1
 544:	18 95       	reti

00000546 <__vector_6>:

ISR(TIMER1_CAPT_vect){
 546:	1f 92       	push	r1
 548:	0f 92       	push	r0
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	0f 92       	push	r0
 54e:	11 24       	eor	r1, r1
 550:	2f 93       	push	r18
 552:	3f 93       	push	r19
 554:	4f 93       	push	r20
 556:	5f 93       	push	r21
 558:	6f 93       	push	r22
 55a:	7f 93       	push	r23
 55c:	8f 93       	push	r24
 55e:	9f 93       	push	r25
 560:	af 93       	push	r26
 562:	bf 93       	push	r27
 564:	ef 93       	push	r30
 566:	ff 93       	push	r31
	ICIntFunPtr();
 568:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <__data_end>
 56c:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <__data_end+0x1>
 570:	09 95       	icall
 572:	ff 91       	pop	r31
 574:	ef 91       	pop	r30
 576:	bf 91       	pop	r27
 578:	af 91       	pop	r26
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	7f 91       	pop	r23
 580:	6f 91       	pop	r22
 582:	5f 91       	pop	r21
 584:	4f 91       	pop	r20
 586:	3f 91       	pop	r19
 588:	2f 91       	pop	r18
 58a:	0f 90       	pop	r0
 58c:	0f be       	out	0x3f, r0	; 63
 58e:	0f 90       	pop	r0
 590:	1f 90       	pop	r1
 592:	18 95       	reti

00000594 <__fixunssfsi>:
 594:	0e 94 3e 03 	call	0x67c	; 0x67c <__fp_splitA>
 598:	88 f0       	brcs	.+34     	; 0x5bc <__fixunssfsi+0x28>
 59a:	9f 57       	subi	r25, 0x7F	; 127
 59c:	98 f0       	brcs	.+38     	; 0x5c4 <__fixunssfsi+0x30>
 59e:	b9 2f       	mov	r27, r25
 5a0:	99 27       	eor	r25, r25
 5a2:	b7 51       	subi	r27, 0x17	; 23
 5a4:	b0 f0       	brcs	.+44     	; 0x5d2 <__fixunssfsi+0x3e>
 5a6:	e1 f0       	breq	.+56     	; 0x5e0 <__fixunssfsi+0x4c>
 5a8:	66 0f       	add	r22, r22
 5aa:	77 1f       	adc	r23, r23
 5ac:	88 1f       	adc	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	1a f0       	brmi	.+6      	; 0x5b8 <__fixunssfsi+0x24>
 5b2:	ba 95       	dec	r27
 5b4:	c9 f7       	brne	.-14     	; 0x5a8 <__fixunssfsi+0x14>
 5b6:	14 c0       	rjmp	.+40     	; 0x5e0 <__fixunssfsi+0x4c>
 5b8:	b1 30       	cpi	r27, 0x01	; 1
 5ba:	91 f0       	breq	.+36     	; 0x5e0 <__fixunssfsi+0x4c>
 5bc:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__fp_zero>
 5c0:	b1 e0       	ldi	r27, 0x01	; 1
 5c2:	08 95       	ret
 5c4:	0c 94 58 03 	jmp	0x6b0	; 0x6b0 <__fp_zero>
 5c8:	67 2f       	mov	r22, r23
 5ca:	78 2f       	mov	r23, r24
 5cc:	88 27       	eor	r24, r24
 5ce:	b8 5f       	subi	r27, 0xF8	; 248
 5d0:	39 f0       	breq	.+14     	; 0x5e0 <__fixunssfsi+0x4c>
 5d2:	b9 3f       	cpi	r27, 0xF9	; 249
 5d4:	cc f3       	brlt	.-14     	; 0x5c8 <__fixunssfsi+0x34>
 5d6:	86 95       	lsr	r24
 5d8:	77 95       	ror	r23
 5da:	67 95       	ror	r22
 5dc:	b3 95       	inc	r27
 5de:	d9 f7       	brne	.-10     	; 0x5d6 <__fixunssfsi+0x42>
 5e0:	3e f4       	brtc	.+14     	; 0x5f0 <__fixunssfsi+0x5c>
 5e2:	90 95       	com	r25
 5e4:	80 95       	com	r24
 5e6:	70 95       	com	r23
 5e8:	61 95       	neg	r22
 5ea:	7f 4f       	sbci	r23, 0xFF	; 255
 5ec:	8f 4f       	sbci	r24, 0xFF	; 255
 5ee:	9f 4f       	sbci	r25, 0xFF	; 255
 5f0:	08 95       	ret

000005f2 <__floatunsisf>:
 5f2:	e8 94       	clt
 5f4:	09 c0       	rjmp	.+18     	; 0x608 <__floatsisf+0x12>

000005f6 <__floatsisf>:
 5f6:	97 fb       	bst	r25, 7
 5f8:	3e f4       	brtc	.+14     	; 0x608 <__floatsisf+0x12>
 5fa:	90 95       	com	r25
 5fc:	80 95       	com	r24
 5fe:	70 95       	com	r23
 600:	61 95       	neg	r22
 602:	7f 4f       	sbci	r23, 0xFF	; 255
 604:	8f 4f       	sbci	r24, 0xFF	; 255
 606:	9f 4f       	sbci	r25, 0xFF	; 255
 608:	99 23       	and	r25, r25
 60a:	a9 f0       	breq	.+42     	; 0x636 <__floatsisf+0x40>
 60c:	f9 2f       	mov	r31, r25
 60e:	96 e9       	ldi	r25, 0x96	; 150
 610:	bb 27       	eor	r27, r27
 612:	93 95       	inc	r25
 614:	f6 95       	lsr	r31
 616:	87 95       	ror	r24
 618:	77 95       	ror	r23
 61a:	67 95       	ror	r22
 61c:	b7 95       	ror	r27
 61e:	f1 11       	cpse	r31, r1
 620:	f8 cf       	rjmp	.-16     	; 0x612 <__floatsisf+0x1c>
 622:	fa f4       	brpl	.+62     	; 0x662 <__floatsisf+0x6c>
 624:	bb 0f       	add	r27, r27
 626:	11 f4       	brne	.+4      	; 0x62c <__floatsisf+0x36>
 628:	60 ff       	sbrs	r22, 0
 62a:	1b c0       	rjmp	.+54     	; 0x662 <__floatsisf+0x6c>
 62c:	6f 5f       	subi	r22, 0xFF	; 255
 62e:	7f 4f       	sbci	r23, 0xFF	; 255
 630:	8f 4f       	sbci	r24, 0xFF	; 255
 632:	9f 4f       	sbci	r25, 0xFF	; 255
 634:	16 c0       	rjmp	.+44     	; 0x662 <__floatsisf+0x6c>
 636:	88 23       	and	r24, r24
 638:	11 f0       	breq	.+4      	; 0x63e <__floatsisf+0x48>
 63a:	96 e9       	ldi	r25, 0x96	; 150
 63c:	11 c0       	rjmp	.+34     	; 0x660 <__floatsisf+0x6a>
 63e:	77 23       	and	r23, r23
 640:	21 f0       	breq	.+8      	; 0x64a <__floatsisf+0x54>
 642:	9e e8       	ldi	r25, 0x8E	; 142
 644:	87 2f       	mov	r24, r23
 646:	76 2f       	mov	r23, r22
 648:	05 c0       	rjmp	.+10     	; 0x654 <__floatsisf+0x5e>
 64a:	66 23       	and	r22, r22
 64c:	71 f0       	breq	.+28     	; 0x66a <__floatsisf+0x74>
 64e:	96 e8       	ldi	r25, 0x86	; 134
 650:	86 2f       	mov	r24, r22
 652:	70 e0       	ldi	r23, 0x00	; 0
 654:	60 e0       	ldi	r22, 0x00	; 0
 656:	2a f0       	brmi	.+10     	; 0x662 <__floatsisf+0x6c>
 658:	9a 95       	dec	r25
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	da f7       	brpl	.-10     	; 0x658 <__floatsisf+0x62>
 662:	88 0f       	add	r24, r24
 664:	96 95       	lsr	r25
 666:	87 95       	ror	r24
 668:	97 f9       	bld	r25, 7
 66a:	08 95       	ret

0000066c <__fp_split3>:
 66c:	57 fd       	sbrc	r21, 7
 66e:	90 58       	subi	r25, 0x80	; 128
 670:	44 0f       	add	r20, r20
 672:	55 1f       	adc	r21, r21
 674:	59 f0       	breq	.+22     	; 0x68c <__fp_splitA+0x10>
 676:	5f 3f       	cpi	r21, 0xFF	; 255
 678:	71 f0       	breq	.+28     	; 0x696 <__fp_splitA+0x1a>
 67a:	47 95       	ror	r20

0000067c <__fp_splitA>:
 67c:	88 0f       	add	r24, r24
 67e:	97 fb       	bst	r25, 7
 680:	99 1f       	adc	r25, r25
 682:	61 f0       	breq	.+24     	; 0x69c <__fp_splitA+0x20>
 684:	9f 3f       	cpi	r25, 0xFF	; 255
 686:	79 f0       	breq	.+30     	; 0x6a6 <__fp_splitA+0x2a>
 688:	87 95       	ror	r24
 68a:	08 95       	ret
 68c:	12 16       	cp	r1, r18
 68e:	13 06       	cpc	r1, r19
 690:	14 06       	cpc	r1, r20
 692:	55 1f       	adc	r21, r21
 694:	f2 cf       	rjmp	.-28     	; 0x67a <__fp_split3+0xe>
 696:	46 95       	lsr	r20
 698:	f1 df       	rcall	.-30     	; 0x67c <__fp_splitA>
 69a:	08 c0       	rjmp	.+16     	; 0x6ac <__fp_splitA+0x30>
 69c:	16 16       	cp	r1, r22
 69e:	17 06       	cpc	r1, r23
 6a0:	18 06       	cpc	r1, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	f1 cf       	rjmp	.-30     	; 0x688 <__fp_splitA+0xc>
 6a6:	86 95       	lsr	r24
 6a8:	71 05       	cpc	r23, r1
 6aa:	61 05       	cpc	r22, r1
 6ac:	08 94       	sec
 6ae:	08 95       	ret

000006b0 <__fp_zero>:
 6b0:	e8 94       	clt

000006b2 <__fp_szero>:
 6b2:	bb 27       	eor	r27, r27
 6b4:	66 27       	eor	r22, r22
 6b6:	77 27       	eor	r23, r23
 6b8:	cb 01       	movw	r24, r22
 6ba:	97 f9       	bld	r25, 7
 6bc:	08 95       	ret

000006be <__mulsf3>:
 6be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__mulsf3x>
 6c2:	0c 94 e3 03 	jmp	0x7c6	; 0x7c6 <__fp_round>
 6c6:	0e 94 d5 03 	call	0x7aa	; 0x7aa <__fp_pscA>
 6ca:	38 f0       	brcs	.+14     	; 0x6da <__mulsf3+0x1c>
 6cc:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <__fp_pscB>
 6d0:	20 f0       	brcs	.+8      	; 0x6da <__mulsf3+0x1c>
 6d2:	95 23       	and	r25, r21
 6d4:	11 f0       	breq	.+4      	; 0x6da <__mulsf3+0x1c>
 6d6:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_inf>
 6da:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <__fp_nan>
 6de:	11 24       	eor	r1, r1
 6e0:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>

000006e4 <__mulsf3x>:
 6e4:	0e 94 36 03 	call	0x66c	; 0x66c <__fp_split3>
 6e8:	70 f3       	brcs	.-36     	; 0x6c6 <__mulsf3+0x8>

000006ea <__mulsf3_pse>:
 6ea:	95 9f       	mul	r25, r21
 6ec:	c1 f3       	breq	.-16     	; 0x6de <__mulsf3+0x20>
 6ee:	95 0f       	add	r25, r21
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	55 1f       	adc	r21, r21
 6f4:	62 9f       	mul	r22, r18
 6f6:	f0 01       	movw	r30, r0
 6f8:	72 9f       	mul	r23, r18
 6fa:	bb 27       	eor	r27, r27
 6fc:	f0 0d       	add	r31, r0
 6fe:	b1 1d       	adc	r27, r1
 700:	63 9f       	mul	r22, r19
 702:	aa 27       	eor	r26, r26
 704:	f0 0d       	add	r31, r0
 706:	b1 1d       	adc	r27, r1
 708:	aa 1f       	adc	r26, r26
 70a:	64 9f       	mul	r22, r20
 70c:	66 27       	eor	r22, r22
 70e:	b0 0d       	add	r27, r0
 710:	a1 1d       	adc	r26, r1
 712:	66 1f       	adc	r22, r22
 714:	82 9f       	mul	r24, r18
 716:	22 27       	eor	r18, r18
 718:	b0 0d       	add	r27, r0
 71a:	a1 1d       	adc	r26, r1
 71c:	62 1f       	adc	r22, r18
 71e:	73 9f       	mul	r23, r19
 720:	b0 0d       	add	r27, r0
 722:	a1 1d       	adc	r26, r1
 724:	62 1f       	adc	r22, r18
 726:	83 9f       	mul	r24, r19
 728:	a0 0d       	add	r26, r0
 72a:	61 1d       	adc	r22, r1
 72c:	22 1f       	adc	r18, r18
 72e:	74 9f       	mul	r23, r20
 730:	33 27       	eor	r19, r19
 732:	a0 0d       	add	r26, r0
 734:	61 1d       	adc	r22, r1
 736:	23 1f       	adc	r18, r19
 738:	84 9f       	mul	r24, r20
 73a:	60 0d       	add	r22, r0
 73c:	21 1d       	adc	r18, r1
 73e:	82 2f       	mov	r24, r18
 740:	76 2f       	mov	r23, r22
 742:	6a 2f       	mov	r22, r26
 744:	11 24       	eor	r1, r1
 746:	9f 57       	subi	r25, 0x7F	; 127
 748:	50 40       	sbci	r21, 0x00	; 0
 74a:	9a f0       	brmi	.+38     	; 0x772 <__mulsf3_pse+0x88>
 74c:	f1 f0       	breq	.+60     	; 0x78a <__mulsf3_pse+0xa0>
 74e:	88 23       	and	r24, r24
 750:	4a f0       	brmi	.+18     	; 0x764 <__mulsf3_pse+0x7a>
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	bb 1f       	adc	r27, r27
 758:	66 1f       	adc	r22, r22
 75a:	77 1f       	adc	r23, r23
 75c:	88 1f       	adc	r24, r24
 75e:	91 50       	subi	r25, 0x01	; 1
 760:	50 40       	sbci	r21, 0x00	; 0
 762:	a9 f7       	brne	.-22     	; 0x74e <__mulsf3_pse+0x64>
 764:	9e 3f       	cpi	r25, 0xFE	; 254
 766:	51 05       	cpc	r21, r1
 768:	80 f0       	brcs	.+32     	; 0x78a <__mulsf3_pse+0xa0>
 76a:	0c 94 cc 03 	jmp	0x798	; 0x798 <__fp_inf>
 76e:	0c 94 59 03 	jmp	0x6b2	; 0x6b2 <__fp_szero>
 772:	5f 3f       	cpi	r21, 0xFF	; 255
 774:	e4 f3       	brlt	.-8      	; 0x76e <__mulsf3_pse+0x84>
 776:	98 3e       	cpi	r25, 0xE8	; 232
 778:	d4 f3       	brlt	.-12     	; 0x76e <__mulsf3_pse+0x84>
 77a:	86 95       	lsr	r24
 77c:	77 95       	ror	r23
 77e:	67 95       	ror	r22
 780:	b7 95       	ror	r27
 782:	f7 95       	ror	r31
 784:	e7 95       	ror	r30
 786:	9f 5f       	subi	r25, 0xFF	; 255
 788:	c1 f7       	brne	.-16     	; 0x77a <__mulsf3_pse+0x90>
 78a:	fe 2b       	or	r31, r30
 78c:	88 0f       	add	r24, r24
 78e:	91 1d       	adc	r25, r1
 790:	96 95       	lsr	r25
 792:	87 95       	ror	r24
 794:	97 f9       	bld	r25, 7
 796:	08 95       	ret

00000798 <__fp_inf>:
 798:	97 f9       	bld	r25, 7
 79a:	9f 67       	ori	r25, 0x7F	; 127
 79c:	80 e8       	ldi	r24, 0x80	; 128
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	08 95       	ret

000007a4 <__fp_nan>:
 7a4:	9f ef       	ldi	r25, 0xFF	; 255
 7a6:	80 ec       	ldi	r24, 0xC0	; 192
 7a8:	08 95       	ret

000007aa <__fp_pscA>:
 7aa:	00 24       	eor	r0, r0
 7ac:	0a 94       	dec	r0
 7ae:	16 16       	cp	r1, r22
 7b0:	17 06       	cpc	r1, r23
 7b2:	18 06       	cpc	r1, r24
 7b4:	09 06       	cpc	r0, r25
 7b6:	08 95       	ret

000007b8 <__fp_pscB>:
 7b8:	00 24       	eor	r0, r0
 7ba:	0a 94       	dec	r0
 7bc:	12 16       	cp	r1, r18
 7be:	13 06       	cpc	r1, r19
 7c0:	14 06       	cpc	r1, r20
 7c2:	05 06       	cpc	r0, r21
 7c4:	08 95       	ret

000007c6 <__fp_round>:
 7c6:	09 2e       	mov	r0, r25
 7c8:	03 94       	inc	r0
 7ca:	00 0c       	add	r0, r0
 7cc:	11 f4       	brne	.+4      	; 0x7d2 <__fp_round+0xc>
 7ce:	88 23       	and	r24, r24
 7d0:	52 f0       	brmi	.+20     	; 0x7e6 <__fp_round+0x20>
 7d2:	bb 0f       	add	r27, r27
 7d4:	40 f4       	brcc	.+16     	; 0x7e6 <__fp_round+0x20>
 7d6:	bf 2b       	or	r27, r31
 7d8:	11 f4       	brne	.+4      	; 0x7de <__fp_round+0x18>
 7da:	60 ff       	sbrs	r22, 0
 7dc:	04 c0       	rjmp	.+8      	; 0x7e6 <__fp_round+0x20>
 7de:	6f 5f       	subi	r22, 0xFF	; 255
 7e0:	7f 4f       	sbci	r23, 0xFF	; 255
 7e2:	8f 4f       	sbci	r24, 0xFF	; 255
 7e4:	9f 4f       	sbci	r25, 0xFF	; 255
 7e6:	08 95       	ret

000007e8 <_exit>:
 7e8:	f8 94       	cli

000007ea <__stop_program>:
 7ea:	ff cf       	rjmp	.-2      	; 0x7ea <__stop_program>
