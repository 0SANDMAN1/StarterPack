
Mohandseen_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001980  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00001980  00001a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000064c  00800098  00800098  00001a4c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001a7c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  00001ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005038  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001314  00000000  00000000  00006e98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002743  00000000  00000000  000081ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c38  00000000  00000000  0000a8f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001db1  00000000  00000000  0000b528  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004315  00000000  00000000  0000d2d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000428  00000000  00000000  000115ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_1>
       8:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__vector_2>
       c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_6>
      1c:	0c 94 47 0c 	jmp	0x188e	; 0x188e <__vector_7>
      20:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_8>
      24:	0c 94 45 01 	jmp	0x28a	; 0x28a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	26 e0       	ldi	r18, 0x06	; 6
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3e       	cpi	r26, 0xE4	; 228
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 80 00 	call	0x100	; 0x100 <main>
      8a:	0c 94 be 0c 	jmp	0x197c	; 0x197c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADCWriteQueue>:
	{

	}
}

void ADCWriteQueue(void * string){
      92:	ec 01       	movw	r28, r24
	while(1){
		xQueueSendToBack(uartQueue,string,5/portTICK_PERIOD_MS);
      94:	20 e0       	ldi	r18, 0x00	; 0
      96:	45 e0       	ldi	r20, 0x05	; 5
      98:	50 e0       	ldi	r21, 0x00	; 0
      9a:	be 01       	movw	r22, r28
      9c:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <uartQueue>
      a0:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <uartQueue+0x1>
      a4:	0e 94 4f 04 	call	0x89e	; 0x89e <xQueueGenericSend>
      a8:	f5 cf       	rjmp	.-22     	; 0x94 <ADCWriteQueue+0x2>

000000aa <xPrint>:
	}
}

void xPrint(void * string){
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	cd b7       	in	r28, 0x3d	; 61
      b0:	de b7       	in	r29, 0x3e	; 62
      b2:	65 97       	sbiw	r28, 0x15	; 21
      b4:	0f b6       	in	r0, 0x3f	; 63
      b6:	f8 94       	cli
      b8:	de bf       	out	0x3e, r29	; 62
      ba:	0f be       	out	0x3f, r0	; 63
      bc:	cd bf       	out	0x3d, r28	; 61
	char rxData[10];
	xData strData;
	while(1){
		if (xQueueReceive(uartQueue,&strData,5/portTICK_PERIOD_MS) == pdTRUE)
      be:	45 e0       	ldi	r20, 0x05	; 5
      c0:	50 e0       	ldi	r21, 0x00	; 0
      c2:	be 01       	movw	r22, r28
      c4:	65 5f       	subi	r22, 0xF5	; 245
      c6:	7f 4f       	sbci	r23, 0xFF	; 255
      c8:	80 91 e2 06 	lds	r24, 0x06E2	; 0x8006e2 <uartQueue>
      cc:	90 91 e3 06 	lds	r25, 0x06E3	; 0x8006e3 <uartQueue+0x1>
      d0:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <xQueueReceive>
      d4:	81 30       	cpi	r24, 0x01	; 1
      d6:	99 f7       	brne	.-26     	; 0xbe <xPrint+0x14>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
      d8:	8b 85       	ldd	r24, Y+11	; 0x0b
      da:	4a e0       	ldi	r20, 0x0A	; 10
      dc:	be 01       	movw	r22, r28
      de:	6f 5f       	subi	r22, 0xFF	; 255
      e0:	7f 4f       	sbci	r23, 0xFF	; 255
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 89 0c 	call	0x1912	; 0x1912 <__itoa_ncheck>
		{
			itoa(strData.iValue,rxData,10);
			UART_TransmaitString((char *)rxData);
      e8:	ce 01       	movw	r24, r28
      ea:	01 96       	adiw	r24, 0x01	; 1
      ec:	0e 94 34 02 	call	0x468	; 0x468 <UART_TransmaitString>
			UART_TransmaitChar(' ');
      f0:	80 e2       	ldi	r24, 0x20	; 32
      f2:	0e 94 30 02 	call	0x460	; 0x460 <UART_TransmaitChar>
			UART_TransmaitString((char*)strData.iMeaning);
      f6:	ce 01       	movw	r24, r28
      f8:	0c 96       	adiw	r24, 0x0c	; 12
      fa:	0e 94 34 02 	call	0x468	; 0x468 <UART_TransmaitString>
      fe:	df cf       	rjmp	.-66     	; 0xbe <xPrint+0x14>

00000100 <main>:
	u8 iValue;
	char iMeaning[10];
}xData;

int main(void)
{
     100:	cf 93       	push	r28
     102:	df 93       	push	r29
     104:	cd b7       	in	r28, 0x3d	; 61
     106:	de b7       	in	r29, 0x3e	; 62
     108:	6e 97       	sbiw	r28, 0x1e	; 30
     10a:	0f b6       	in	r0, 0x3f	; 63
     10c:	f8 94       	cli
     10e:	de bf       	out	0x3e, r29	; 62
     110:	0f be       	out	0x3f, r0	; 63
     112:	cd bf       	out	0x3d, r28	; 61
	//DIO_Init();
	UART_ConfigTypes options = {9600,DoupleSpeed_Disable,CharacterSize_8,Stop_1Bit,Parity_Disable,TX_Enable,RX_Enable};
     114:	88 e0       	ldi	r24, 0x08	; 8
     116:	e1 e6       	ldi	r30, 0x61	; 97
     118:	f0 e0       	ldi	r31, 0x00	; 0
     11a:	de 01       	movw	r26, r28
     11c:	11 96       	adiw	r26, 0x01	; 1
     11e:	01 90       	ld	r0, Z+
     120:	0d 92       	st	X+, r0
     122:	8a 95       	dec	r24
     124:	e1 f7       	brne	.-8      	; 0x11e <main+0x1e>
	UART_Init(&options);
     126:	ce 01       	movw	r24, r28
     128:	01 96       	adiw	r24, 0x01	; 1
     12a:	0e 94 ba 01 	call	0x374	; 0x374 <UART_Init>

	uartQueue = xQueueCreate(3,sizeof(xData));
     12e:	40 e0       	ldi	r20, 0x00	; 0
     130:	6b e0       	ldi	r22, 0x0B	; 11
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	0e 94 0d 04 	call	0x81a	; 0x81a <xQueueGenericCreate>
     138:	90 93 e3 06 	sts	0x06E3, r25	; 0x8006e3 <uartQueue+0x1>
     13c:	80 93 e2 06 	sts	0x06E2, r24	; 0x8006e2 <uartQueue>
	
	xData txData[2] = {{100,"Oil\n\r"},{200,"Speed\n\r"}};
     140:	86 e1       	ldi	r24, 0x16	; 22
     142:	e9 e6       	ldi	r30, 0x69	; 105
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	de 01       	movw	r26, r28
     148:	19 96       	adiw	r26, 0x09	; 9
     14a:	01 90       	ld	r0, Z+
     14c:	0d 92       	st	X+, r0
     14e:	8a 95       	dec	r24
     150:	e1 f7       	brne	.-8      	; 0x14a <main+0x4a>
	
	xTaskCreate(ADCWriteQueue,"Task1",100,(void *)&txData[0],1,NULL);
     152:	e1 2c       	mov	r14, r1
     154:	f1 2c       	mov	r15, r1
     156:	01 e0       	ldi	r16, 0x01	; 1
     158:	9e 01       	movw	r18, r28
     15a:	27 5f       	subi	r18, 0xF7	; 247
     15c:	3f 4f       	sbci	r19, 0xFF	; 255
     15e:	44 e6       	ldi	r20, 0x64	; 100
     160:	50 e0       	ldi	r21, 0x00	; 0
     162:	6f e7       	ldi	r22, 0x7F	; 127
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	89 e4       	ldi	r24, 0x49	; 73
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 21 06 	call	0xc42	; 0xc42 <xTaskCreate>
	xTaskCreate(ADCWriteQueue,"Task2",100,(void *)&txData[1],1,NULL);
     16e:	9e 01       	movw	r18, r28
     170:	2c 5e       	subi	r18, 0xEC	; 236
     172:	3f 4f       	sbci	r19, 0xFF	; 255
     174:	44 e6       	ldi	r20, 0x64	; 100
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	65 e8       	ldi	r22, 0x85	; 133
     17a:	70 e0       	ldi	r23, 0x00	; 0
     17c:	89 e4       	ldi	r24, 0x49	; 73
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	0e 94 21 06 	call	0xc42	; 0xc42 <xTaskCreate>
	xTaskCreate(xPrint,"xPrint",100,NULL,2,NULL);
     184:	02 e0       	ldi	r16, 0x02	; 2
     186:	20 e0       	ldi	r18, 0x00	; 0
     188:	30 e0       	ldi	r19, 0x00	; 0
     18a:	44 e6       	ldi	r20, 0x64	; 100
     18c:	50 e0       	ldi	r21, 0x00	; 0
     18e:	6b e8       	ldi	r22, 0x8B	; 139
     190:	70 e0       	ldi	r23, 0x00	; 0
     192:	85 e5       	ldi	r24, 0x55	; 85
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	0e 94 21 06 	call	0xc42	; 0xc42 <xTaskCreate>
	
	vTaskStartScheduler();
     19a:	0e 94 4c 07 	call	0xe98	; 0xe98 <vTaskStartScheduler>
     19e:	ff cf       	rjmp	.-2      	; 0x19e <main+0x9e>

000001a0 <__vector_1>:
		ExtInt2FunPtr  = ExtIntCopyPtr;
		break;
	}
}

ISR(INT0_vect){
     1a0:	1f 92       	push	r1
     1a2:	0f 92       	push	r0
     1a4:	0f b6       	in	r0, 0x3f	; 63
     1a6:	0f 92       	push	r0
     1a8:	11 24       	eor	r1, r1
     1aa:	2f 93       	push	r18
     1ac:	3f 93       	push	r19
     1ae:	4f 93       	push	r20
     1b0:	5f 93       	push	r21
     1b2:	6f 93       	push	r22
     1b4:	7f 93       	push	r23
     1b6:	8f 93       	push	r24
     1b8:	9f 93       	push	r25
     1ba:	af 93       	push	r26
     1bc:	bf 93       	push	r27
     1be:	ef 93       	push	r30
     1c0:	ff 93       	push	r31
	ExtInt0FunPtr();
     1c2:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <ExtInt0FunPtr>
     1c6:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <ExtInt0FunPtr+0x1>
     1ca:	09 95       	icall
}
     1cc:	ff 91       	pop	r31
     1ce:	ef 91       	pop	r30
     1d0:	bf 91       	pop	r27
     1d2:	af 91       	pop	r26
     1d4:	9f 91       	pop	r25
     1d6:	8f 91       	pop	r24
     1d8:	7f 91       	pop	r23
     1da:	6f 91       	pop	r22
     1dc:	5f 91       	pop	r21
     1de:	4f 91       	pop	r20
     1e0:	3f 91       	pop	r19
     1e2:	2f 91       	pop	r18
     1e4:	0f 90       	pop	r0
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	0f 90       	pop	r0
     1ea:	1f 90       	pop	r1
     1ec:	18 95       	reti

000001ee <__vector_2>:

ISR(INT1_vect){
     1ee:	1f 92       	push	r1
     1f0:	0f 92       	push	r0
     1f2:	0f b6       	in	r0, 0x3f	; 63
     1f4:	0f 92       	push	r0
     1f6:	11 24       	eor	r1, r1
     1f8:	2f 93       	push	r18
     1fa:	3f 93       	push	r19
     1fc:	4f 93       	push	r20
     1fe:	5f 93       	push	r21
     200:	6f 93       	push	r22
     202:	7f 93       	push	r23
     204:	8f 93       	push	r24
     206:	9f 93       	push	r25
     208:	af 93       	push	r26
     20a:	bf 93       	push	r27
     20c:	ef 93       	push	r30
     20e:	ff 93       	push	r31
	ExtInt1FunPtr();
     210:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <ExtInt1FunPtr>
     214:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <ExtInt1FunPtr+0x1>
     218:	09 95       	icall
}
     21a:	ff 91       	pop	r31
     21c:	ef 91       	pop	r30
     21e:	bf 91       	pop	r27
     220:	af 91       	pop	r26
     222:	9f 91       	pop	r25
     224:	8f 91       	pop	r24
     226:	7f 91       	pop	r23
     228:	6f 91       	pop	r22
     22a:	5f 91       	pop	r21
     22c:	4f 91       	pop	r20
     22e:	3f 91       	pop	r19
     230:	2f 91       	pop	r18
     232:	0f 90       	pop	r0
     234:	0f be       	out	0x3f, r0	; 63
     236:	0f 90       	pop	r0
     238:	1f 90       	pop	r1
     23a:	18 95       	reti

0000023c <__vector_3>:

ISR(INT2_vect){
     23c:	1f 92       	push	r1
     23e:	0f 92       	push	r0
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	0f 92       	push	r0
     244:	11 24       	eor	r1, r1
     246:	2f 93       	push	r18
     248:	3f 93       	push	r19
     24a:	4f 93       	push	r20
     24c:	5f 93       	push	r21
     24e:	6f 93       	push	r22
     250:	7f 93       	push	r23
     252:	8f 93       	push	r24
     254:	9f 93       	push	r25
     256:	af 93       	push	r26
     258:	bf 93       	push	r27
     25a:	ef 93       	push	r30
     25c:	ff 93       	push	r31
	ExtInt2FunPtr();
     25e:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <__data_end>
     262:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <__data_end+0x1>
     266:	09 95       	icall
     268:	ff 91       	pop	r31
     26a:	ef 91       	pop	r30
     26c:	bf 91       	pop	r27
     26e:	af 91       	pop	r26
     270:	9f 91       	pop	r25
     272:	8f 91       	pop	r24
     274:	7f 91       	pop	r23
     276:	6f 91       	pop	r22
     278:	5f 91       	pop	r21
     27a:	4f 91       	pop	r20
     27c:	3f 91       	pop	r19
     27e:	2f 91       	pop	r18
     280:	0f 90       	pop	r0
     282:	0f be       	out	0x3f, r0	; 63
     284:	0f 90       	pop	r0
     286:	1f 90       	pop	r1
     288:	18 95       	reti

0000028a <__vector_9>:
		Timer1->ICR1_Reg = dataValue;
		break;
	}
}

ISR(TIMER1_OVF_vect){
     28a:	1f 92       	push	r1
     28c:	0f 92       	push	r0
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	0f 92       	push	r0
     292:	11 24       	eor	r1, r1
     294:	2f 93       	push	r18
     296:	3f 93       	push	r19
     298:	4f 93       	push	r20
     29a:	5f 93       	push	r21
     29c:	6f 93       	push	r22
     29e:	7f 93       	push	r23
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	af 93       	push	r26
     2a6:	bf 93       	push	r27
     2a8:	ef 93       	push	r30
     2aa:	ff 93       	push	r31
	TOVIntFunPtr();
     2ac:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <TOVIntFunPtr>
     2b0:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <TOVIntFunPtr+0x1>
     2b4:	09 95       	icall
}
     2b6:	ff 91       	pop	r31
     2b8:	ef 91       	pop	r30
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_8>:

//ISR(TIMER1_COMPA_vect){
//	OC1AIntFunPtr();
//}

ISR(TIMER1_COMPB_vect){
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	2f 93       	push	r18
     2e4:	3f 93       	push	r19
     2e6:	4f 93       	push	r20
     2e8:	5f 93       	push	r21
     2ea:	6f 93       	push	r22
     2ec:	7f 93       	push	r23
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	af 93       	push	r26
     2f4:	bf 93       	push	r27
     2f6:	ef 93       	push	r30
     2f8:	ff 93       	push	r31
	OC1BIntFunPtr();
     2fa:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <OC1BIntFunPtr>
     2fe:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <OC1BIntFunPtr+0x1>
     302:	09 95       	icall
}
     304:	ff 91       	pop	r31
     306:	ef 91       	pop	r30
     308:	bf 91       	pop	r27
     30a:	af 91       	pop	r26
     30c:	9f 91       	pop	r25
     30e:	8f 91       	pop	r24
     310:	7f 91       	pop	r23
     312:	6f 91       	pop	r22
     314:	5f 91       	pop	r21
     316:	4f 91       	pop	r20
     318:	3f 91       	pop	r19
     31a:	2f 91       	pop	r18
     31c:	0f 90       	pop	r0
     31e:	0f be       	out	0x3f, r0	; 63
     320:	0f 90       	pop	r0
     322:	1f 90       	pop	r1
     324:	18 95       	reti

00000326 <__vector_6>:

ISR(TIMER1_CAPT_vect){
     326:	1f 92       	push	r1
     328:	0f 92       	push	r0
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	0f 92       	push	r0
     32e:	11 24       	eor	r1, r1
     330:	2f 93       	push	r18
     332:	3f 93       	push	r19
     334:	4f 93       	push	r20
     336:	5f 93       	push	r21
     338:	6f 93       	push	r22
     33a:	7f 93       	push	r23
     33c:	8f 93       	push	r24
     33e:	9f 93       	push	r25
     340:	af 93       	push	r26
     342:	bf 93       	push	r27
     344:	ef 93       	push	r30
     346:	ff 93       	push	r31
	ICIntFunPtr();
     348:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <ICIntFunPtr>
     34c:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <ICIntFunPtr+0x1>
     350:	09 95       	icall
     352:	ff 91       	pop	r31
     354:	ef 91       	pop	r30
     356:	bf 91       	pop	r27
     358:	af 91       	pop	r26
     35a:	9f 91       	pop	r25
     35c:	8f 91       	pop	r24
     35e:	7f 91       	pop	r23
     360:	6f 91       	pop	r22
     362:	5f 91       	pop	r21
     364:	4f 91       	pop	r20
     366:	3f 91       	pop	r19
     368:	2f 91       	pop	r18
     36a:	0f 90       	pop	r0
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	0f 90       	pop	r0
     370:	1f 90       	pop	r1
     372:	18 95       	reti

00000374 <UART_Init>:
* Created: 10/21/2023 3:30:25 PM
*  Author: user
*/
#include "UART.h"

void UART_Init(UART_ConfigTypes * options){
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	ec 01       	movw	r28, r24
	u16 MyUBRR = 0;
	if (options->doupleSpeedStatus == DoupleSpeed_Enable)
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	81 30       	cpi	r24, 0x01	; 1
     37e:	e9 f4       	brne	.+58     	; 0x3ba <UART_Init+0x46>
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 1;
     380:	59 9a       	sbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(8UL*options->baudRate))-1;
     382:	28 81       	ld	r18, Y
     384:	39 81       	ldd	r19, Y+1	; 0x01
     386:	c9 01       	movw	r24, r18
     388:	a0 e0       	ldi	r26, 0x00	; 0
     38a:	b0 e0       	ldi	r27, 0x00	; 0
     38c:	88 0f       	add	r24, r24
     38e:	99 1f       	adc	r25, r25
     390:	aa 1f       	adc	r26, r26
     392:	bb 1f       	adc	r27, r27
     394:	88 0f       	add	r24, r24
     396:	99 1f       	adc	r25, r25
     398:	aa 1f       	adc	r26, r26
     39a:	bb 1f       	adc	r27, r27
     39c:	9c 01       	movw	r18, r24
     39e:	ad 01       	movw	r20, r26
     3a0:	22 0f       	add	r18, r18
     3a2:	33 1f       	adc	r19, r19
     3a4:	44 1f       	adc	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	74 e2       	ldi	r23, 0x24	; 36
     3ac:	84 ef       	ldi	r24, 0xF4	; 244
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__udivmodsi4>
     3b4:	21 50       	subi	r18, 0x01	; 1
     3b6:	31 09       	sbc	r19, r1
     3b8:	20 c0       	rjmp	.+64     	; 0x3fa <UART_Init+0x86>
	}
	else
	{
		UART->UCSRA_Reg.Bits.U2X_Bit = 0;
     3ba:	59 98       	cbi	0x0b, 1	; 11
		MyUBRR = (F_CPU/(16UL*options->baudRate))-1;
     3bc:	28 81       	ld	r18, Y
     3be:	39 81       	ldd	r19, Y+1	; 0x01
     3c0:	c9 01       	movw	r24, r18
     3c2:	a0 e0       	ldi	r26, 0x00	; 0
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	aa 1f       	adc	r26, r26
     3cc:	bb 1f       	adc	r27, r27
     3ce:	88 0f       	add	r24, r24
     3d0:	99 1f       	adc	r25, r25
     3d2:	aa 1f       	adc	r26, r26
     3d4:	bb 1f       	adc	r27, r27
     3d6:	9c 01       	movw	r18, r24
     3d8:	ad 01       	movw	r20, r26
     3da:	22 0f       	add	r18, r18
     3dc:	33 1f       	adc	r19, r19
     3de:	44 1f       	adc	r20, r20
     3e0:	55 1f       	adc	r21, r21
     3e2:	22 0f       	add	r18, r18
     3e4:	33 1f       	adc	r19, r19
     3e6:	44 1f       	adc	r20, r20
     3e8:	55 1f       	adc	r21, r21
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	74 e2       	ldi	r23, 0x24	; 36
     3ee:	84 ef       	ldi	r24, 0xF4	; 244
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <__udivmodsi4>
     3f6:	21 50       	subi	r18, 0x01	; 1
     3f8:	31 09       	sbc	r19, r1
	}
	UART->UBRRL_Reg = MyUBRR;
     3fa:	29 b9       	out	0x09, r18	; 9
	UART->UCSRC_UBRRH_Reg.AllRegister = MyUBRR>>8;
     3fc:	30 bd       	out	0x20, r19	; 32
	
	if (options->characterSizeStatus == CharacterSize_9)
     3fe:	9b 81       	ldd	r25, Y+3	; 0x03
     400:	97 30       	cpi	r25, 0x07	; 7
     402:	29 f4       	brne	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	{
		UART->UCSRB_Reg.Bits.UCSZ2_Bit = 1;
     404:	52 9a       	sbi	0x0a, 2	; 10
		UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | (3<<1);
     406:	80 b5       	in	r24, 0x20	; 32
     408:	86 68       	ori	r24, 0x86	; 134
     40a:	80 bd       	out	0x20, r24	; 32
     40c:	05 c0       	rjmp	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
	}
	else
	{
		UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | options->characterSizeStatus<<1;
     40e:	80 b5       	in	r24, 0x20	; 32
     410:	99 0f       	add	r25, r25
     412:	80 68       	ori	r24, 0x80	; 128
     414:	89 2b       	or	r24, r25
     416:	80 bd       	out	0x20, r24	; 32
	}
	
	UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | options->parityStatus<<4;
     418:	20 b5       	in	r18, 0x20	; 32
     41a:	9d 81       	ldd	r25, Y+5	; 0x05
     41c:	30 e1       	ldi	r19, 0x10	; 16
     41e:	93 9f       	mul	r25, r19
     420:	c0 01       	movw	r24, r0
     422:	11 24       	eor	r1, r1
     424:	92 2f       	mov	r25, r18
     426:	90 68       	ori	r25, 0x80	; 128
     428:	89 2b       	or	r24, r25
     42a:	80 bd       	out	0x20, r24	; 32
	UART->UCSRC_UBRRH_Reg.AllRegister |= UCSRC_SelectEnable | options->stopBitsStatus<<3;
     42c:	80 b5       	in	r24, 0x20	; 32
     42e:	9c 81       	ldd	r25, Y+4	; 0x04
     430:	99 0f       	add	r25, r25
     432:	99 0f       	add	r25, r25
     434:	99 0f       	add	r25, r25
     436:	80 68       	ori	r24, 0x80	; 128
     438:	89 2b       	or	r24, r25
     43a:	80 bd       	out	0x20, r24	; 32
	UART->UCSRB_Reg.AllRegister |= options->txStatus<<3;
     43c:	9a b1       	in	r25, 0x0a	; 10
     43e:	8e 81       	ldd	r24, Y+6	; 0x06
     440:	88 0f       	add	r24, r24
     442:	88 0f       	add	r24, r24
     444:	88 0f       	add	r24, r24
     446:	89 2b       	or	r24, r25
     448:	8a b9       	out	0x0a, r24	; 10
	UART->UCSRB_Reg.AllRegister |= options->rxStatus<<4;
     44a:	2a b1       	in	r18, 0x0a	; 10
     44c:	9f 81       	ldd	r25, Y+7	; 0x07
     44e:	30 e1       	ldi	r19, 0x10	; 16
     450:	93 9f       	mul	r25, r19
     452:	c0 01       	movw	r24, r0
     454:	11 24       	eor	r1, r1
     456:	82 2b       	or	r24, r18
     458:	8a b9       	out	0x0a, r24	; 10
}
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <UART_TransmaitChar>:
void UART_TransmaitChar(u8 data){
	while (UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
     460:	5d 9b       	sbis	0x0b, 5	; 11
     462:	fe cf       	rjmp	.-4      	; 0x460 <UART_TransmaitChar>
	UART->UDR_Reg = data;
     464:	8c b9       	out	0x0c, r24	; 12
     466:	08 95       	ret

00000468 <UART_TransmaitString>:
}
void UART_TransmaitString(s8 * string){
     468:	0f 93       	push	r16
     46a:	1f 93       	push	r17
     46c:	cf 93       	push	r28
     46e:	fc 01       	movw	r30, r24
	u8 i=0;
	while(string[i] != '\0'){
     470:	80 81       	ld	r24, Z
     472:	88 23       	and	r24, r24
     474:	59 f0       	breq	.+22     	; 0x48c <UART_TransmaitString+0x24>
     476:	8f 01       	movw	r16, r30
     478:	c0 e0       	ldi	r28, 0x00	; 0
		UART_TransmaitChar(string[i]);
     47a:	0e 94 30 02 	call	0x460	; 0x460 <UART_TransmaitChar>
		i++;
     47e:	cf 5f       	subi	r28, 0xFF	; 255
	while (UART->UCSRA_Reg.Bits.UDRE_Bit == 0);
	UART->UDR_Reg = data;
}
void UART_TransmaitString(s8 * string){
	u8 i=0;
	while(string[i] != '\0'){
     480:	f8 01       	movw	r30, r16
     482:	ec 0f       	add	r30, r28
     484:	f1 1d       	adc	r31, r1
     486:	80 81       	ld	r24, Z
     488:	81 11       	cpse	r24, r1
     48a:	f7 cf       	rjmp	.-18     	; 0x47a <UART_TransmaitString+0x12>
		UART_TransmaitChar(string[i]);
		i++;
	}
}
     48c:	cf 91       	pop	r28
     48e:	1f 91       	pop	r17
     490:	0f 91       	pop	r16
     492:	08 95       	ret

00000494 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
     49a:	0e 94 78 07 	call	0xef0	; 0xef0 <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     49e:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <pucAlignedHeap.2111>
     4a2:	90 91 a5 00 	lds	r25, 0x00A5	; 0x8000a5 <pucAlignedHeap.2111+0x1>
     4a6:	89 2b       	or	r24, r25
     4a8:	31 f4       	brne	.+12     	; 0x4b6 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     4aa:	88 ea       	ldi	r24, 0xA8	; 168
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 a5 00 	sts	0x00A5, r25	; 0x8000a5 <pucAlignedHeap.2111+0x1>
     4b2:	80 93 a4 00 	sts	0x00A4, r24	; 0x8000a4 <pucAlignedHeap.2111>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     4b6:	20 97       	sbiw	r28, 0x00	; 0
     4b8:	c9 f0       	breq	.+50     	; 0x4ec <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     4ba:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <xNextFreeByte>
     4be:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <xNextFreeByte+0x1>
     4c2:	9e 01       	movw	r18, r28
     4c4:	28 0f       	add	r18, r24
     4c6:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     4c8:	2b 3d       	cpi	r18, 0xDB	; 219
     4ca:	45 e0       	ldi	r20, 0x05	; 5
     4cc:	34 07       	cpc	r19, r20
     4ce:	88 f4       	brcc	.+34     	; 0x4f2 <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     4d0:	82 17       	cp	r24, r18
     4d2:	93 07       	cpc	r25, r19
     4d4:	88 f4       	brcc	.+34     	; 0x4f8 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     4d6:	c0 91 a4 00 	lds	r28, 0x00A4	; 0x8000a4 <pucAlignedHeap.2111>
     4da:	d0 91 a5 00 	lds	r29, 0x00A5	; 0x8000a5 <pucAlignedHeap.2111+0x1>
     4de:	c8 0f       	add	r28, r24
     4e0:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     4e2:	30 93 a7 00 	sts	0x00A7, r19	; 0x8000a7 <xNextFreeByte+0x1>
     4e6:	20 93 a6 00 	sts	0x00A6, r18	; 0x8000a6 <xNextFreeByte>
     4ea:	08 c0       	rjmp	.+16     	; 0x4fc <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     4ec:	c0 e0       	ldi	r28, 0x00	; 0
     4ee:	d0 e0       	ldi	r29, 0x00	; 0
     4f0:	05 c0       	rjmp	.+10     	; 0x4fc <pvPortMalloc+0x68>
     4f2:	c0 e0       	ldi	r28, 0x00	; 0
     4f4:	d0 e0       	ldi	r29, 0x00	; 0
     4f6:	02 c0       	rjmp	.+4      	; 0x4fc <pvPortMalloc+0x68>
     4f8:	c0 e0       	ldi	r28, 0x00	; 0
     4fa:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4fc:	0e 94 9d 08 	call	0x113a	; 0x113a <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     500:	ce 01       	movw	r24, r28
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	08 95       	ret

00000508 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     508:	08 95       	ret

0000050a <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     50a:	fc 01       	movw	r30, r24
     50c:	03 96       	adiw	r24, 0x03	; 3
     50e:	92 83       	std	Z+2, r25	; 0x02
     510:	81 83       	std	Z+1, r24	; 0x01
     512:	2f ef       	ldi	r18, 0xFF	; 255
     514:	3f ef       	ldi	r19, 0xFF	; 255
     516:	34 83       	std	Z+4, r19	; 0x04
     518:	23 83       	std	Z+3, r18	; 0x03
     51a:	96 83       	std	Z+6, r25	; 0x06
     51c:	85 83       	std	Z+5, r24	; 0x05
     51e:	90 87       	std	Z+8, r25	; 0x08
     520:	87 83       	std	Z+7, r24	; 0x07
     522:	10 82       	st	Z, r1
     524:	08 95       	ret

00000526 <vListInitialiseItem>:
     526:	fc 01       	movw	r30, r24
     528:	11 86       	std	Z+9, r1	; 0x09
     52a:	10 86       	std	Z+8, r1	; 0x08
     52c:	08 95       	ret

0000052e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     52e:	cf 93       	push	r28
     530:	df 93       	push	r29
     532:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     534:	48 81       	ld	r20, Y
     536:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     538:	4f 3f       	cpi	r20, 0xFF	; 255
     53a:	2f ef       	ldi	r18, 0xFF	; 255
     53c:	52 07       	cpc	r21, r18
     53e:	21 f4       	brne	.+8      	; 0x548 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     540:	fc 01       	movw	r30, r24
     542:	a7 81       	ldd	r26, Z+7	; 0x07
     544:	b0 85       	ldd	r27, Z+8	; 0x08
     546:	0d c0       	rjmp	.+26     	; 0x562 <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     548:	dc 01       	movw	r26, r24
     54a:	13 96       	adiw	r26, 0x03	; 3
     54c:	01 c0       	rjmp	.+2      	; 0x550 <vListInsert+0x22>
     54e:	df 01       	movw	r26, r30
     550:	12 96       	adiw	r26, 0x02	; 2
     552:	ed 91       	ld	r30, X+
     554:	fc 91       	ld	r31, X
     556:	13 97       	sbiw	r26, 0x03	; 3
     558:	20 81       	ld	r18, Z
     55a:	31 81       	ldd	r19, Z+1	; 0x01
     55c:	42 17       	cp	r20, r18
     55e:	53 07       	cpc	r21, r19
     560:	b0 f7       	brcc	.-20     	; 0x54e <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     562:	12 96       	adiw	r26, 0x02	; 2
     564:	ed 91       	ld	r30, X+
     566:	fc 91       	ld	r31, X
     568:	13 97       	sbiw	r26, 0x03	; 3
     56a:	fb 83       	std	Y+3, r31	; 0x03
     56c:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     56e:	d5 83       	std	Z+5, r29	; 0x05
     570:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     572:	bd 83       	std	Y+5, r27	; 0x05
     574:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     576:	13 96       	adiw	r26, 0x03	; 3
     578:	dc 93       	st	X, r29
     57a:	ce 93       	st	-X, r28
     57c:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     57e:	99 87       	std	Y+9, r25	; 0x09
     580:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     582:	fc 01       	movw	r30, r24
     584:	20 81       	ld	r18, Z
     586:	2f 5f       	subi	r18, 0xFF	; 255
     588:	20 83       	st	Z, r18
}
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     596:	a0 85       	ldd	r26, Z+8	; 0x08
     598:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     59a:	c2 81       	ldd	r28, Z+2	; 0x02
     59c:	d3 81       	ldd	r29, Z+3	; 0x03
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	95 81       	ldd	r25, Z+5	; 0x05
     5a2:	9d 83       	std	Y+5, r25	; 0x05
     5a4:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     5a6:	c4 81       	ldd	r28, Z+4	; 0x04
     5a8:	d5 81       	ldd	r29, Z+5	; 0x05
     5aa:	82 81       	ldd	r24, Z+2	; 0x02
     5ac:	93 81       	ldd	r25, Z+3	; 0x03
     5ae:	9b 83       	std	Y+3, r25	; 0x03
     5b0:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     5b2:	11 96       	adiw	r26, 0x01	; 1
     5b4:	8d 91       	ld	r24, X+
     5b6:	9c 91       	ld	r25, X
     5b8:	12 97       	sbiw	r26, 0x02	; 2
     5ba:	e8 17       	cp	r30, r24
     5bc:	f9 07       	cpc	r31, r25
     5be:	31 f4       	brne	.+12     	; 0x5cc <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     5c0:	84 81       	ldd	r24, Z+4	; 0x04
     5c2:	95 81       	ldd	r25, Z+5	; 0x05
     5c4:	12 96       	adiw	r26, 0x02	; 2
     5c6:	9c 93       	st	X, r25
     5c8:	8e 93       	st	-X, r24
     5ca:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     5cc:	11 86       	std	Z+9, r1	; 0x09
     5ce:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     5d0:	8c 91       	ld	r24, X
     5d2:	81 50       	subi	r24, 0x01	; 1
     5d4:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     5d6:	8c 91       	ld	r24, X
}
     5d8:	df 91       	pop	r29
     5da:	cf 91       	pop	r28
     5dc:	08 95       	ret

000005de <prvIsQueueEmpty>:
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
}
     5de:	0f b6       	in	r0, 0x3f	; 63
     5e0:	f8 94       	cli
     5e2:	0f 92       	push	r0
     5e4:	fc 01       	movw	r30, r24
     5e6:	92 8d       	ldd	r25, Z+26	; 0x1a
     5e8:	0f 90       	pop	r0
     5ea:	0f be       	out	0x3f, r0	; 63
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	91 11       	cpse	r25, r1
     5f0:	80 e0       	ldi	r24, 0x00	; 0
     5f2:	08 95       	ret

000005f4 <prvCopyDataToQueue>:
     5f4:	0f 93       	push	r16
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	ec 01       	movw	r28, r24
     5fe:	04 2f       	mov	r16, r20
     600:	1a 8d       	ldd	r17, Y+26	; 0x1a
     602:	4c 8d       	ldd	r20, Y+28	; 0x1c
     604:	44 23       	and	r20, r20
     606:	b9 f1       	breq	.+110    	; 0x676 <prvCopyDataToQueue+0x82>
     608:	01 11       	cpse	r16, r1
     60a:	16 c0       	rjmp	.+44     	; 0x638 <prvCopyDataToQueue+0x44>
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	9b 81       	ldd	r25, Y+3	; 0x03
     612:	0e 94 80 0c 	call	0x1900	; 0x1900 <memcpy>
     616:	2c 8d       	ldd	r18, Y+28	; 0x1c
     618:	8a 81       	ldd	r24, Y+2	; 0x02
     61a:	9b 81       	ldd	r25, Y+3	; 0x03
     61c:	82 0f       	add	r24, r18
     61e:	91 1d       	adc	r25, r1
     620:	9b 83       	std	Y+3, r25	; 0x03
     622:	8a 83       	std	Y+2, r24	; 0x02
     624:	2c 81       	ldd	r18, Y+4	; 0x04
     626:	3d 81       	ldd	r19, Y+5	; 0x05
     628:	82 17       	cp	r24, r18
     62a:	93 07       	cpc	r25, r19
     62c:	20 f1       	brcs	.+72     	; 0x676 <prvCopyDataToQueue+0x82>
     62e:	88 81       	ld	r24, Y
     630:	99 81       	ldd	r25, Y+1	; 0x01
     632:	9b 83       	std	Y+3, r25	; 0x03
     634:	8a 83       	std	Y+2, r24	; 0x02
     636:	1f c0       	rjmp	.+62     	; 0x676 <prvCopyDataToQueue+0x82>
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	8e 81       	ldd	r24, Y+6	; 0x06
     63c:	9f 81       	ldd	r25, Y+7	; 0x07
     63e:	0e 94 80 0c 	call	0x1900	; 0x1900 <memcpy>
     642:	8c 8d       	ldd	r24, Y+28	; 0x1c
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	91 95       	neg	r25
     648:	81 95       	neg	r24
     64a:	91 09       	sbc	r25, r1
     64c:	2e 81       	ldd	r18, Y+6	; 0x06
     64e:	3f 81       	ldd	r19, Y+7	; 0x07
     650:	28 0f       	add	r18, r24
     652:	39 1f       	adc	r19, r25
     654:	3f 83       	std	Y+7, r19	; 0x07
     656:	2e 83       	std	Y+6, r18	; 0x06
     658:	48 81       	ld	r20, Y
     65a:	59 81       	ldd	r21, Y+1	; 0x01
     65c:	24 17       	cp	r18, r20
     65e:	35 07       	cpc	r19, r21
     660:	30 f4       	brcc	.+12     	; 0x66e <prvCopyDataToQueue+0x7a>
     662:	2c 81       	ldd	r18, Y+4	; 0x04
     664:	3d 81       	ldd	r19, Y+5	; 0x05
     666:	82 0f       	add	r24, r18
     668:	93 1f       	adc	r25, r19
     66a:	9f 83       	std	Y+7, r25	; 0x07
     66c:	8e 83       	std	Y+6, r24	; 0x06
     66e:	02 30       	cpi	r16, 0x02	; 2
     670:	11 f4       	brne	.+4      	; 0x676 <prvCopyDataToQueue+0x82>
     672:	11 11       	cpse	r17, r1
     674:	11 50       	subi	r17, 0x01	; 1
     676:	1f 5f       	subi	r17, 0xFF	; 255
     678:	1a 8f       	std	Y+26, r17	; 0x1a
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	1f 91       	pop	r17
     682:	0f 91       	pop	r16
     684:	08 95       	ret

00000686 <prvCopyDataFromQueue>:
     686:	fc 01       	movw	r30, r24
     688:	44 8d       	ldd	r20, Z+28	; 0x1c
     68a:	44 23       	and	r20, r20
     68c:	a9 f0       	breq	.+42     	; 0x6b8 <prvCopyDataFromQueue+0x32>
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	26 81       	ldd	r18, Z+6	; 0x06
     692:	37 81       	ldd	r19, Z+7	; 0x07
     694:	24 0f       	add	r18, r20
     696:	35 1f       	adc	r19, r21
     698:	37 83       	std	Z+7, r19	; 0x07
     69a:	26 83       	std	Z+6, r18	; 0x06
     69c:	84 81       	ldd	r24, Z+4	; 0x04
     69e:	95 81       	ldd	r25, Z+5	; 0x05
     6a0:	28 17       	cp	r18, r24
     6a2:	39 07       	cpc	r19, r25
     6a4:	20 f0       	brcs	.+8      	; 0x6ae <prvCopyDataFromQueue+0x28>
     6a6:	80 81       	ld	r24, Z
     6a8:	91 81       	ldd	r25, Z+1	; 0x01
     6aa:	97 83       	std	Z+7, r25	; 0x07
     6ac:	86 83       	std	Z+6, r24	; 0x06
     6ae:	cb 01       	movw	r24, r22
     6b0:	66 81       	ldd	r22, Z+6	; 0x06
     6b2:	77 81       	ldd	r23, Z+7	; 0x07
     6b4:	0e 94 80 0c 	call	0x1900	; 0x1900 <memcpy>
     6b8:	08 95       	ret

000006ba <prvUnlockQueue>:
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	0f 93       	push	r16
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	8c 01       	movw	r16, r24
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	0f 92       	push	r0
     6cc:	fc 01       	movw	r30, r24
     6ce:	c6 8d       	ldd	r28, Z+30	; 0x1e
     6d0:	1c 16       	cp	r1, r28
     6d2:	ac f4       	brge	.+42     	; 0x6fe <prvUnlockQueue+0x44>
     6d4:	81 89       	ldd	r24, Z+17	; 0x11
     6d6:	81 11       	cpse	r24, r1
     6d8:	06 c0       	rjmp	.+12     	; 0x6e6 <prvUnlockQueue+0x2c>
     6da:	11 c0       	rjmp	.+34     	; 0x6fe <prvUnlockQueue+0x44>
     6dc:	f8 01       	movw	r30, r16
     6de:	81 89       	ldd	r24, Z+17	; 0x11
     6e0:	81 11       	cpse	r24, r1
     6e2:	05 c0       	rjmp	.+10     	; 0x6ee <prvUnlockQueue+0x34>
     6e4:	0c c0       	rjmp	.+24     	; 0x6fe <prvUnlockQueue+0x44>
     6e6:	78 01       	movw	r14, r16
     6e8:	f1 e1       	ldi	r31, 0x11	; 17
     6ea:	ef 0e       	add	r14, r31
     6ec:	f1 1c       	adc	r15, r1
     6ee:	c7 01       	movw	r24, r14
     6f0:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <xTaskRemoveFromEventList>
     6f4:	81 11       	cpse	r24, r1
     6f6:	0e 94 ed 0a 	call	0x15da	; 0x15da <vTaskMissedYield>
     6fa:	c1 50       	subi	r28, 0x01	; 1
     6fc:	79 f7       	brne	.-34     	; 0x6dc <prvUnlockQueue+0x22>
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	f8 01       	movw	r30, r16
     702:	86 8f       	std	Z+30, r24	; 0x1e
     704:	0f 90       	pop	r0
     706:	0f be       	out	0x3f, r0	; 63
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	0f 92       	push	r0
     70e:	c5 8d       	ldd	r28, Z+29	; 0x1d
     710:	1c 16       	cp	r1, r28
     712:	ac f4       	brge	.+42     	; 0x73e <prvUnlockQueue+0x84>
     714:	80 85       	ldd	r24, Z+8	; 0x08
     716:	81 11       	cpse	r24, r1
     718:	06 c0       	rjmp	.+12     	; 0x726 <prvUnlockQueue+0x6c>
     71a:	11 c0       	rjmp	.+34     	; 0x73e <prvUnlockQueue+0x84>
     71c:	f8 01       	movw	r30, r16
     71e:	80 85       	ldd	r24, Z+8	; 0x08
     720:	81 11       	cpse	r24, r1
     722:	05 c0       	rjmp	.+10     	; 0x72e <prvUnlockQueue+0x74>
     724:	0c c0       	rjmp	.+24     	; 0x73e <prvUnlockQueue+0x84>
     726:	78 01       	movw	r14, r16
     728:	f8 e0       	ldi	r31, 0x08	; 8
     72a:	ef 0e       	add	r14, r31
     72c:	f1 1c       	adc	r15, r1
     72e:	c7 01       	movw	r24, r14
     730:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <xTaskRemoveFromEventList>
     734:	81 11       	cpse	r24, r1
     736:	0e 94 ed 0a 	call	0x15da	; 0x15da <vTaskMissedYield>
     73a:	c1 50       	subi	r28, 0x01	; 1
     73c:	79 f7       	brne	.-34     	; 0x71c <prvUnlockQueue+0x62>
     73e:	8f ef       	ldi	r24, 0xFF	; 255
     740:	f8 01       	movw	r30, r16
     742:	85 8f       	std	Z+29, r24	; 0x1d
     744:	0f 90       	pop	r0
     746:	0f be       	out	0x3f, r0	; 63
     748:	cf 91       	pop	r28
     74a:	1f 91       	pop	r17
     74c:	0f 91       	pop	r16
     74e:	ff 90       	pop	r15
     750:	ef 90       	pop	r14
     752:	08 95       	ret

00000754 <xQueueGenericReset>:
     754:	ef 92       	push	r14
     756:	ff 92       	push	r15
     758:	0f 93       	push	r16
     75a:	1f 93       	push	r17
     75c:	cf 93       	push	r28
     75e:	df 93       	push	r29
     760:	fc 01       	movw	r30, r24
     762:	36 2f       	mov	r19, r22
     764:	89 2b       	or	r24, r25
     766:	09 f4       	brne	.+2      	; 0x76a <xQueueGenericReset+0x16>
     768:	4c c0       	rjmp	.+152    	; 0x802 <xQueueGenericReset+0xae>
     76a:	23 8d       	ldd	r18, Z+27	; 0x1b
     76c:	22 23       	and	r18, r18
     76e:	09 f4       	brne	.+2      	; 0x772 <xQueueGenericReset+0x1e>
     770:	4a c0       	rjmp	.+148    	; 0x806 <xQueueGenericReset+0xb2>
     772:	02 2f       	mov	r16, r18
     774:	10 e0       	ldi	r17, 0x00	; 0
     776:	44 8d       	ldd	r20, Z+28	; 0x1c
     778:	e4 2e       	mov	r14, r20
     77a:	f1 2c       	mov	r15, r1
     77c:	8f ef       	ldi	r24, 0xFF	; 255
     77e:	9f ef       	ldi	r25, 0xFF	; 255
     780:	b8 01       	movw	r22, r16
     782:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__udivmodhi4>
     786:	6e 15       	cp	r22, r14
     788:	7f 05       	cpc	r23, r15
     78a:	08 f4       	brcc	.+2      	; 0x78e <xQueueGenericReset+0x3a>
     78c:	3e c0       	rjmp	.+124    	; 0x80a <xQueueGenericReset+0xb6>
     78e:	ef 01       	movw	r28, r30
     790:	0f b6       	in	r0, 0x3f	; 63
     792:	f8 94       	cli
     794:	0f 92       	push	r0
     796:	60 81       	ld	r22, Z
     798:	71 81       	ldd	r23, Z+1	; 0x01
     79a:	cb 01       	movw	r24, r22
     79c:	24 9f       	mul	r18, r20
     79e:	80 0d       	add	r24, r0
     7a0:	91 1d       	adc	r25, r1
     7a2:	11 24       	eor	r1, r1
     7a4:	95 83       	std	Z+5, r25	; 0x05
     7a6:	84 83       	std	Z+4, r24	; 0x04
     7a8:	12 8e       	std	Z+26, r1	; 0x1a
     7aa:	73 83       	std	Z+3, r23	; 0x03
     7ac:	62 83       	std	Z+2, r22	; 0x02
     7ae:	01 50       	subi	r16, 0x01	; 1
     7b0:	11 09       	sbc	r17, r1
     7b2:	0e 9d       	mul	r16, r14
     7b4:	c0 01       	movw	r24, r0
     7b6:	0f 9d       	mul	r16, r15
     7b8:	90 0d       	add	r25, r0
     7ba:	1e 9d       	mul	r17, r14
     7bc:	90 0d       	add	r25, r0
     7be:	11 24       	eor	r1, r1
     7c0:	86 0f       	add	r24, r22
     7c2:	97 1f       	adc	r25, r23
     7c4:	97 83       	std	Z+7, r25	; 0x07
     7c6:	86 83       	std	Z+6, r24	; 0x06
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	85 8f       	std	Z+29, r24	; 0x1d
     7cc:	86 8f       	std	Z+30, r24	; 0x1e
     7ce:	31 11       	cpse	r19, r1
     7d0:	0c c0       	rjmp	.+24     	; 0x7ea <xQueueGenericReset+0x96>
     7d2:	80 85       	ldd	r24, Z+8	; 0x08
     7d4:	88 23       	and	r24, r24
     7d6:	89 f0       	breq	.+34     	; 0x7fa <xQueueGenericReset+0xa6>
     7d8:	cf 01       	movw	r24, r30
     7da:	08 96       	adiw	r24, 0x08	; 8
     7dc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <xTaskRemoveFromEventList>
     7e0:	88 23       	and	r24, r24
     7e2:	59 f0       	breq	.+22     	; 0x7fa <xQueueGenericReset+0xa6>
     7e4:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
     7e8:	08 c0       	rjmp	.+16     	; 0x7fa <xQueueGenericReset+0xa6>
     7ea:	cf 01       	movw	r24, r30
     7ec:	08 96       	adiw	r24, 0x08	; 8
     7ee:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     7f2:	ce 01       	movw	r24, r28
     7f4:	41 96       	adiw	r24, 0x11	; 17
     7f6:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     7fa:	0f 90       	pop	r0
     7fc:	0f be       	out	0x3f, r0	; 63
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	05 c0       	rjmp	.+10     	; 0x80c <xQueueGenericReset+0xb8>
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	03 c0       	rjmp	.+6      	; 0x80c <xQueueGenericReset+0xb8>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	01 c0       	rjmp	.+2      	; 0x80c <xQueueGenericReset+0xb8>
     80a:	80 e0       	ldi	r24, 0x00	; 0
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	ff 90       	pop	r15
     816:	ef 90       	pop	r14
     818:	08 95       	ret

0000081a <xQueueGenericCreate>:
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	28 2f       	mov	r18, r24
     824:	36 2f       	mov	r19, r22
     826:	88 23       	and	r24, r24
     828:	61 f1       	breq	.+88     	; 0x882 <__stack+0x23>
     82a:	68 2f       	mov	r22, r24
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__udivmodhi4>
     836:	83 2f       	mov	r24, r19
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	68 17       	cp	r22, r24
     83c:	79 07       	cpc	r23, r25
     83e:	20 f1       	brcs	.+72     	; 0x888 <__stack+0x29>
     840:	23 9f       	mul	r18, r19
     842:	c0 01       	movw	r24, r0
     844:	11 24       	eor	r1, r1
     846:	81 3e       	cpi	r24, 0xE1	; 225
     848:	4f ef       	ldi	r20, 0xFF	; 255
     84a:	94 07       	cpc	r25, r20
     84c:	00 f5       	brcc	.+64     	; 0x88e <__stack+0x2f>
     84e:	d3 2f       	mov	r29, r19
     850:	c2 2f       	mov	r28, r18
     852:	4f 96       	adiw	r24, 0x1f	; 31
     854:	0e 94 4a 02 	call	0x494	; 0x494 <pvPortMalloc>
     858:	8c 01       	movw	r16, r24
     85a:	00 97       	sbiw	r24, 0x00	; 0
     85c:	d1 f0       	breq	.+52     	; 0x892 <__stack+0x33>
     85e:	d1 11       	cpse	r29, r1
     860:	04 c0       	rjmp	.+8      	; 0x86a <__stack+0xb>
     862:	fc 01       	movw	r30, r24
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
     868:	04 c0       	rjmp	.+8      	; 0x872 <__stack+0x13>
     86a:	4f 96       	adiw	r24, 0x1f	; 31
     86c:	f8 01       	movw	r30, r16
     86e:	91 83       	std	Z+1, r25	; 0x01
     870:	80 83       	st	Z, r24
     872:	f8 01       	movw	r30, r16
     874:	c3 8f       	std	Z+27, r28	; 0x1b
     876:	d4 8f       	std	Z+28, r29	; 0x1c
     878:	61 e0       	ldi	r22, 0x01	; 1
     87a:	c8 01       	movw	r24, r16
     87c:	0e 94 aa 03 	call	0x754	; 0x754 <xQueueGenericReset>
     880:	08 c0       	rjmp	.+16     	; 0x892 <__stack+0x33>
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	10 e0       	ldi	r17, 0x00	; 0
     886:	05 c0       	rjmp	.+10     	; 0x892 <__stack+0x33>
     888:	00 e0       	ldi	r16, 0x00	; 0
     88a:	10 e0       	ldi	r17, 0x00	; 0
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	00 e0       	ldi	r16, 0x00	; 0
     890:	10 e0       	ldi	r17, 0x00	; 0
     892:	c8 01       	movw	r24, r16
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <xQueueGenericSend>:
     89e:	9f 92       	push	r9
     8a0:	af 92       	push	r10
     8a2:	bf 92       	push	r11
     8a4:	cf 92       	push	r12
     8a6:	df 92       	push	r13
     8a8:	ef 92       	push	r14
     8aa:	ff 92       	push	r15
     8ac:	0f 93       	push	r16
     8ae:	1f 93       	push	r17
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	00 d0       	rcall	.+0      	; 0x8b6 <xQueueGenericSend+0x18>
     8b6:	00 d0       	rcall	.+0      	; 0x8b8 <xQueueGenericSend+0x1a>
     8b8:	1f 92       	push	r1
     8ba:	cd b7       	in	r28, 0x3d	; 61
     8bc:	de b7       	in	r29, 0x3e	; 62
     8be:	8c 01       	movw	r16, r24
     8c0:	6b 01       	movw	r12, r22
     8c2:	5d 83       	std	Y+5, r21	; 0x05
     8c4:	4c 83       	std	Y+4, r20	; 0x04
     8c6:	a2 2e       	mov	r10, r18
     8c8:	b1 2c       	mov	r11, r1
     8ca:	99 24       	eor	r9, r9
     8cc:	93 94       	inc	r9
     8ce:	7c 01       	movw	r14, r24
     8d0:	88 e0       	ldi	r24, 0x08	; 8
     8d2:	e8 0e       	add	r14, r24
     8d4:	f1 1c       	adc	r15, r1
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	0f 92       	push	r0
     8dc:	f8 01       	movw	r30, r16
     8de:	92 8d       	ldd	r25, Z+26	; 0x1a
     8e0:	83 8d       	ldd	r24, Z+27	; 0x1b
     8e2:	98 17       	cp	r25, r24
     8e4:	18 f0       	brcs	.+6      	; 0x8ec <xQueueGenericSend+0x4e>
     8e6:	f2 e0       	ldi	r31, 0x02	; 2
     8e8:	af 12       	cpse	r10, r31
     8ea:	19 c0       	rjmp	.+50     	; 0x91e <xQueueGenericSend+0x80>
     8ec:	4a 2d       	mov	r20, r10
     8ee:	b6 01       	movw	r22, r12
     8f0:	c8 01       	movw	r24, r16
     8f2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <prvCopyDataToQueue>
     8f6:	f8 01       	movw	r30, r16
     8f8:	91 89       	ldd	r25, Z+17	; 0x11
     8fa:	99 23       	and	r25, r25
     8fc:	49 f0       	breq	.+18     	; 0x910 <xQueueGenericSend+0x72>
     8fe:	c8 01       	movw	r24, r16
     900:	41 96       	adiw	r24, 0x11	; 17
     902:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <xTaskRemoveFromEventList>
     906:	88 23       	and	r24, r24
     908:	31 f0       	breq	.+12     	; 0x916 <xQueueGenericSend+0x78>
     90a:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
     90e:	03 c0       	rjmp	.+6      	; 0x916 <xQueueGenericSend+0x78>
     910:	81 11       	cpse	r24, r1
     912:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	81 e0       	ldi	r24, 0x01	; 1
     91c:	50 c0       	rjmp	.+160    	; 0x9be <xQueueGenericSend+0x120>
     91e:	8c 81       	ldd	r24, Y+4	; 0x04
     920:	9d 81       	ldd	r25, Y+5	; 0x05
     922:	89 2b       	or	r24, r25
     924:	21 f4       	brne	.+8      	; 0x92e <xQueueGenericSend+0x90>
     926:	0f 90       	pop	r0
     928:	0f be       	out	0x3f, r0	; 63
     92a:	80 e0       	ldi	r24, 0x00	; 0
     92c:	48 c0       	rjmp	.+144    	; 0x9be <xQueueGenericSend+0x120>
     92e:	b1 10       	cpse	r11, r1
     930:	05 c0       	rjmp	.+10     	; 0x93c <xQueueGenericSend+0x9e>
     932:	ce 01       	movw	r24, r28
     934:	01 96       	adiw	r24, 0x01	; 1
     936:	0e 94 b1 0a 	call	0x1562	; 0x1562 <vTaskInternalSetTimeOutState>
     93a:	b9 2c       	mov	r11, r9
     93c:	0f 90       	pop	r0
     93e:	0f be       	out	0x3f, r0	; 63
     940:	0e 94 78 07 	call	0xef0	; 0xef0 <vTaskSuspendAll>
     944:	0f b6       	in	r0, 0x3f	; 63
     946:	f8 94       	cli
     948:	0f 92       	push	r0
     94a:	f8 01       	movw	r30, r16
     94c:	85 8d       	ldd	r24, Z+29	; 0x1d
     94e:	8f 3f       	cpi	r24, 0xFF	; 255
     950:	09 f4       	brne	.+2      	; 0x954 <xQueueGenericSend+0xb6>
     952:	15 8e       	std	Z+29, r1	; 0x1d
     954:	f8 01       	movw	r30, r16
     956:	86 8d       	ldd	r24, Z+30	; 0x1e
     958:	8f 3f       	cpi	r24, 0xFF	; 255
     95a:	09 f4       	brne	.+2      	; 0x95e <xQueueGenericSend+0xc0>
     95c:	16 8e       	std	Z+30, r1	; 0x1e
     95e:	0f 90       	pop	r0
     960:	0f be       	out	0x3f, r0	; 63
     962:	be 01       	movw	r22, r28
     964:	6c 5f       	subi	r22, 0xFC	; 252
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <xTaskCheckForTimeOut>
     970:	81 11       	cpse	r24, r1
     972:	1f c0       	rjmp	.+62     	; 0x9b2 <xQueueGenericSend+0x114>
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	0f 92       	push	r0
     97a:	f8 01       	movw	r30, r16
     97c:	92 8d       	ldd	r25, Z+26	; 0x1a
     97e:	0f 90       	pop	r0
     980:	0f be       	out	0x3f, r0	; 63
     982:	83 8d       	ldd	r24, Z+27	; 0x1b
     984:	98 13       	cpse	r25, r24
     986:	0f c0       	rjmp	.+30     	; 0x9a6 <xQueueGenericSend+0x108>
     988:	6c 81       	ldd	r22, Y+4	; 0x04
     98a:	7d 81       	ldd	r23, Y+5	; 0x05
     98c:	c7 01       	movw	r24, r14
     98e:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vTaskPlaceOnEventList>
     992:	c8 01       	movw	r24, r16
     994:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvUnlockQueue>
     998:	0e 94 9d 08 	call	0x113a	; 0x113a <xTaskResumeAll>
     99c:	81 11       	cpse	r24, r1
     99e:	9b cf       	rjmp	.-202    	; 0x8d6 <xQueueGenericSend+0x38>
     9a0:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
     9a4:	98 cf       	rjmp	.-208    	; 0x8d6 <xQueueGenericSend+0x38>
     9a6:	c8 01       	movw	r24, r16
     9a8:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvUnlockQueue>
     9ac:	0e 94 9d 08 	call	0x113a	; 0x113a <xTaskResumeAll>
     9b0:	92 cf       	rjmp	.-220    	; 0x8d6 <xQueueGenericSend+0x38>
     9b2:	c8 01       	movw	r24, r16
     9b4:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvUnlockQueue>
     9b8:	0e 94 9d 08 	call	0x113a	; 0x113a <xTaskResumeAll>
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	0f 91       	pop	r16
     9d0:	ff 90       	pop	r15
     9d2:	ef 90       	pop	r14
     9d4:	df 90       	pop	r13
     9d6:	cf 90       	pop	r12
     9d8:	bf 90       	pop	r11
     9da:	af 90       	pop	r10
     9dc:	9f 90       	pop	r9
     9de:	08 95       	ret

000009e0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
     9e0:	9f 92       	push	r9
     9e2:	af 92       	push	r10
     9e4:	bf 92       	push	r11
     9e6:	cf 92       	push	r12
     9e8:	df 92       	push	r13
     9ea:	ef 92       	push	r14
     9ec:	ff 92       	push	r15
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
     9f2:	cf 93       	push	r28
     9f4:	df 93       	push	r29
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <xQueueReceive+0x18>
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <xQueueReceive+0x1a>
     9fa:	1f 92       	push	r1
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	8c 01       	movw	r16, r24
     a02:	5b 01       	movw	r10, r22
     a04:	5d 83       	std	Y+5, r21	; 0x05
     a06:	4c 83       	std	Y+4, r20	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     a08:	e1 2c       	mov	r14, r1
                else if( xEntryTimeSet == pdFALSE )
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
                    xEntryTimeSet = pdTRUE;
     a0a:	99 24       	eor	r9, r9
     a0c:	93 94       	inc	r9
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     a0e:	6c 01       	movw	r12, r24
     a10:	81 e1       	ldi	r24, 0x11	; 17
     a12:	c8 0e       	add	r12, r24
     a14:	d1 1c       	adc	r13, r1
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     a16:	0f b6       	in	r0, 0x3f	; 63
     a18:	f8 94       	cli
     a1a:	0f 92       	push	r0
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
     a1c:	f8 01       	movw	r30, r16
     a1e:	f2 8c       	ldd	r15, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
     a20:	ff 20       	and	r15, r15
     a22:	a9 f0       	breq	.+42     	; 0xa4e <xQueueReceive+0x6e>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
     a24:	b5 01       	movw	r22, r10
     a26:	c8 01       	movw	r24, r16
     a28:	0e 94 43 03 	call	0x686	; 0x686 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
     a2c:	fa 94       	dec	r15
     a2e:	f8 01       	movw	r30, r16
     a30:	f2 8e       	std	Z+26, r15	; 0x1a

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     a32:	80 85       	ldd	r24, Z+8	; 0x08
     a34:	88 23       	and	r24, r24
     a36:	39 f0       	breq	.+14     	; 0xa46 <xQueueReceive+0x66>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     a38:	c8 01       	movw	r24, r16
     a3a:	08 96       	adiw	r24, 0x08	; 8
     a3c:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <xTaskRemoveFromEventList>
     a40:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     a42:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     a46:	0f 90       	pop	r0
     a48:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	51 c0       	rjmp	.+162    	; 0xaf0 <xQueueReceive+0x110>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     a4e:	8c 81       	ldd	r24, Y+4	; 0x04
     a50:	9d 81       	ldd	r25, Y+5	; 0x05
     a52:	89 2b       	or	r24, r25
     a54:	21 f4       	brne	.+8      	; 0xa5e <xQueueReceive+0x7e>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     a5a:	80 e0       	ldi	r24, 0x00	; 0
     a5c:	49 c0       	rjmp	.+146    	; 0xaf0 <xQueueReceive+0x110>
                }
                else if( xEntryTimeSet == pdFALSE )
     a5e:	e1 10       	cpse	r14, r1
     a60:	05 c0       	rjmp	.+10     	; 0xa6c <xQueueReceive+0x8c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     a62:	ce 01       	movw	r24, r28
     a64:	01 96       	adiw	r24, 0x01	; 1
     a66:	0e 94 b1 0a 	call	0x1562	; 0x1562 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     a6a:	e9 2c       	mov	r14, r9
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
     a70:	0e 94 78 07 	call	0xef0	; 0xef0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     a74:	0f b6       	in	r0, 0x3f	; 63
     a76:	f8 94       	cli
     a78:	0f 92       	push	r0
     a7a:	f8 01       	movw	r30, r16
     a7c:	85 8d       	ldd	r24, Z+29	; 0x1d
     a7e:	8f 3f       	cpi	r24, 0xFF	; 255
     a80:	09 f4       	brne	.+2      	; 0xa84 <xQueueReceive+0xa4>
     a82:	15 8e       	std	Z+29, r1	; 0x1d
     a84:	f8 01       	movw	r30, r16
     a86:	86 8d       	ldd	r24, Z+30	; 0x1e
     a88:	8f 3f       	cpi	r24, 0xFF	; 255
     a8a:	09 f4       	brne	.+2      	; 0xa8e <xQueueReceive+0xae>
     a8c:	16 8e       	std	Z+30, r1	; 0x1e
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     a92:	be 01       	movw	r22, r28
     a94:	6c 5f       	subi	r22, 0xFC	; 252
     a96:	7f 4f       	sbci	r23, 0xFF	; 255
     a98:	ce 01       	movw	r24, r28
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	0e 94 bc 0a 	call	0x1578	; 0x1578 <xTaskCheckForTimeOut>
     aa0:	81 11       	cpse	r24, r1
     aa2:	1a c0       	rjmp	.+52     	; 0xad8 <xQueueReceive+0xf8>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     aa4:	c8 01       	movw	r24, r16
     aa6:	0e 94 ef 02 	call	0x5de	; 0x5de <prvIsQueueEmpty>
     aaa:	88 23       	and	r24, r24
     aac:	79 f0       	breq	.+30     	; 0xacc <xQueueReceive+0xec>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     aae:	6c 81       	ldd	r22, Y+4	; 0x04
     ab0:	7d 81       	ldd	r23, Y+5	; 0x05
     ab2:	c6 01       	movw	r24, r12
     ab4:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     ab8:	c8 01       	movw	r24, r16
     aba:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     abe:	0e 94 9d 08 	call	0x113a	; 0x113a <xTaskResumeAll>
     ac2:	81 11       	cpse	r24, r1
     ac4:	a8 cf       	rjmp	.-176    	; 0xa16 <xQueueReceive+0x36>
                {
                    portYIELD_WITHIN_API();
     ac6:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
     aca:	a5 cf       	rjmp	.-182    	; 0xa16 <xQueueReceive+0x36>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
     acc:	c8 01       	movw	r24, r16
     ace:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     ad2:	0e 94 9d 08 	call	0x113a	; 0x113a <xTaskResumeAll>
     ad6:	9f cf       	rjmp	.-194    	; 0xa16 <xQueueReceive+0x36>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
     ad8:	c8 01       	movw	r24, r16
     ada:	0e 94 5d 03 	call	0x6ba	; 0x6ba <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     ade:	0e 94 9d 08 	call	0x113a	; 0x113a <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     ae2:	c8 01       	movw	r24, r16
     ae4:	0e 94 ef 02 	call	0x5de	; 0x5de <prvIsQueueEmpty>
     ae8:	88 23       	and	r24, r24
     aea:	09 f4       	brne	.+2      	; 0xaee <xQueueReceive+0x10e>
     aec:	94 cf       	rjmp	.-216    	; 0xa16 <xQueueReceive+0x36>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     aee:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     af0:	0f 90       	pop	r0
     af2:	0f 90       	pop	r0
     af4:	0f 90       	pop	r0
     af6:	0f 90       	pop	r0
     af8:	0f 90       	pop	r0
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	df 90       	pop	r13
     b08:	cf 90       	pop	r12
     b0a:	bf 90       	pop	r11
     b0c:	af 90       	pop	r10
     b0e:	9f 90       	pop	r9
     b10:	08 95       	ret

00000b12 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     b12:	e0 91 a8 06 	lds	r30, 0x06A8	; 0x8006a8 <pxDelayedTaskList>
     b16:	f0 91 a9 06 	lds	r31, 0x06A9	; 0x8006a9 <pxDelayedTaskList+0x1>
     b1a:	80 81       	ld	r24, Z
     b1c:	81 11       	cpse	r24, r1
     b1e:	07 c0       	rjmp	.+14     	; 0xb2e <prvResetNextTaskUnblockTime+0x1c>
     b20:	8f ef       	ldi	r24, 0xFF	; 255
     b22:	9f ef       	ldi	r25, 0xFF	; 255
     b24:	90 93 88 06 	sts	0x0688, r25	; 0x800688 <xNextTaskUnblockTime+0x1>
     b28:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <xNextTaskUnblockTime>
     b2c:	08 95       	ret
     b2e:	e0 91 a8 06 	lds	r30, 0x06A8	; 0x8006a8 <pxDelayedTaskList>
     b32:	f0 91 a9 06 	lds	r31, 0x06A9	; 0x8006a9 <pxDelayedTaskList+0x1>
     b36:	05 80       	ldd	r0, Z+5	; 0x05
     b38:	f6 81       	ldd	r31, Z+6	; 0x06
     b3a:	e0 2d       	mov	r30, r0
     b3c:	80 81       	ld	r24, Z
     b3e:	91 81       	ldd	r25, Z+1	; 0x01
     b40:	90 93 88 06 	sts	0x0688, r25	; 0x800688 <xNextTaskUnblockTime+0x1>
     b44:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <xNextTaskUnblockTime>
     b48:	08 95       	ret

00000b4a <prvIdleTask>:
     b4a:	04 e9       	ldi	r16, 0x94	; 148
     b4c:	16 e0       	ldi	r17, 0x06	; 6
     b4e:	0f 2e       	mov	r0, r31
     b50:	fc eb       	ldi	r31, 0xBC	; 188
     b52:	ef 2e       	mov	r14, r31
     b54:	f6 e0       	ldi	r31, 0x06	; 6
     b56:	ff 2e       	mov	r15, r31
     b58:	f0 2d       	mov	r31, r0
     b5a:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     b5e:	88 23       	and	r24, r24
     b60:	29 f1       	breq	.+74     	; 0xbac <prvIdleTask+0x62>
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	f8 94       	cli
     b66:	0f 92       	push	r0
     b68:	d8 01       	movw	r26, r16
     b6a:	15 96       	adiw	r26, 0x05	; 5
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	16 97       	sbiw	r26, 0x06	; 6
     b72:	c6 81       	ldd	r28, Z+6	; 0x06
     b74:	d7 81       	ldd	r29, Z+7	; 0x07
     b76:	ce 01       	movw	r24, r28
     b78:	02 96       	adiw	r24, 0x02	; 2
     b7a:	0e 94 c8 02 	call	0x590	; 0x590 <uxListRemove>
     b7e:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <uxCurrentNumberOfTasks>
     b82:	81 50       	subi	r24, 0x01	; 1
     b84:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <uxCurrentNumberOfTasks>
     b88:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     b8c:	81 50       	subi	r24, 0x01	; 1
     b8e:	80 93 93 06 	sts	0x0693, r24	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     b92:	0f 90       	pop	r0
     b94:	0f be       	out	0x3f, r0	; 63
     b96:	8f 89       	ldd	r24, Y+23	; 0x17
     b98:	98 8d       	ldd	r25, Y+24	; 0x18
     b9a:	0e 94 84 02 	call	0x508	; 0x508 <vPortFree>
     b9e:	ce 01       	movw	r24, r28
     ba0:	0e 94 84 02 	call	0x508	; 0x508 <vPortFree>
     ba4:	80 91 93 06 	lds	r24, 0x0693	; 0x800693 <uxDeletedTasksWaitingCleanUp>
     ba8:	81 11       	cpse	r24, r1
     baa:	db cf       	rjmp	.-74     	; 0xb62 <prvIdleTask+0x18>
     bac:	f7 01       	movw	r30, r14
     bae:	80 81       	ld	r24, Z
     bb0:	82 30       	cpi	r24, 0x02	; 2
     bb2:	98 f2       	brcs	.-90     	; 0xb5a <prvIdleTask+0x10>
     bb4:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
     bb8:	d0 cf       	rjmp	.-96     	; 0xb5a <prvIdleTask+0x10>

00000bba <prvAddCurrentTaskToDelayedList>:
     bba:	0f 93       	push	r16
     bbc:	1f 93       	push	r17
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	ec 01       	movw	r28, r24
     bc4:	00 91 90 06 	lds	r16, 0x0690	; 0x800690 <xTickCount>
     bc8:	10 91 91 06 	lds	r17, 0x0691	; 0x800691 <xTickCount+0x1>
     bcc:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <pxCurrentTCB>
     bd0:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
     bd4:	02 96       	adiw	r24, 0x02	; 2
     bd6:	0e 94 c8 02 	call	0x590	; 0x590 <uxListRemove>
     bda:	c0 0f       	add	r28, r16
     bdc:	d1 1f       	adc	r29, r17
     bde:	e0 91 e0 06 	lds	r30, 0x06E0	; 0x8006e0 <pxCurrentTCB>
     be2:	f0 91 e1 06 	lds	r31, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
     be6:	d3 83       	std	Z+3, r29	; 0x03
     be8:	c2 83       	std	Z+2, r28	; 0x02
     bea:	c0 17       	cp	r28, r16
     bec:	d1 07       	cpc	r29, r17
     bee:	68 f4       	brcc	.+26     	; 0xc0a <prvAddCurrentTaskToDelayedList+0x50>
     bf0:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <pxCurrentTCB>
     bf4:	70 91 e1 06 	lds	r23, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
     bf8:	80 91 a6 06 	lds	r24, 0x06A6	; 0x8006a6 <pxOverflowDelayedTaskList>
     bfc:	90 91 a7 06 	lds	r25, 0x06A7	; 0x8006a7 <pxOverflowDelayedTaskList+0x1>
     c00:	6e 5f       	subi	r22, 0xFE	; 254
     c02:	7f 4f       	sbci	r23, 0xFF	; 255
     c04:	0e 94 97 02 	call	0x52e	; 0x52e <vListInsert>
     c08:	17 c0       	rjmp	.+46     	; 0xc38 <prvAddCurrentTaskToDelayedList+0x7e>
     c0a:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <pxCurrentTCB>
     c0e:	70 91 e1 06 	lds	r23, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
     c12:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <pxDelayedTaskList>
     c16:	90 91 a9 06 	lds	r25, 0x06A9	; 0x8006a9 <pxDelayedTaskList+0x1>
     c1a:	6e 5f       	subi	r22, 0xFE	; 254
     c1c:	7f 4f       	sbci	r23, 0xFF	; 255
     c1e:	0e 94 97 02 	call	0x52e	; 0x52e <vListInsert>
     c22:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <xNextTaskUnblockTime>
     c26:	90 91 88 06 	lds	r25, 0x0688	; 0x800688 <xNextTaskUnblockTime+0x1>
     c2a:	c8 17       	cp	r28, r24
     c2c:	d9 07       	cpc	r29, r25
     c2e:	20 f4       	brcc	.+8      	; 0xc38 <prvAddCurrentTaskToDelayedList+0x7e>
     c30:	d0 93 88 06 	sts	0x0688, r29	; 0x800688 <xNextTaskUnblockTime+0x1>
     c34:	c0 93 87 06 	sts	0x0687, r28	; 0x800687 <xNextTaskUnblockTime>
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	1f 91       	pop	r17
     c3e:	0f 91       	pop	r16
     c40:	08 95       	ret

00000c42 <xTaskCreate>:
     c42:	4f 92       	push	r4
     c44:	5f 92       	push	r5
     c46:	6f 92       	push	r6
     c48:	7f 92       	push	r7
     c4a:	8f 92       	push	r8
     c4c:	9f 92       	push	r9
     c4e:	af 92       	push	r10
     c50:	bf 92       	push	r11
     c52:	cf 92       	push	r12
     c54:	df 92       	push	r13
     c56:	ef 92       	push	r14
     c58:	ff 92       	push	r15
     c5a:	0f 93       	push	r16
     c5c:	cf 93       	push	r28
     c5e:	df 93       	push	r29
     c60:	4c 01       	movw	r8, r24
     c62:	6b 01       	movw	r12, r22
     c64:	5a 01       	movw	r10, r20
     c66:	29 01       	movw	r4, r18
     c68:	ca 01       	movw	r24, r20
     c6a:	0e 94 4a 02 	call	0x494	; 0x494 <pvPortMalloc>
     c6e:	3c 01       	movw	r6, r24
     c70:	89 2b       	or	r24, r25
     c72:	09 f4       	brne	.+2      	; 0xc76 <xTaskCreate+0x34>
     c74:	00 c1       	rjmp	.+512    	; 0xe76 <xTaskCreate+0x234>
     c76:	86 e2       	ldi	r24, 0x26	; 38
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 4a 02 	call	0x494	; 0x494 <pvPortMalloc>
     c7e:	ec 01       	movw	r28, r24
     c80:	89 2b       	or	r24, r25
     c82:	81 f0       	breq	.+32     	; 0xca4 <xTaskCreate+0x62>
     c84:	86 e2       	ldi	r24, 0x26	; 38
     c86:	de 01       	movw	r26, r28
     c88:	1d 92       	st	X+, r1
     c8a:	8a 95       	dec	r24
     c8c:	e9 f7       	brne	.-6      	; 0xc88 <xTaskCreate+0x46>
     c8e:	78 8e       	std	Y+24, r7	; 0x18
     c90:	6f 8a       	std	Y+23, r6	; 0x17
     c92:	b1 e0       	ldi	r27, 0x01	; 1
     c94:	ab 1a       	sub	r10, r27
     c96:	b1 08       	sbc	r11, r1
     c98:	a6 0c       	add	r10, r6
     c9a:	b7 1c       	adc	r11, r7
     c9c:	c1 14       	cp	r12, r1
     c9e:	d1 04       	cpc	r13, r1
     ca0:	29 f4       	brne	.+10     	; 0xcac <xTaskCreate+0x6a>
     ca2:	1e c0       	rjmp	.+60     	; 0xce0 <xTaskCreate+0x9e>
     ca4:	c3 01       	movw	r24, r6
     ca6:	0e 94 84 02 	call	0x508	; 0x508 <vPortFree>
     caa:	e5 c0       	rjmp	.+458    	; 0xe76 <xTaskCreate+0x234>
     cac:	f6 01       	movw	r30, r12
     cae:	80 81       	ld	r24, Z
     cb0:	89 8f       	std	Y+25, r24	; 0x19
     cb2:	80 81       	ld	r24, Z
     cb4:	88 23       	and	r24, r24
     cb6:	99 f0       	breq	.+38     	; 0xcde <xTaskCreate+0x9c>
     cb8:	ae 01       	movw	r20, r28
     cba:	46 5e       	subi	r20, 0xE6	; 230
     cbc:	5f 4f       	sbci	r21, 0xFF	; 255
     cbe:	31 96       	adiw	r30, 0x01	; 1
     cc0:	88 e0       	ldi	r24, 0x08	; 8
     cc2:	c8 0e       	add	r12, r24
     cc4:	d1 1c       	adc	r13, r1
     cc6:	cf 01       	movw	r24, r30
     cc8:	21 91       	ld	r18, Z+
     cca:	da 01       	movw	r26, r20
     ccc:	2d 93       	st	X+, r18
     cce:	ad 01       	movw	r20, r26
     cd0:	dc 01       	movw	r26, r24
     cd2:	8c 91       	ld	r24, X
     cd4:	88 23       	and	r24, r24
     cd6:	19 f0       	breq	.+6      	; 0xcde <xTaskCreate+0x9c>
     cd8:	ec 15       	cp	r30, r12
     cda:	fd 05       	cpc	r31, r13
     cdc:	a1 f7       	brne	.-24     	; 0xcc6 <xTaskCreate+0x84>
     cde:	18 a2       	std	Y+32, r1	; 0x20
     ce0:	04 30       	cpi	r16, 0x04	; 4
     ce2:	08 f0       	brcs	.+2      	; 0xce6 <xTaskCreate+0xa4>
     ce4:	03 e0       	ldi	r16, 0x03	; 3
     ce6:	0e 8b       	std	Y+22, r16	; 0x16
     ce8:	6e 01       	movw	r12, r28
     cea:	b2 e0       	ldi	r27, 0x02	; 2
     cec:	cb 0e       	add	r12, r27
     cee:	d1 1c       	adc	r13, r1
     cf0:	c6 01       	movw	r24, r12
     cf2:	0e 94 93 02 	call	0x526	; 0x526 <vListInitialiseItem>
     cf6:	ce 01       	movw	r24, r28
     cf8:	0c 96       	adiw	r24, 0x0c	; 12
     cfa:	0e 94 93 02 	call	0x526	; 0x526 <vListInitialiseItem>
     cfe:	d9 87       	std	Y+9, r29	; 0x09
     d00:	c8 87       	std	Y+8, r28	; 0x08
     d02:	84 e0       	ldi	r24, 0x04	; 4
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	80 1b       	sub	r24, r16
     d08:	91 09       	sbc	r25, r1
     d0a:	9d 87       	std	Y+13, r25	; 0x0d
     d0c:	8c 87       	std	Y+12, r24	; 0x0c
     d0e:	db 8b       	std	Y+19, r29	; 0x13
     d10:	ca 8b       	std	Y+18, r28	; 0x12
     d12:	a2 01       	movw	r20, r4
     d14:	b4 01       	movw	r22, r8
     d16:	c5 01       	movw	r24, r10
     d18:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <pxPortInitialiseStack>
     d1c:	99 83       	std	Y+1, r25	; 0x01
     d1e:	88 83       	st	Y, r24
     d20:	e1 14       	cp	r14, r1
     d22:	f1 04       	cpc	r15, r1
     d24:	19 f0       	breq	.+6      	; 0xd2c <xTaskCreate+0xea>
     d26:	f7 01       	movw	r30, r14
     d28:	d1 83       	std	Z+1, r29	; 0x01
     d2a:	c0 83       	st	Z, r28
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	f8 94       	cli
     d30:	0f 92       	push	r0
     d32:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <uxCurrentNumberOfTasks>
     d36:	8f 5f       	subi	r24, 0xFF	; 255
     d38:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <uxCurrentNumberOfTasks>
     d3c:	80 91 e0 06 	lds	r24, 0x06E0	; 0x8006e0 <pxCurrentTCB>
     d40:	90 91 e1 06 	lds	r25, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
     d44:	89 2b       	or	r24, r25
     d46:	a9 f5       	brne	.+106    	; 0xdb2 <xTaskCreate+0x170>
     d48:	d0 93 e1 06 	sts	0x06E1, r29	; 0x8006e1 <pxCurrentTCB+0x1>
     d4c:	c0 93 e0 06 	sts	0x06E0, r28	; 0x8006e0 <pxCurrentTCB>
     d50:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <uxCurrentNumberOfTasks>
     d54:	81 30       	cpi	r24, 0x01	; 1
     d56:	e9 f5       	brne	.+122    	; 0xdd2 <xTaskCreate+0x190>
     d58:	8c eb       	ldi	r24, 0xBC	; 188
     d5a:	96 e0       	ldi	r25, 0x06	; 6
     d5c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d60:	85 ec       	ldi	r24, 0xC5	; 197
     d62:	96 e0       	ldi	r25, 0x06	; 6
     d64:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d68:	8e ec       	ldi	r24, 0xCE	; 206
     d6a:	96 e0       	ldi	r25, 0x06	; 6
     d6c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d70:	87 ed       	ldi	r24, 0xD7	; 215
     d72:	96 e0       	ldi	r25, 0x06	; 6
     d74:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d78:	83 eb       	ldi	r24, 0xB3	; 179
     d7a:	96 e0       	ldi	r25, 0x06	; 6
     d7c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d80:	8a ea       	ldi	r24, 0xAA	; 170
     d82:	96 e0       	ldi	r25, 0x06	; 6
     d84:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d88:	8d e9       	ldi	r24, 0x9D	; 157
     d8a:	96 e0       	ldi	r25, 0x06	; 6
     d8c:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d90:	84 e9       	ldi	r24, 0x94	; 148
     d92:	96 e0       	ldi	r25, 0x06	; 6
     d94:	0e 94 85 02 	call	0x50a	; 0x50a <vListInitialise>
     d98:	83 eb       	ldi	r24, 0xB3	; 179
     d9a:	96 e0       	ldi	r25, 0x06	; 6
     d9c:	90 93 a9 06 	sts	0x06A9, r25	; 0x8006a9 <pxDelayedTaskList+0x1>
     da0:	80 93 a8 06 	sts	0x06A8, r24	; 0x8006a8 <pxDelayedTaskList>
     da4:	8a ea       	ldi	r24, 0xAA	; 170
     da6:	96 e0       	ldi	r25, 0x06	; 6
     da8:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <pxOverflowDelayedTaskList+0x1>
     dac:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <pxOverflowDelayedTaskList>
     db0:	10 c0       	rjmp	.+32     	; 0xdd2 <xTaskCreate+0x190>
     db2:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xSchedulerRunning>
     db6:	81 11       	cpse	r24, r1
     db8:	0c c0       	rjmp	.+24     	; 0xdd2 <xTaskCreate+0x190>
     dba:	e0 91 e0 06 	lds	r30, 0x06E0	; 0x8006e0 <pxCurrentTCB>
     dbe:	f0 91 e1 06 	lds	r31, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
     dc2:	96 89       	ldd	r25, Z+22	; 0x16
     dc4:	8e 89       	ldd	r24, Y+22	; 0x16
     dc6:	89 17       	cp	r24, r25
     dc8:	20 f0       	brcs	.+8      	; 0xdd2 <xTaskCreate+0x190>
     dca:	d0 93 e1 06 	sts	0x06E1, r29	; 0x8006e1 <pxCurrentTCB+0x1>
     dce:	c0 93 e0 06 	sts	0x06E0, r28	; 0x8006e0 <pxCurrentTCB>
     dd2:	80 91 89 06 	lds	r24, 0x0689	; 0x800689 <uxTaskNumber>
     dd6:	8f 5f       	subi	r24, 0xFF	; 255
     dd8:	80 93 89 06 	sts	0x0689, r24	; 0x800689 <uxTaskNumber>
     ddc:	8e 89       	ldd	r24, Y+22	; 0x16
     dde:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <uxTopReadyPriority>
     de2:	98 17       	cp	r25, r24
     de4:	10 f4       	brcc	.+4      	; 0xdea <xTaskCreate+0x1a8>
     de6:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <uxTopReadyPriority>
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	fc 01       	movw	r30, r24
     dee:	ee 0f       	add	r30, r30
     df0:	ff 1f       	adc	r31, r31
     df2:	ee 0f       	add	r30, r30
     df4:	ff 1f       	adc	r31, r31
     df6:	ee 0f       	add	r30, r30
     df8:	ff 1f       	adc	r31, r31
     dfa:	8e 0f       	add	r24, r30
     dfc:	9f 1f       	adc	r25, r31
     dfe:	fc 01       	movw	r30, r24
     e00:	e4 54       	subi	r30, 0x44	; 68
     e02:	f9 4f       	sbci	r31, 0xF9	; 249
     e04:	01 80       	ldd	r0, Z+1	; 0x01
     e06:	f2 81       	ldd	r31, Z+2	; 0x02
     e08:	e0 2d       	mov	r30, r0
     e0a:	fd 83       	std	Y+5, r31	; 0x05
     e0c:	ec 83       	std	Y+4, r30	; 0x04
     e0e:	84 81       	ldd	r24, Z+4	; 0x04
     e10:	95 81       	ldd	r25, Z+5	; 0x05
     e12:	9f 83       	std	Y+7, r25	; 0x07
     e14:	8e 83       	std	Y+6, r24	; 0x06
     e16:	a4 81       	ldd	r26, Z+4	; 0x04
     e18:	b5 81       	ldd	r27, Z+5	; 0x05
     e1a:	13 96       	adiw	r26, 0x03	; 3
     e1c:	dc 92       	st	X, r13
     e1e:	ce 92       	st	-X, r12
     e20:	12 97       	sbiw	r26, 0x02	; 2
     e22:	d5 82       	std	Z+5, r13	; 0x05
     e24:	c4 82       	std	Z+4, r12	; 0x04
     e26:	ee 89       	ldd	r30, Y+22	; 0x16
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	cf 01       	movw	r24, r30
     e2c:	88 0f       	add	r24, r24
     e2e:	99 1f       	adc	r25, r25
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	e8 0f       	add	r30, r24
     e3a:	f9 1f       	adc	r31, r25
     e3c:	e4 54       	subi	r30, 0x44	; 68
     e3e:	f9 4f       	sbci	r31, 0xF9	; 249
     e40:	fb 87       	std	Y+11, r31	; 0x0b
     e42:	ea 87       	std	Y+10, r30	; 0x0a
     e44:	80 81       	ld	r24, Z
     e46:	8f 5f       	subi	r24, 0xFF	; 255
     e48:	80 83       	st	Z, r24
     e4a:	0f 90       	pop	r0
     e4c:	0f be       	out	0x3f, r0	; 63
     e4e:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xSchedulerRunning>
     e52:	88 23       	and	r24, r24
     e54:	61 f0       	breq	.+24     	; 0xe6e <xTaskCreate+0x22c>
     e56:	e0 91 e0 06 	lds	r30, 0x06E0	; 0x8006e0 <pxCurrentTCB>
     e5a:	f0 91 e1 06 	lds	r31, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
     e5e:	96 89       	ldd	r25, Z+22	; 0x16
     e60:	8e 89       	ldd	r24, Y+22	; 0x16
     e62:	98 17       	cp	r25, r24
     e64:	30 f4       	brcc	.+12     	; 0xe72 <xTaskCreate+0x230>
     e66:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	05 c0       	rjmp	.+10     	; 0xe78 <xTaskCreate+0x236>
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	03 c0       	rjmp	.+6      	; 0xe78 <xTaskCreate+0x236>
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	01 c0       	rjmp	.+2      	; 0xe78 <xTaskCreate+0x236>
     e76:	8f ef       	ldi	r24, 0xFF	; 255
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	0f 91       	pop	r16
     e7e:	ff 90       	pop	r15
     e80:	ef 90       	pop	r14
     e82:	df 90       	pop	r13
     e84:	cf 90       	pop	r12
     e86:	bf 90       	pop	r11
     e88:	af 90       	pop	r10
     e8a:	9f 90       	pop	r9
     e8c:	8f 90       	pop	r8
     e8e:	7f 90       	pop	r7
     e90:	6f 90       	pop	r6
     e92:	5f 90       	pop	r5
     e94:	4f 90       	pop	r4
     e96:	08 95       	ret

00000e98 <vTaskStartScheduler>:
     e98:	ef 92       	push	r14
     e9a:	ff 92       	push	r15
     e9c:	0f 93       	push	r16
     e9e:	0f 2e       	mov	r0, r31
     ea0:	f5 e8       	ldi	r31, 0x85	; 133
     ea2:	ef 2e       	mov	r14, r31
     ea4:	f6 e0       	ldi	r31, 0x06	; 6
     ea6:	ff 2e       	mov	r15, r31
     ea8:	f0 2d       	mov	r31, r0
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	45 e5       	ldi	r20, 0x55	; 85
     eb2:	50 e0       	ldi	r21, 0x00	; 0
     eb4:	62 e9       	ldi	r22, 0x92	; 146
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	85 ea       	ldi	r24, 0xA5	; 165
     eba:	95 e0       	ldi	r25, 0x05	; 5
     ebc:	0e 94 21 06 	call	0xc42	; 0xc42 <xTaskCreate>
     ec0:	81 30       	cpi	r24, 0x01	; 1
     ec2:	81 f4       	brne	.+32     	; 0xee4 <vTaskStartScheduler+0x4c>
     ec4:	f8 94       	cli
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	9f ef       	ldi	r25, 0xFF	; 255
     eca:	90 93 88 06 	sts	0x0688, r25	; 0x800688 <xNextTaskUnblockTime+0x1>
     ece:	80 93 87 06 	sts	0x0687, r24	; 0x800687 <xNextTaskUnblockTime>
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xSchedulerRunning>
     ed8:	10 92 91 06 	sts	0x0691, r1	; 0x800691 <xTickCount+0x1>
     edc:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <xTickCount>
     ee0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <xPortStartScheduler>
     ee4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	08 95       	ret

00000ef0 <vTaskSuspendAll>:
     ef0:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxSchedulerSuspended>
     ef4:	8f 5f       	subi	r24, 0xFF	; 255
     ef6:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <uxSchedulerSuspended>
     efa:	08 95       	ret

00000efc <xTaskIncrementTick>:
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxSchedulerSuspended>
     f0c:	81 11       	cpse	r24, r1
     f0e:	04 c1       	rjmp	.+520    	; 0x1118 <xTaskIncrementTick+0x21c>
     f10:	c0 91 90 06 	lds	r28, 0x0690	; 0x800690 <xTickCount>
     f14:	d0 91 91 06 	lds	r29, 0x0691	; 0x800691 <xTickCount+0x1>
     f18:	7e 01       	movw	r14, r28
     f1a:	8f ef       	ldi	r24, 0xFF	; 255
     f1c:	e8 1a       	sub	r14, r24
     f1e:	f8 0a       	sbc	r15, r24
     f20:	f0 92 91 06 	sts	0x0691, r15	; 0x800691 <xTickCount+0x1>
     f24:	e0 92 90 06 	sts	0x0690, r14	; 0x800690 <xTickCount>
     f28:	e1 14       	cp	r14, r1
     f2a:	f1 04       	cpc	r15, r1
     f2c:	b9 f4       	brne	.+46     	; 0xf5c <xTaskIncrementTick+0x60>
     f2e:	80 91 a8 06 	lds	r24, 0x06A8	; 0x8006a8 <pxDelayedTaskList>
     f32:	90 91 a9 06 	lds	r25, 0x06A9	; 0x8006a9 <pxDelayedTaskList+0x1>
     f36:	20 91 a6 06 	lds	r18, 0x06A6	; 0x8006a6 <pxOverflowDelayedTaskList>
     f3a:	30 91 a7 06 	lds	r19, 0x06A7	; 0x8006a7 <pxOverflowDelayedTaskList+0x1>
     f3e:	30 93 a9 06 	sts	0x06A9, r19	; 0x8006a9 <pxDelayedTaskList+0x1>
     f42:	20 93 a8 06 	sts	0x06A8, r18	; 0x8006a8 <pxDelayedTaskList>
     f46:	90 93 a7 06 	sts	0x06A7, r25	; 0x8006a7 <pxOverflowDelayedTaskList+0x1>
     f4a:	80 93 a6 06 	sts	0x06A6, r24	; 0x8006a6 <pxOverflowDelayedTaskList>
     f4e:	80 91 8a 06 	lds	r24, 0x068A	; 0x80068a <xNumOfOverflows>
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 8a 06 	sts	0x068A, r24	; 0x80068a <xNumOfOverflows>
     f58:	0e 94 89 05 	call	0xb12	; 0xb12 <prvResetNextTaskUnblockTime>
     f5c:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <xNextTaskUnblockTime>
     f60:	90 91 88 06 	lds	r25, 0x0688	; 0x800688 <xNextTaskUnblockTime+0x1>
     f64:	e8 16       	cp	r14, r24
     f66:	f9 06       	cpc	r15, r25
     f68:	10 f4       	brcc	.+4      	; 0xf6e <xTaskIncrementTick+0x72>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	b9 c0       	rjmp	.+370    	; 0x10e0 <xTaskIncrementTick+0x1e4>
     f6e:	80 e0       	ldi	r24, 0x00	; 0
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	e0 91 a8 06 	lds	r30, 0x06A8	; 0x8006a8 <pxDelayedTaskList>
     f76:	f0 91 a9 06 	lds	r31, 0x06A9	; 0x8006a9 <pxDelayedTaskList+0x1>
     f7a:	90 81       	ld	r25, Z
     f7c:	91 11       	cpse	r25, r1
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <xTaskIncrementTick+0x92>
     f80:	2f ef       	ldi	r18, 0xFF	; 255
     f82:	3f ef       	ldi	r19, 0xFF	; 255
     f84:	30 93 88 06 	sts	0x0688, r19	; 0x800688 <xNextTaskUnblockTime+0x1>
     f88:	20 93 87 06 	sts	0x0687, r18	; 0x800687 <xNextTaskUnblockTime>
     f8c:	a9 c0       	rjmp	.+338    	; 0x10e0 <xTaskIncrementTick+0x1e4>
     f8e:	e0 91 a8 06 	lds	r30, 0x06A8	; 0x8006a8 <pxDelayedTaskList>
     f92:	f0 91 a9 06 	lds	r31, 0x06A9	; 0x8006a9 <pxDelayedTaskList+0x1>
     f96:	05 80       	ldd	r0, Z+5	; 0x05
     f98:	f6 81       	ldd	r31, Z+6	; 0x06
     f9a:	e0 2d       	mov	r30, r0
     f9c:	06 80       	ldd	r0, Z+6	; 0x06
     f9e:	f7 81       	ldd	r31, Z+7	; 0x07
     fa0:	e0 2d       	mov	r30, r0
     fa2:	22 81       	ldd	r18, Z+2	; 0x02
     fa4:	33 81       	ldd	r19, Z+3	; 0x03
     fa6:	e2 16       	cp	r14, r18
     fa8:	f3 06       	cpc	r15, r19
     faa:	28 f4       	brcc	.+10     	; 0xfb6 <xTaskIncrementTick+0xba>
     fac:	30 93 88 06 	sts	0x0688, r19	; 0x800688 <xNextTaskUnblockTime+0x1>
     fb0:	20 93 87 06 	sts	0x0687, r18	; 0x800687 <xNextTaskUnblockTime>
     fb4:	95 c0       	rjmp	.+298    	; 0x10e0 <xTaskIncrementTick+0x1e4>
     fb6:	a2 85       	ldd	r26, Z+10	; 0x0a
     fb8:	b3 85       	ldd	r27, Z+11	; 0x0b
     fba:	24 81       	ldd	r18, Z+4	; 0x04
     fbc:	35 81       	ldd	r19, Z+5	; 0x05
     fbe:	46 81       	ldd	r20, Z+6	; 0x06
     fc0:	57 81       	ldd	r21, Z+7	; 0x07
     fc2:	e9 01       	movw	r28, r18
     fc4:	5d 83       	std	Y+5, r21	; 0x05
     fc6:	4c 83       	std	Y+4, r20	; 0x04
     fc8:	26 81       	ldd	r18, Z+6	; 0x06
     fca:	37 81       	ldd	r19, Z+7	; 0x07
     fcc:	44 81       	ldd	r20, Z+4	; 0x04
     fce:	55 81       	ldd	r21, Z+5	; 0x05
     fd0:	e9 01       	movw	r28, r18
     fd2:	5b 83       	std	Y+3, r21	; 0x03
     fd4:	4a 83       	std	Y+2, r20	; 0x02
     fd6:	af 01       	movw	r20, r30
     fd8:	4e 5f       	subi	r20, 0xFE	; 254
     fda:	5f 4f       	sbci	r21, 0xFF	; 255
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	2d 91       	ld	r18, X+
     fe0:	3c 91       	ld	r19, X
     fe2:	12 97       	sbiw	r26, 0x02	; 2
     fe4:	24 17       	cp	r18, r20
     fe6:	35 07       	cpc	r19, r21
     fe8:	31 f4       	brne	.+12     	; 0xff6 <xTaskIncrementTick+0xfa>
     fea:	26 81       	ldd	r18, Z+6	; 0x06
     fec:	37 81       	ldd	r19, Z+7	; 0x07
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	3c 93       	st	X, r19
     ff2:	2e 93       	st	-X, r18
     ff4:	11 97       	sbiw	r26, 0x01	; 1
     ff6:	13 86       	std	Z+11, r1	; 0x0b
     ff8:	12 86       	std	Z+10, r1	; 0x0a
     ffa:	9c 91       	ld	r25, X
     ffc:	91 50       	subi	r25, 0x01	; 1
     ffe:	9c 93       	st	X, r25
    1000:	a4 89       	ldd	r26, Z+20	; 0x14
    1002:	b5 89       	ldd	r27, Z+21	; 0x15
    1004:	10 97       	sbiw	r26, 0x00	; 0
    1006:	19 f1       	breq	.+70     	; 0x104e <xTaskIncrementTick+0x152>
    1008:	26 85       	ldd	r18, Z+14	; 0x0e
    100a:	37 85       	ldd	r19, Z+15	; 0x0f
    100c:	00 89       	ldd	r16, Z+16	; 0x10
    100e:	11 89       	ldd	r17, Z+17	; 0x11
    1010:	e9 01       	movw	r28, r18
    1012:	1d 83       	std	Y+5, r17	; 0x05
    1014:	0c 83       	std	Y+4, r16	; 0x04
    1016:	20 89       	ldd	r18, Z+16	; 0x10
    1018:	31 89       	ldd	r19, Z+17	; 0x11
    101a:	06 85       	ldd	r16, Z+14	; 0x0e
    101c:	17 85       	ldd	r17, Z+15	; 0x0f
    101e:	e9 01       	movw	r28, r18
    1020:	1b 83       	std	Y+3, r17	; 0x03
    1022:	0a 83       	std	Y+2, r16	; 0x02
    1024:	11 96       	adiw	r26, 0x01	; 1
    1026:	0d 91       	ld	r16, X+
    1028:	1c 91       	ld	r17, X
    102a:	12 97       	sbiw	r26, 0x02	; 2
    102c:	9f 01       	movw	r18, r30
    102e:	24 5f       	subi	r18, 0xF4	; 244
    1030:	3f 4f       	sbci	r19, 0xFF	; 255
    1032:	02 17       	cp	r16, r18
    1034:	13 07       	cpc	r17, r19
    1036:	31 f4       	brne	.+12     	; 0x1044 <xTaskIncrementTick+0x148>
    1038:	20 89       	ldd	r18, Z+16	; 0x10
    103a:	31 89       	ldd	r19, Z+17	; 0x11
    103c:	12 96       	adiw	r26, 0x02	; 2
    103e:	3c 93       	st	X, r19
    1040:	2e 93       	st	-X, r18
    1042:	11 97       	sbiw	r26, 0x01	; 1
    1044:	15 8a       	std	Z+21, r1	; 0x15
    1046:	14 8a       	std	Z+20, r1	; 0x14
    1048:	9c 91       	ld	r25, X
    104a:	91 50       	subi	r25, 0x01	; 1
    104c:	9c 93       	st	X, r25
    104e:	26 89       	ldd	r18, Z+22	; 0x16
    1050:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <uxTopReadyPriority>
    1054:	92 17       	cp	r25, r18
    1056:	10 f4       	brcc	.+4      	; 0x105c <xTaskIncrementTick+0x160>
    1058:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <uxTopReadyPriority>
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	d9 01       	movw	r26, r18
    1060:	aa 0f       	add	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	aa 0f       	add	r26, r26
    1066:	bb 1f       	adc	r27, r27
    1068:	aa 0f       	add	r26, r26
    106a:	bb 1f       	adc	r27, r27
    106c:	2a 0f       	add	r18, r26
    106e:	3b 1f       	adc	r19, r27
    1070:	d9 01       	movw	r26, r18
    1072:	a4 54       	subi	r26, 0x44	; 68
    1074:	b9 4f       	sbci	r27, 0xF9	; 249
    1076:	11 96       	adiw	r26, 0x01	; 1
    1078:	0d 90       	ld	r0, X+
    107a:	bc 91       	ld	r27, X
    107c:	a0 2d       	mov	r26, r0
    107e:	b5 83       	std	Z+5, r27	; 0x05
    1080:	a4 83       	std	Z+4, r26	; 0x04
    1082:	14 96       	adiw	r26, 0x04	; 4
    1084:	2d 91       	ld	r18, X+
    1086:	3c 91       	ld	r19, X
    1088:	15 97       	sbiw	r26, 0x05	; 5
    108a:	37 83       	std	Z+7, r19	; 0x07
    108c:	26 83       	std	Z+6, r18	; 0x06
    108e:	14 96       	adiw	r26, 0x04	; 4
    1090:	2d 91       	ld	r18, X+
    1092:	3c 91       	ld	r19, X
    1094:	15 97       	sbiw	r26, 0x05	; 5
    1096:	e9 01       	movw	r28, r18
    1098:	5b 83       	std	Y+3, r21	; 0x03
    109a:	4a 83       	std	Y+2, r20	; 0x02
    109c:	15 96       	adiw	r26, 0x05	; 5
    109e:	5c 93       	st	X, r21
    10a0:	4e 93       	st	-X, r20
    10a2:	14 97       	sbiw	r26, 0x04	; 4
    10a4:	a6 89       	ldd	r26, Z+22	; 0x16
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	9d 01       	movw	r18, r26
    10aa:	22 0f       	add	r18, r18
    10ac:	33 1f       	adc	r19, r19
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	22 0f       	add	r18, r18
    10b4:	33 1f       	adc	r19, r19
    10b6:	a2 0f       	add	r26, r18
    10b8:	b3 1f       	adc	r27, r19
    10ba:	a4 54       	subi	r26, 0x44	; 68
    10bc:	b9 4f       	sbci	r27, 0xF9	; 249
    10be:	b3 87       	std	Z+11, r27	; 0x0b
    10c0:	a2 87       	std	Z+10, r26	; 0x0a
    10c2:	9c 91       	ld	r25, X
    10c4:	9f 5f       	subi	r25, 0xFF	; 255
    10c6:	9c 93       	st	X, r25
    10c8:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    10cc:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    10d0:	26 89       	ldd	r18, Z+22	; 0x16
    10d2:	56 96       	adiw	r26, 0x16	; 22
    10d4:	9c 91       	ld	r25, X
    10d6:	92 17       	cp	r25, r18
    10d8:	08 f0       	brcs	.+2      	; 0x10dc <xTaskIncrementTick+0x1e0>
    10da:	4b cf       	rjmp	.-362    	; 0xf72 <xTaskIncrementTick+0x76>
    10dc:	86 2f       	mov	r24, r22
    10de:	49 cf       	rjmp	.-366    	; 0xf72 <xTaskIncrementTick+0x76>
    10e0:	e0 91 e0 06 	lds	r30, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    10e4:	f0 91 e1 06 	lds	r31, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    10e8:	26 89       	ldd	r18, Z+22	; 0x16
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	f9 01       	movw	r30, r18
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	2e 0f       	add	r18, r30
    10fc:	3f 1f       	adc	r19, r31
    10fe:	f9 01       	movw	r30, r18
    1100:	e4 54       	subi	r30, 0x44	; 68
    1102:	f9 4f       	sbci	r31, 0xF9	; 249
    1104:	90 81       	ld	r25, Z
    1106:	92 30       	cpi	r25, 0x02	; 2
    1108:	08 f0       	brcs	.+2      	; 0x110c <xTaskIncrementTick+0x210>
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 91 8b 06 	lds	r25, 0x068B	; 0x80068b <xYieldPending>
    1110:	99 23       	and	r25, r25
    1112:	61 f0       	breq	.+24     	; 0x112c <xTaskIncrementTick+0x230>
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	0a c0       	rjmp	.+20     	; 0x112c <xTaskIncrementTick+0x230>
    1118:	80 91 8c 06 	lds	r24, 0x068C	; 0x80068c <xPendedTicks>
    111c:	90 91 8d 06 	lds	r25, 0x068D	; 0x80068d <xPendedTicks+0x1>
    1120:	01 96       	adiw	r24, 0x01	; 1
    1122:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <xPendedTicks+0x1>
    1126:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <xPendedTicks>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ff 90       	pop	r15
    1136:	ef 90       	pop	r14
    1138:	08 95       	ret

0000113a <xTaskResumeAll>:
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	0f b6       	in	r0, 0x3f	; 63
    1142:	f8 94       	cli
    1144:	0f 92       	push	r0
    1146:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxSchedulerSuspended>
    114a:	81 50       	subi	r24, 0x01	; 1
    114c:	80 93 84 06 	sts	0x0684, r24	; 0x800684 <uxSchedulerSuspended>
    1150:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxSchedulerSuspended>
    1154:	81 11       	cpse	r24, r1
    1156:	c6 c0       	rjmp	.+396    	; 0x12e4 <xTaskResumeAll+0x1aa>
    1158:	80 91 92 06 	lds	r24, 0x0692	; 0x800692 <uxCurrentNumberOfTasks>
    115c:	81 11       	cpse	r24, r1
    115e:	9b c0       	rjmp	.+310    	; 0x1296 <xTaskResumeAll+0x15c>
    1160:	c4 c0       	rjmp	.+392    	; 0x12ea <xTaskResumeAll+0x1b0>
    1162:	db 01       	movw	r26, r22
    1164:	15 96       	adiw	r26, 0x05	; 5
    1166:	ed 91       	ld	r30, X+
    1168:	fc 91       	ld	r31, X
    116a:	16 97       	sbiw	r26, 0x06	; 6
    116c:	06 80       	ldd	r0, Z+6	; 0x06
    116e:	f7 81       	ldd	r31, Z+7	; 0x07
    1170:	e0 2d       	mov	r30, r0
    1172:	a4 89       	ldd	r26, Z+20	; 0x14
    1174:	b5 89       	ldd	r27, Z+21	; 0x15
    1176:	86 85       	ldd	r24, Z+14	; 0x0e
    1178:	97 85       	ldd	r25, Z+15	; 0x0f
    117a:	20 89       	ldd	r18, Z+16	; 0x10
    117c:	31 89       	ldd	r19, Z+17	; 0x11
    117e:	ec 01       	movw	r28, r24
    1180:	3d 83       	std	Y+5, r19	; 0x05
    1182:	2c 83       	std	Y+4, r18	; 0x04
    1184:	80 89       	ldd	r24, Z+16	; 0x10
    1186:	91 89       	ldd	r25, Z+17	; 0x11
    1188:	26 85       	ldd	r18, Z+14	; 0x0e
    118a:	37 85       	ldd	r19, Z+15	; 0x0f
    118c:	ec 01       	movw	r28, r24
    118e:	3b 83       	std	Y+3, r19	; 0x03
    1190:	2a 83       	std	Y+2, r18	; 0x02
    1192:	cf 01       	movw	r24, r30
    1194:	0c 96       	adiw	r24, 0x0c	; 12
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	2d 91       	ld	r18, X+
    119a:	3c 91       	ld	r19, X
    119c:	12 97       	sbiw	r26, 0x02	; 2
    119e:	28 17       	cp	r18, r24
    11a0:	39 07       	cpc	r19, r25
    11a2:	31 f4       	brne	.+12     	; 0x11b0 <xTaskResumeAll+0x76>
    11a4:	80 89       	ldd	r24, Z+16	; 0x10
    11a6:	91 89       	ldd	r25, Z+17	; 0x11
    11a8:	12 96       	adiw	r26, 0x02	; 2
    11aa:	9c 93       	st	X, r25
    11ac:	8e 93       	st	-X, r24
    11ae:	11 97       	sbiw	r26, 0x01	; 1
    11b0:	15 8a       	std	Z+21, r1	; 0x15
    11b2:	14 8a       	std	Z+20, r1	; 0x14
    11b4:	8c 91       	ld	r24, X
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	8c 93       	st	X, r24
    11ba:	a2 85       	ldd	r26, Z+10	; 0x0a
    11bc:	b3 85       	ldd	r27, Z+11	; 0x0b
    11be:	84 81       	ldd	r24, Z+4	; 0x04
    11c0:	95 81       	ldd	r25, Z+5	; 0x05
    11c2:	26 81       	ldd	r18, Z+6	; 0x06
    11c4:	37 81       	ldd	r19, Z+7	; 0x07
    11c6:	ec 01       	movw	r28, r24
    11c8:	3d 83       	std	Y+5, r19	; 0x05
    11ca:	2c 83       	std	Y+4, r18	; 0x04
    11cc:	86 81       	ldd	r24, Z+6	; 0x06
    11ce:	97 81       	ldd	r25, Z+7	; 0x07
    11d0:	24 81       	ldd	r18, Z+4	; 0x04
    11d2:	35 81       	ldd	r19, Z+5	; 0x05
    11d4:	ec 01       	movw	r28, r24
    11d6:	3b 83       	std	Y+3, r19	; 0x03
    11d8:	2a 83       	std	Y+2, r18	; 0x02
    11da:	9f 01       	movw	r18, r30
    11dc:	2e 5f       	subi	r18, 0xFE	; 254
    11de:	3f 4f       	sbci	r19, 0xFF	; 255
    11e0:	11 96       	adiw	r26, 0x01	; 1
    11e2:	8d 91       	ld	r24, X+
    11e4:	9c 91       	ld	r25, X
    11e6:	12 97       	sbiw	r26, 0x02	; 2
    11e8:	82 17       	cp	r24, r18
    11ea:	93 07       	cpc	r25, r19
    11ec:	31 f4       	brne	.+12     	; 0x11fa <xTaskResumeAll+0xc0>
    11ee:	86 81       	ldd	r24, Z+6	; 0x06
    11f0:	97 81       	ldd	r25, Z+7	; 0x07
    11f2:	12 96       	adiw	r26, 0x02	; 2
    11f4:	9c 93       	st	X, r25
    11f6:	8e 93       	st	-X, r24
    11f8:	11 97       	sbiw	r26, 0x01	; 1
    11fa:	13 86       	std	Z+11, r1	; 0x0b
    11fc:	12 86       	std	Z+10, r1	; 0x0a
    11fe:	8c 91       	ld	r24, X
    1200:	81 50       	subi	r24, 0x01	; 1
    1202:	8c 93       	st	X, r24
    1204:	86 89       	ldd	r24, Z+22	; 0x16
    1206:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <uxTopReadyPriority>
    120a:	98 17       	cp	r25, r24
    120c:	10 f4       	brcc	.+4      	; 0x1212 <xTaskResumeAll+0xd8>
    120e:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <uxTopReadyPriority>
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	dc 01       	movw	r26, r24
    1216:	aa 0f       	add	r26, r26
    1218:	bb 1f       	adc	r27, r27
    121a:	aa 0f       	add	r26, r26
    121c:	bb 1f       	adc	r27, r27
    121e:	aa 0f       	add	r26, r26
    1220:	bb 1f       	adc	r27, r27
    1222:	8a 0f       	add	r24, r26
    1224:	9b 1f       	adc	r25, r27
    1226:	dc 01       	movw	r26, r24
    1228:	a4 54       	subi	r26, 0x44	; 68
    122a:	b9 4f       	sbci	r27, 0xF9	; 249
    122c:	11 96       	adiw	r26, 0x01	; 1
    122e:	0d 90       	ld	r0, X+
    1230:	bc 91       	ld	r27, X
    1232:	a0 2d       	mov	r26, r0
    1234:	b5 83       	std	Z+5, r27	; 0x05
    1236:	a4 83       	std	Z+4, r26	; 0x04
    1238:	14 96       	adiw	r26, 0x04	; 4
    123a:	8d 91       	ld	r24, X+
    123c:	9c 91       	ld	r25, X
    123e:	15 97       	sbiw	r26, 0x05	; 5
    1240:	97 83       	std	Z+7, r25	; 0x07
    1242:	86 83       	std	Z+6, r24	; 0x06
    1244:	14 96       	adiw	r26, 0x04	; 4
    1246:	8d 91       	ld	r24, X+
    1248:	9c 91       	ld	r25, X
    124a:	15 97       	sbiw	r26, 0x05	; 5
    124c:	ec 01       	movw	r28, r24
    124e:	3b 83       	std	Y+3, r19	; 0x03
    1250:	2a 83       	std	Y+2, r18	; 0x02
    1252:	15 96       	adiw	r26, 0x05	; 5
    1254:	3c 93       	st	X, r19
    1256:	2e 93       	st	-X, r18
    1258:	14 97       	sbiw	r26, 0x04	; 4
    125a:	a6 89       	ldd	r26, Z+22	; 0x16
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	cd 01       	movw	r24, r26
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	a8 0f       	add	r26, r24
    126e:	b9 1f       	adc	r27, r25
    1270:	a4 54       	subi	r26, 0x44	; 68
    1272:	b9 4f       	sbci	r27, 0xF9	; 249
    1274:	b3 87       	std	Z+11, r27	; 0x0b
    1276:	a2 87       	std	Z+10, r26	; 0x0a
    1278:	8c 91       	ld	r24, X
    127a:	8f 5f       	subi	r24, 0xFF	; 255
    127c:	8c 93       	st	X, r24
    127e:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    1282:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    1286:	96 89       	ldd	r25, Z+22	; 0x16
    1288:	56 96       	adiw	r26, 0x16	; 22
    128a:	8c 91       	ld	r24, X
    128c:	98 17       	cp	r25, r24
    128e:	40 f0       	brcs	.+16     	; 0x12a0 <xTaskResumeAll+0x166>
    1290:	40 93 8b 06 	sts	0x068B, r20	; 0x80068b <xYieldPending>
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <xTaskResumeAll+0x166>
    1296:	e0 e0       	ldi	r30, 0x00	; 0
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	6d e9       	ldi	r22, 0x9D	; 157
    129c:	76 e0       	ldi	r23, 0x06	; 6
    129e:	41 e0       	ldi	r20, 0x01	; 1
    12a0:	db 01       	movw	r26, r22
    12a2:	8c 91       	ld	r24, X
    12a4:	81 11       	cpse	r24, r1
    12a6:	5d cf       	rjmp	.-326    	; 0x1162 <xTaskResumeAll+0x28>
    12a8:	ef 2b       	or	r30, r31
    12aa:	11 f0       	breq	.+4      	; 0x12b0 <xTaskResumeAll+0x176>
    12ac:	0e 94 89 05 	call	0xb12	; 0xb12 <prvResetNextTaskUnblockTime>
    12b0:	c0 91 8c 06 	lds	r28, 0x068C	; 0x80068c <xPendedTicks>
    12b4:	d0 91 8d 06 	lds	r29, 0x068D	; 0x80068d <xPendedTicks+0x1>
    12b8:	20 97       	sbiw	r28, 0x00	; 0
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <xTaskResumeAll+0x19a>
    12bc:	11 e0       	ldi	r17, 0x01	; 1
    12be:	0e 94 7e 07 	call	0xefc	; 0xefc <xTaskIncrementTick>
    12c2:	81 11       	cpse	r24, r1
    12c4:	10 93 8b 06 	sts	0x068B, r17	; 0x80068b <xYieldPending>
    12c8:	21 97       	sbiw	r28, 0x01	; 1
    12ca:	c9 f7       	brne	.-14     	; 0x12be <xTaskResumeAll+0x184>
    12cc:	10 92 8d 06 	sts	0x068D, r1	; 0x80068d <xPendedTicks+0x1>
    12d0:	10 92 8c 06 	sts	0x068C, r1	; 0x80068c <xPendedTicks>
    12d4:	80 91 8b 06 	lds	r24, 0x068B	; 0x80068b <xYieldPending>
    12d8:	88 23       	and	r24, r24
    12da:	31 f0       	breq	.+12     	; 0x12e8 <xTaskResumeAll+0x1ae>
    12dc:	0e 94 92 0b 	call	0x1724	; 0x1724 <vPortYield>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	03 c0       	rjmp	.+6      	; 0x12ea <xTaskResumeAll+0x1b0>
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	01 c0       	rjmp	.+2      	; 0x12ea <xTaskResumeAll+0x1b0>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	df 91       	pop	r29
    12f0:	cf 91       	pop	r28
    12f2:	1f 91       	pop	r17
    12f4:	08 95       	ret

000012f6 <vTaskSwitchContext>:
    12f6:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxSchedulerSuspended>
    12fa:	88 23       	and	r24, r24
    12fc:	21 f0       	breq	.+8      	; 0x1306 <vTaskSwitchContext+0x10>
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xYieldPending>
    1304:	08 95       	ret
    1306:	10 92 8b 06 	sts	0x068B, r1	; 0x80068b <xYieldPending>
    130a:	20 91 8f 06 	lds	r18, 0x068F	; 0x80068f <uxTopReadyPriority>
    130e:	82 2f       	mov	r24, r18
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	fc 01       	movw	r30, r24
    1314:	ee 0f       	add	r30, r30
    1316:	ff 1f       	adc	r31, r31
    1318:	ee 0f       	add	r30, r30
    131a:	ff 1f       	adc	r31, r31
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	e8 0f       	add	r30, r24
    1322:	f9 1f       	adc	r31, r25
    1324:	e4 54       	subi	r30, 0x44	; 68
    1326:	f9 4f       	sbci	r31, 0xF9	; 249
    1328:	30 81       	ld	r19, Z
    132a:	31 11       	cpse	r19, r1
    132c:	11 c0       	rjmp	.+34     	; 0x1350 <vTaskSwitchContext+0x5a>
    132e:	21 50       	subi	r18, 0x01	; 1
    1330:	82 2f       	mov	r24, r18
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	fc 01       	movw	r30, r24
    1336:	ee 0f       	add	r30, r30
    1338:	ff 1f       	adc	r31, r31
    133a:	ee 0f       	add	r30, r30
    133c:	ff 1f       	adc	r31, r31
    133e:	ee 0f       	add	r30, r30
    1340:	ff 1f       	adc	r31, r31
    1342:	e8 0f       	add	r30, r24
    1344:	f9 1f       	adc	r31, r25
    1346:	e4 54       	subi	r30, 0x44	; 68
    1348:	f9 4f       	sbci	r31, 0xF9	; 249
    134a:	30 81       	ld	r19, Z
    134c:	33 23       	and	r19, r19
    134e:	79 f3       	breq	.-34     	; 0x132e <vTaskSwitchContext+0x38>
    1350:	ac 01       	movw	r20, r24
    1352:	44 0f       	add	r20, r20
    1354:	55 1f       	adc	r21, r21
    1356:	44 0f       	add	r20, r20
    1358:	55 1f       	adc	r21, r21
    135a:	44 0f       	add	r20, r20
    135c:	55 1f       	adc	r21, r21
    135e:	48 0f       	add	r20, r24
    1360:	59 1f       	adc	r21, r25
    1362:	da 01       	movw	r26, r20
    1364:	a4 54       	subi	r26, 0x44	; 68
    1366:	b9 4f       	sbci	r27, 0xF9	; 249
    1368:	11 96       	adiw	r26, 0x01	; 1
    136a:	ed 91       	ld	r30, X+
    136c:	fc 91       	ld	r31, X
    136e:	12 97       	sbiw	r26, 0x02	; 2
    1370:	02 80       	ldd	r0, Z+2	; 0x02
    1372:	f3 81       	ldd	r31, Z+3	; 0x03
    1374:	e0 2d       	mov	r30, r0
    1376:	12 96       	adiw	r26, 0x02	; 2
    1378:	fc 93       	st	X, r31
    137a:	ee 93       	st	-X, r30
    137c:	11 97       	sbiw	r26, 0x01	; 1
    137e:	41 54       	subi	r20, 0x41	; 65
    1380:	59 4f       	sbci	r21, 0xF9	; 249
    1382:	e4 17       	cp	r30, r20
    1384:	f5 07       	cpc	r31, r21
    1386:	29 f4       	brne	.+10     	; 0x1392 <vTaskSwitchContext+0x9c>
    1388:	42 81       	ldd	r20, Z+2	; 0x02
    138a:	53 81       	ldd	r21, Z+3	; 0x03
    138c:	fd 01       	movw	r30, r26
    138e:	52 83       	std	Z+2, r21	; 0x02
    1390:	41 83       	std	Z+1, r20	; 0x01
    1392:	fc 01       	movw	r30, r24
    1394:	ee 0f       	add	r30, r30
    1396:	ff 1f       	adc	r31, r31
    1398:	ee 0f       	add	r30, r30
    139a:	ff 1f       	adc	r31, r31
    139c:	ee 0f       	add	r30, r30
    139e:	ff 1f       	adc	r31, r31
    13a0:	8e 0f       	add	r24, r30
    13a2:	9f 1f       	adc	r25, r31
    13a4:	fc 01       	movw	r30, r24
    13a6:	e4 54       	subi	r30, 0x44	; 68
    13a8:	f9 4f       	sbci	r31, 0xF9	; 249
    13aa:	01 80       	ldd	r0, Z+1	; 0x01
    13ac:	f2 81       	ldd	r31, Z+2	; 0x02
    13ae:	e0 2d       	mov	r30, r0
    13b0:	86 81       	ldd	r24, Z+6	; 0x06
    13b2:	97 81       	ldd	r25, Z+7	; 0x07
    13b4:	90 93 e1 06 	sts	0x06E1, r25	; 0x8006e1 <pxCurrentTCB+0x1>
    13b8:	80 93 e0 06 	sts	0x06E0, r24	; 0x8006e0 <pxCurrentTCB>
    13bc:	20 93 8f 06 	sts	0x068F, r18	; 0x80068f <uxTopReadyPriority>
    13c0:	08 95       	ret

000013c2 <vTaskPlaceOnEventList>:
    13c2:	cf 93       	push	r28
    13c4:	df 93       	push	r29
    13c6:	eb 01       	movw	r28, r22
    13c8:	60 91 e0 06 	lds	r22, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    13cc:	70 91 e1 06 	lds	r23, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    13d0:	64 5f       	subi	r22, 0xF4	; 244
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	0e 94 97 02 	call	0x52e	; 0x52e <vListInsert>
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	ce 01       	movw	r24, r28
    13dc:	0e 94 dd 05 	call	0xbba	; 0xbba <prvAddCurrentTaskToDelayedList>
    13e0:	df 91       	pop	r29
    13e2:	cf 91       	pop	r28
    13e4:	08 95       	ret

000013e6 <xTaskRemoveFromEventList>:
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	dc 01       	movw	r26, r24
    13ec:	15 96       	adiw	r26, 0x05	; 5
    13ee:	ed 91       	ld	r30, X+
    13f0:	fc 91       	ld	r31, X
    13f2:	16 97       	sbiw	r26, 0x06	; 6
    13f4:	06 80       	ldd	r0, Z+6	; 0x06
    13f6:	f7 81       	ldd	r31, Z+7	; 0x07
    13f8:	e0 2d       	mov	r30, r0
    13fa:	a4 89       	ldd	r26, Z+20	; 0x14
    13fc:	b5 89       	ldd	r27, Z+21	; 0x15
    13fe:	c6 85       	ldd	r28, Z+14	; 0x0e
    1400:	d7 85       	ldd	r29, Z+15	; 0x0f
    1402:	80 89       	ldd	r24, Z+16	; 0x10
    1404:	91 89       	ldd	r25, Z+17	; 0x11
    1406:	9d 83       	std	Y+5, r25	; 0x05
    1408:	8c 83       	std	Y+4, r24	; 0x04
    140a:	c0 89       	ldd	r28, Z+16	; 0x10
    140c:	d1 89       	ldd	r29, Z+17	; 0x11
    140e:	86 85       	ldd	r24, Z+14	; 0x0e
    1410:	97 85       	ldd	r25, Z+15	; 0x0f
    1412:	9b 83       	std	Y+3, r25	; 0x03
    1414:	8a 83       	std	Y+2, r24	; 0x02
    1416:	9f 01       	movw	r18, r30
    1418:	24 5f       	subi	r18, 0xF4	; 244
    141a:	3f 4f       	sbci	r19, 0xFF	; 255
    141c:	11 96       	adiw	r26, 0x01	; 1
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	12 97       	sbiw	r26, 0x02	; 2
    1424:	82 17       	cp	r24, r18
    1426:	93 07       	cpc	r25, r19
    1428:	31 f4       	brne	.+12     	; 0x1436 <xTaskRemoveFromEventList+0x50>
    142a:	80 89       	ldd	r24, Z+16	; 0x10
    142c:	91 89       	ldd	r25, Z+17	; 0x11
    142e:	12 96       	adiw	r26, 0x02	; 2
    1430:	9c 93       	st	X, r25
    1432:	8e 93       	st	-X, r24
    1434:	11 97       	sbiw	r26, 0x01	; 1
    1436:	15 8a       	std	Z+21, r1	; 0x15
    1438:	14 8a       	std	Z+20, r1	; 0x14
    143a:	8c 91       	ld	r24, X
    143c:	81 50       	subi	r24, 0x01	; 1
    143e:	8c 93       	st	X, r24
    1440:	80 91 84 06 	lds	r24, 0x0684	; 0x800684 <uxSchedulerSuspended>
    1444:	81 11       	cpse	r24, r1
    1446:	60 c0       	rjmp	.+192    	; 0x1508 <xTaskRemoveFromEventList+0x122>
    1448:	a2 85       	ldd	r26, Z+10	; 0x0a
    144a:	b3 85       	ldd	r27, Z+11	; 0x0b
    144c:	c4 81       	ldd	r28, Z+4	; 0x04
    144e:	d5 81       	ldd	r29, Z+5	; 0x05
    1450:	86 81       	ldd	r24, Z+6	; 0x06
    1452:	97 81       	ldd	r25, Z+7	; 0x07
    1454:	9d 83       	std	Y+5, r25	; 0x05
    1456:	8c 83       	std	Y+4, r24	; 0x04
    1458:	c6 81       	ldd	r28, Z+6	; 0x06
    145a:	d7 81       	ldd	r29, Z+7	; 0x07
    145c:	84 81       	ldd	r24, Z+4	; 0x04
    145e:	95 81       	ldd	r25, Z+5	; 0x05
    1460:	9b 83       	std	Y+3, r25	; 0x03
    1462:	8a 83       	std	Y+2, r24	; 0x02
    1464:	9f 01       	movw	r18, r30
    1466:	2e 5f       	subi	r18, 0xFE	; 254
    1468:	3f 4f       	sbci	r19, 0xFF	; 255
    146a:	11 96       	adiw	r26, 0x01	; 1
    146c:	8d 91       	ld	r24, X+
    146e:	9c 91       	ld	r25, X
    1470:	12 97       	sbiw	r26, 0x02	; 2
    1472:	82 17       	cp	r24, r18
    1474:	93 07       	cpc	r25, r19
    1476:	31 f4       	brne	.+12     	; 0x1484 <xTaskRemoveFromEventList+0x9e>
    1478:	86 81       	ldd	r24, Z+6	; 0x06
    147a:	97 81       	ldd	r25, Z+7	; 0x07
    147c:	12 96       	adiw	r26, 0x02	; 2
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	11 97       	sbiw	r26, 0x01	; 1
    1484:	13 86       	std	Z+11, r1	; 0x0b
    1486:	12 86       	std	Z+10, r1	; 0x0a
    1488:	8c 91       	ld	r24, X
    148a:	81 50       	subi	r24, 0x01	; 1
    148c:	8c 93       	st	X, r24
    148e:	86 89       	ldd	r24, Z+22	; 0x16
    1490:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <uxTopReadyPriority>
    1494:	98 17       	cp	r25, r24
    1496:	10 f4       	brcc	.+4      	; 0x149c <xTaskRemoveFromEventList+0xb6>
    1498:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <uxTopReadyPriority>
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	dc 01       	movw	r26, r24
    14a0:	aa 0f       	add	r26, r26
    14a2:	bb 1f       	adc	r27, r27
    14a4:	aa 0f       	add	r26, r26
    14a6:	bb 1f       	adc	r27, r27
    14a8:	aa 0f       	add	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	8a 0f       	add	r24, r26
    14ae:	9b 1f       	adc	r25, r27
    14b0:	dc 01       	movw	r26, r24
    14b2:	a4 54       	subi	r26, 0x44	; 68
    14b4:	b9 4f       	sbci	r27, 0xF9	; 249
    14b6:	11 96       	adiw	r26, 0x01	; 1
    14b8:	0d 90       	ld	r0, X+
    14ba:	bc 91       	ld	r27, X
    14bc:	a0 2d       	mov	r26, r0
    14be:	b5 83       	std	Z+5, r27	; 0x05
    14c0:	a4 83       	std	Z+4, r26	; 0x04
    14c2:	14 96       	adiw	r26, 0x04	; 4
    14c4:	8d 91       	ld	r24, X+
    14c6:	9c 91       	ld	r25, X
    14c8:	15 97       	sbiw	r26, 0x05	; 5
    14ca:	97 83       	std	Z+7, r25	; 0x07
    14cc:	86 83       	std	Z+6, r24	; 0x06
    14ce:	14 96       	adiw	r26, 0x04	; 4
    14d0:	cd 91       	ld	r28, X+
    14d2:	dc 91       	ld	r29, X
    14d4:	15 97       	sbiw	r26, 0x05	; 5
    14d6:	3b 83       	std	Y+3, r19	; 0x03
    14d8:	2a 83       	std	Y+2, r18	; 0x02
    14da:	15 96       	adiw	r26, 0x05	; 5
    14dc:	3c 93       	st	X, r19
    14de:	2e 93       	st	-X, r18
    14e0:	14 97       	sbiw	r26, 0x04	; 4
    14e2:	a6 89       	ldd	r26, Z+22	; 0x16
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	cd 01       	movw	r24, r26
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	a8 0f       	add	r26, r24
    14f6:	b9 1f       	adc	r27, r25
    14f8:	a4 54       	subi	r26, 0x44	; 68
    14fa:	b9 4f       	sbci	r27, 0xF9	; 249
    14fc:	b3 87       	std	Z+11, r27	; 0x0b
    14fe:	a2 87       	std	Z+10, r26	; 0x0a
    1500:	8c 91       	ld	r24, X
    1502:	8f 5f       	subi	r24, 0xFF	; 255
    1504:	8c 93       	st	X, r24
    1506:	1c c0       	rjmp	.+56     	; 0x1540 <xTaskRemoveFromEventList+0x15a>
    1508:	4d e9       	ldi	r20, 0x9D	; 157
    150a:	56 e0       	ldi	r21, 0x06	; 6
    150c:	da 01       	movw	r26, r20
    150e:	11 96       	adiw	r26, 0x01	; 1
    1510:	cd 91       	ld	r28, X+
    1512:	dc 91       	ld	r29, X
    1514:	12 97       	sbiw	r26, 0x02	; 2
    1516:	d7 87       	std	Z+15, r29	; 0x0f
    1518:	c6 87       	std	Z+14, r28	; 0x0e
    151a:	8c 81       	ldd	r24, Y+4	; 0x04
    151c:	9d 81       	ldd	r25, Y+5	; 0x05
    151e:	91 8b       	std	Z+17, r25	; 0x11
    1520:	80 8b       	std	Z+16, r24	; 0x10
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	dc 01       	movw	r26, r24
    1528:	13 96       	adiw	r26, 0x03	; 3
    152a:	3c 93       	st	X, r19
    152c:	2e 93       	st	-X, r18
    152e:	12 97       	sbiw	r26, 0x02	; 2
    1530:	3d 83       	std	Y+5, r19	; 0x05
    1532:	2c 83       	std	Y+4, r18	; 0x04
    1534:	55 8b       	std	Z+21, r21	; 0x15
    1536:	44 8b       	std	Z+20, r20	; 0x14
    1538:	da 01       	movw	r26, r20
    153a:	8c 91       	ld	r24, X
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	8c 93       	st	X, r24
    1540:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    1544:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    1548:	96 89       	ldd	r25, Z+22	; 0x16
    154a:	56 96       	adiw	r26, 0x16	; 22
    154c:	8c 91       	ld	r24, X
    154e:	89 17       	cp	r24, r25
    1550:	20 f4       	brcc	.+8      	; 0x155a <xTaskRemoveFromEventList+0x174>
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xYieldPending>
    1558:	01 c0       	rjmp	.+2      	; 0x155c <xTaskRemoveFromEventList+0x176>
    155a:	80 e0       	ldi	r24, 0x00	; 0
    155c:	df 91       	pop	r29
    155e:	cf 91       	pop	r28
    1560:	08 95       	ret

00001562 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    1562:	20 91 8a 06 	lds	r18, 0x068A	; 0x80068a <xNumOfOverflows>
    1566:	fc 01       	movw	r30, r24
    1568:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    156a:	20 91 90 06 	lds	r18, 0x0690	; 0x800690 <xTickCount>
    156e:	30 91 91 06 	lds	r19, 0x0691	; 0x800691 <xTickCount+0x1>
    1572:	32 83       	std	Z+2, r19	; 0x02
    1574:	21 83       	std	Z+1, r18	; 0x01
    1576:	08 95       	ret

00001578 <xTaskCheckForTimeOut>:
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    157e:	20 91 90 06 	lds	r18, 0x0690	; 0x800690 <xTickCount>
    1582:	30 91 91 06 	lds	r19, 0x0691	; 0x800691 <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    1586:	dc 01       	movw	r26, r24
    1588:	11 96       	adiw	r26, 0x01	; 1
    158a:	4d 91       	ld	r20, X+
    158c:	5c 91       	ld	r21, X
    158e:	12 97       	sbiw	r26, 0x02	; 2
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    1590:	e0 91 8a 06 	lds	r30, 0x068A	; 0x80068a <xNumOfOverflows>
    1594:	fc 91       	ld	r31, X
    1596:	fe 17       	cp	r31, r30
    1598:	41 f0       	breq	.+16     	; 0x15aa <xTaskCheckForTimeOut+0x32>
    159a:	24 17       	cp	r18, r20
    159c:	35 07       	cpc	r19, r21
    159e:	28 f0       	brcs	.+10     	; 0x15aa <xTaskCheckForTimeOut+0x32>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    15a0:	fb 01       	movw	r30, r22
    15a2:	11 82       	std	Z+1, r1	; 0x01
    15a4:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    15a8:	15 c0       	rjmp	.+42     	; 0x15d4 <xTaskCheckForTimeOut+0x5c>

    taskENTER_CRITICAL();
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    15aa:	24 1b       	sub	r18, r20
    15ac:	35 0b       	sbc	r19, r21
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    15ae:	db 01       	movw	r26, r22
    15b0:	4d 91       	ld	r20, X+
    15b2:	5c 91       	ld	r21, X
    15b4:	24 17       	cp	r18, r20
    15b6:	35 07       	cpc	r19, r21
    15b8:	48 f4       	brcc	.+18     	; 0x15cc <xTaskCheckForTimeOut+0x54>
    15ba:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    15bc:	42 1b       	sub	r20, r18
    15be:	53 0b       	sbc	r21, r19
    15c0:	51 83       	std	Z+1, r21	; 0x01
    15c2:	40 83       	st	Z, r20
            vTaskInternalSetTimeOutState( pxTimeOut );
    15c4:	0e 94 b1 0a 	call	0x1562	; 0x1562 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	04 c0       	rjmp	.+8      	; 0x15d4 <xTaskCheckForTimeOut+0x5c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    15cc:	fb 01       	movw	r30, r22
    15ce:	11 82       	std	Z+1, r1	; 0x01
    15d0:	10 82       	st	Z, r1
            xReturn = pdTRUE;
    15d2:	81 e0       	ldi	r24, 0x01	; 1
        }
    }
    taskEXIT_CRITICAL();
    15d4:	0f 90       	pop	r0
    15d6:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    15d8:	08 95       	ret

000015da <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	80 93 8b 06 	sts	0x068B, r24	; 0x80068b <xYieldPending>
    15e0:	08 95       	ret

000015e2 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    15e2:	31 e1       	ldi	r19, 0x11	; 17
    15e4:	fc 01       	movw	r30, r24
    15e6:	30 83       	st	Z, r19
    15e8:	31 97       	sbiw	r30, 0x01	; 1
    15ea:	22 e2       	ldi	r18, 0x22	; 34
    15ec:	20 83       	st	Z, r18
    15ee:	31 97       	sbiw	r30, 0x01	; 1
    15f0:	a3 e3       	ldi	r26, 0x33	; 51
    15f2:	a0 83       	st	Z, r26
    15f4:	31 97       	sbiw	r30, 0x01	; 1
    15f6:	60 83       	st	Z, r22
    15f8:	31 97       	sbiw	r30, 0x01	; 1
    15fa:	70 83       	st	Z, r23
    15fc:	31 97       	sbiw	r30, 0x01	; 1
    15fe:	10 82       	st	Z, r1
    1600:	31 97       	sbiw	r30, 0x01	; 1
    1602:	60 e8       	ldi	r22, 0x80	; 128
    1604:	60 83       	st	Z, r22
    1606:	31 97       	sbiw	r30, 0x01	; 1
    1608:	10 82       	st	Z, r1
    160a:	31 97       	sbiw	r30, 0x01	; 1
    160c:	62 e0       	ldi	r22, 0x02	; 2
    160e:	60 83       	st	Z, r22
    1610:	31 97       	sbiw	r30, 0x01	; 1
    1612:	63 e0       	ldi	r22, 0x03	; 3
    1614:	60 83       	st	Z, r22
    1616:	31 97       	sbiw	r30, 0x01	; 1
    1618:	64 e0       	ldi	r22, 0x04	; 4
    161a:	60 83       	st	Z, r22
    161c:	31 97       	sbiw	r30, 0x01	; 1
    161e:	65 e0       	ldi	r22, 0x05	; 5
    1620:	60 83       	st	Z, r22
    1622:	31 97       	sbiw	r30, 0x01	; 1
    1624:	66 e0       	ldi	r22, 0x06	; 6
    1626:	60 83       	st	Z, r22
    1628:	31 97       	sbiw	r30, 0x01	; 1
    162a:	67 e0       	ldi	r22, 0x07	; 7
    162c:	60 83       	st	Z, r22
    162e:	31 97       	sbiw	r30, 0x01	; 1
    1630:	68 e0       	ldi	r22, 0x08	; 8
    1632:	60 83       	st	Z, r22
    1634:	31 97       	sbiw	r30, 0x01	; 1
    1636:	69 e0       	ldi	r22, 0x09	; 9
    1638:	60 83       	st	Z, r22
    163a:	31 97       	sbiw	r30, 0x01	; 1
    163c:	60 e1       	ldi	r22, 0x10	; 16
    163e:	60 83       	st	Z, r22
    1640:	31 97       	sbiw	r30, 0x01	; 1
    1642:	30 83       	st	Z, r19
    1644:	31 97       	sbiw	r30, 0x01	; 1
    1646:	32 e1       	ldi	r19, 0x12	; 18
    1648:	30 83       	st	Z, r19
    164a:	31 97       	sbiw	r30, 0x01	; 1
    164c:	33 e1       	ldi	r19, 0x13	; 19
    164e:	30 83       	st	Z, r19
    1650:	31 97       	sbiw	r30, 0x01	; 1
    1652:	34 e1       	ldi	r19, 0x14	; 20
    1654:	30 83       	st	Z, r19
    1656:	31 97       	sbiw	r30, 0x01	; 1
    1658:	35 e1       	ldi	r19, 0x15	; 21
    165a:	30 83       	st	Z, r19
    165c:	31 97       	sbiw	r30, 0x01	; 1
    165e:	36 e1       	ldi	r19, 0x16	; 22
    1660:	30 83       	st	Z, r19
    1662:	31 97       	sbiw	r30, 0x01	; 1
    1664:	37 e1       	ldi	r19, 0x17	; 23
    1666:	30 83       	st	Z, r19
    1668:	31 97       	sbiw	r30, 0x01	; 1
    166a:	38 e1       	ldi	r19, 0x18	; 24
    166c:	30 83       	st	Z, r19
    166e:	31 97       	sbiw	r30, 0x01	; 1
    1670:	39 e1       	ldi	r19, 0x19	; 25
    1672:	30 83       	st	Z, r19
    1674:	31 97       	sbiw	r30, 0x01	; 1
    1676:	30 e2       	ldi	r19, 0x20	; 32
    1678:	30 83       	st	Z, r19
    167a:	31 97       	sbiw	r30, 0x01	; 1
    167c:	31 e2       	ldi	r19, 0x21	; 33
    167e:	30 83       	st	Z, r19
    1680:	31 97       	sbiw	r30, 0x01	; 1
    1682:	20 83       	st	Z, r18
    1684:	31 97       	sbiw	r30, 0x01	; 1
    1686:	23 e2       	ldi	r18, 0x23	; 35
    1688:	20 83       	st	Z, r18
    168a:	31 97       	sbiw	r30, 0x01	; 1
    168c:	40 83       	st	Z, r20
    168e:	31 97       	sbiw	r30, 0x01	; 1
    1690:	50 83       	st	Z, r21
    1692:	31 97       	sbiw	r30, 0x01	; 1
    1694:	26 e2       	ldi	r18, 0x26	; 38
    1696:	20 83       	st	Z, r18
    1698:	31 97       	sbiw	r30, 0x01	; 1
    169a:	27 e2       	ldi	r18, 0x27	; 39
    169c:	20 83       	st	Z, r18
    169e:	31 97       	sbiw	r30, 0x01	; 1
    16a0:	28 e2       	ldi	r18, 0x28	; 40
    16a2:	20 83       	st	Z, r18
    16a4:	31 97       	sbiw	r30, 0x01	; 1
    16a6:	29 e2       	ldi	r18, 0x29	; 41
    16a8:	20 83       	st	Z, r18
    16aa:	31 97       	sbiw	r30, 0x01	; 1
    16ac:	20 e3       	ldi	r18, 0x30	; 48
    16ae:	20 83       	st	Z, r18
    16b0:	31 97       	sbiw	r30, 0x01	; 1
    16b2:	21 e3       	ldi	r18, 0x31	; 49
    16b4:	20 83       	st	Z, r18
    16b6:	86 97       	sbiw	r24, 0x26	; 38
    16b8:	08 95       	ret

000016ba <xPortStartScheduler>:
    16ba:	1b bc       	out	0x2b, r1	; 43
    16bc:	89 ef       	ldi	r24, 0xF9	; 249
    16be:	8a bd       	out	0x2a, r24	; 42
    16c0:	8b e0       	ldi	r24, 0x0B	; 11
    16c2:	8e bd       	out	0x2e, r24	; 46
    16c4:	89 b7       	in	r24, 0x39	; 57
    16c6:	80 61       	ori	r24, 0x10	; 16
    16c8:	89 bf       	out	0x39, r24	; 57
    16ca:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    16ce:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    16d2:	cd 91       	ld	r28, X+
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	dd 91       	ld	r29, X+
    16d8:	de bf       	out	0x3e, r29	; 62
    16da:	ff 91       	pop	r31
    16dc:	ef 91       	pop	r30
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	bf 91       	pop	r27
    16e4:	af 91       	pop	r26
    16e6:	9f 91       	pop	r25
    16e8:	8f 91       	pop	r24
    16ea:	7f 91       	pop	r23
    16ec:	6f 91       	pop	r22
    16ee:	5f 91       	pop	r21
    16f0:	4f 91       	pop	r20
    16f2:	3f 91       	pop	r19
    16f4:	2f 91       	pop	r18
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	ff 90       	pop	r15
    16fc:	ef 90       	pop	r14
    16fe:	df 90       	pop	r13
    1700:	cf 90       	pop	r12
    1702:	bf 90       	pop	r11
    1704:	af 90       	pop	r10
    1706:	9f 90       	pop	r9
    1708:	8f 90       	pop	r8
    170a:	7f 90       	pop	r7
    170c:	6f 90       	pop	r6
    170e:	5f 90       	pop	r5
    1710:	4f 90       	pop	r4
    1712:	3f 90       	pop	r3
    1714:	2f 90       	pop	r2
    1716:	1f 90       	pop	r1
    1718:	0f 90       	pop	r0
    171a:	0f be       	out	0x3f, r0	; 63
    171c:	0f 90       	pop	r0
    171e:	08 95       	ret
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	08 95       	ret

00001724 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	f8 94       	cli
    172a:	0f 92       	push	r0
    172c:	1f 92       	push	r1
    172e:	11 24       	eor	r1, r1
    1730:	2f 92       	push	r2
    1732:	3f 92       	push	r3
    1734:	4f 92       	push	r4
    1736:	5f 92       	push	r5
    1738:	6f 92       	push	r6
    173a:	7f 92       	push	r7
    173c:	8f 92       	push	r8
    173e:	9f 92       	push	r9
    1740:	af 92       	push	r10
    1742:	bf 92       	push	r11
    1744:	cf 92       	push	r12
    1746:	df 92       	push	r13
    1748:	ef 92       	push	r14
    174a:	ff 92       	push	r15
    174c:	0f 93       	push	r16
    174e:	1f 93       	push	r17
    1750:	2f 93       	push	r18
    1752:	3f 93       	push	r19
    1754:	4f 93       	push	r20
    1756:	5f 93       	push	r21
    1758:	6f 93       	push	r22
    175a:	7f 93       	push	r23
    175c:	8f 93       	push	r24
    175e:	9f 93       	push	r25
    1760:	af 93       	push	r26
    1762:	bf 93       	push	r27
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
    1768:	ef 93       	push	r30
    176a:	ff 93       	push	r31
    176c:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    1770:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    1774:	0d b6       	in	r0, 0x3d	; 61
    1776:	0d 92       	st	X+, r0
    1778:	0e b6       	in	r0, 0x3e	; 62
    177a:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    177c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1780:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    1784:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    1788:	cd 91       	ld	r28, X+
    178a:	cd bf       	out	0x3d, r28	; 61
    178c:	dd 91       	ld	r29, X+
    178e:	de bf       	out	0x3e, r29	; 62
    1790:	ff 91       	pop	r31
    1792:	ef 91       	pop	r30
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	bf 91       	pop	r27
    179a:	af 91       	pop	r26
    179c:	9f 91       	pop	r25
    179e:	8f 91       	pop	r24
    17a0:	7f 91       	pop	r23
    17a2:	6f 91       	pop	r22
    17a4:	5f 91       	pop	r21
    17a6:	4f 91       	pop	r20
    17a8:	3f 91       	pop	r19
    17aa:	2f 91       	pop	r18
    17ac:	1f 91       	pop	r17
    17ae:	0f 91       	pop	r16
    17b0:	ff 90       	pop	r15
    17b2:	ef 90       	pop	r14
    17b4:	df 90       	pop	r13
    17b6:	cf 90       	pop	r12
    17b8:	bf 90       	pop	r11
    17ba:	af 90       	pop	r10
    17bc:	9f 90       	pop	r9
    17be:	8f 90       	pop	r8
    17c0:	7f 90       	pop	r7
    17c2:	6f 90       	pop	r6
    17c4:	5f 90       	pop	r5
    17c6:	4f 90       	pop	r4
    17c8:	3f 90       	pop	r3
    17ca:	2f 90       	pop	r2
    17cc:	1f 90       	pop	r1
    17ce:	0f 90       	pop	r0
    17d0:	0f be       	out	0x3f, r0	; 63
    17d2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    17d4:	08 95       	ret

000017d6 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	0f 92       	push	r0
    17de:	1f 92       	push	r1
    17e0:	11 24       	eor	r1, r1
    17e2:	2f 92       	push	r2
    17e4:	3f 92       	push	r3
    17e6:	4f 92       	push	r4
    17e8:	5f 92       	push	r5
    17ea:	6f 92       	push	r6
    17ec:	7f 92       	push	r7
    17ee:	8f 92       	push	r8
    17f0:	9f 92       	push	r9
    17f2:	af 92       	push	r10
    17f4:	bf 92       	push	r11
    17f6:	cf 92       	push	r12
    17f8:	df 92       	push	r13
    17fa:	ef 92       	push	r14
    17fc:	ff 92       	push	r15
    17fe:	0f 93       	push	r16
    1800:	1f 93       	push	r17
    1802:	2f 93       	push	r18
    1804:	3f 93       	push	r19
    1806:	4f 93       	push	r20
    1808:	5f 93       	push	r21
    180a:	6f 93       	push	r22
    180c:	7f 93       	push	r23
    180e:	8f 93       	push	r24
    1810:	9f 93       	push	r25
    1812:	af 93       	push	r26
    1814:	bf 93       	push	r27
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
    181e:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    1822:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    1826:	0d b6       	in	r0, 0x3d	; 61
    1828:	0d 92       	st	X+, r0
    182a:	0e b6       	in	r0, 0x3e	; 62
    182c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    182e:	0e 94 7e 07 	call	0xefc	; 0xefc <xTaskIncrementTick>
    1832:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1834:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1838:	a0 91 e0 06 	lds	r26, 0x06E0	; 0x8006e0 <pxCurrentTCB>
    183c:	b0 91 e1 06 	lds	r27, 0x06E1	; 0x8006e1 <pxCurrentTCB+0x1>
    1840:	cd 91       	ld	r28, X+
    1842:	cd bf       	out	0x3d, r28	; 61
    1844:	dd 91       	ld	r29, X+
    1846:	de bf       	out	0x3e, r29	; 62
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	df 91       	pop	r29
    184e:	cf 91       	pop	r28
    1850:	bf 91       	pop	r27
    1852:	af 91       	pop	r26
    1854:	9f 91       	pop	r25
    1856:	8f 91       	pop	r24
    1858:	7f 91       	pop	r23
    185a:	6f 91       	pop	r22
    185c:	5f 91       	pop	r21
    185e:	4f 91       	pop	r20
    1860:	3f 91       	pop	r19
    1862:	2f 91       	pop	r18
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	ff 90       	pop	r15
    186a:	ef 90       	pop	r14
    186c:	df 90       	pop	r13
    186e:	cf 90       	pop	r12
    1870:	bf 90       	pop	r11
    1872:	af 90       	pop	r10
    1874:	9f 90       	pop	r9
    1876:	8f 90       	pop	r8
    1878:	7f 90       	pop	r7
    187a:	6f 90       	pop	r6
    187c:	5f 90       	pop	r5
    187e:	4f 90       	pop	r4
    1880:	3f 90       	pop	r3
    1882:	2f 90       	pop	r2
    1884:	1f 90       	pop	r1
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    188c:	08 95       	ret

0000188e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
    188e:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1892:	18 95       	reti

00001894 <__udivmodhi4>:
    1894:	aa 1b       	sub	r26, r26
    1896:	bb 1b       	sub	r27, r27
    1898:	51 e1       	ldi	r21, 0x11	; 17
    189a:	07 c0       	rjmp	.+14     	; 0x18aa <__udivmodhi4_ep>

0000189c <__udivmodhi4_loop>:
    189c:	aa 1f       	adc	r26, r26
    189e:	bb 1f       	adc	r27, r27
    18a0:	a6 17       	cp	r26, r22
    18a2:	b7 07       	cpc	r27, r23
    18a4:	10 f0       	brcs	.+4      	; 0x18aa <__udivmodhi4_ep>
    18a6:	a6 1b       	sub	r26, r22
    18a8:	b7 0b       	sbc	r27, r23

000018aa <__udivmodhi4_ep>:
    18aa:	88 1f       	adc	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	5a 95       	dec	r21
    18b0:	a9 f7       	brne	.-22     	; 0x189c <__udivmodhi4_loop>
    18b2:	80 95       	com	r24
    18b4:	90 95       	com	r25
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	08 95       	ret

000018bc <__udivmodsi4>:
    18bc:	a1 e2       	ldi	r26, 0x21	; 33
    18be:	1a 2e       	mov	r1, r26
    18c0:	aa 1b       	sub	r26, r26
    18c2:	bb 1b       	sub	r27, r27
    18c4:	fd 01       	movw	r30, r26
    18c6:	0d c0       	rjmp	.+26     	; 0x18e2 <__udivmodsi4_ep>

000018c8 <__udivmodsi4_loop>:
    18c8:	aa 1f       	adc	r26, r26
    18ca:	bb 1f       	adc	r27, r27
    18cc:	ee 1f       	adc	r30, r30
    18ce:	ff 1f       	adc	r31, r31
    18d0:	a2 17       	cp	r26, r18
    18d2:	b3 07       	cpc	r27, r19
    18d4:	e4 07       	cpc	r30, r20
    18d6:	f5 07       	cpc	r31, r21
    18d8:	20 f0       	brcs	.+8      	; 0x18e2 <__udivmodsi4_ep>
    18da:	a2 1b       	sub	r26, r18
    18dc:	b3 0b       	sbc	r27, r19
    18de:	e4 0b       	sbc	r30, r20
    18e0:	f5 0b       	sbc	r31, r21

000018e2 <__udivmodsi4_ep>:
    18e2:	66 1f       	adc	r22, r22
    18e4:	77 1f       	adc	r23, r23
    18e6:	88 1f       	adc	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	1a 94       	dec	r1
    18ec:	69 f7       	brne	.-38     	; 0x18c8 <__udivmodsi4_loop>
    18ee:	60 95       	com	r22
    18f0:	70 95       	com	r23
    18f2:	80 95       	com	r24
    18f4:	90 95       	com	r25
    18f6:	9b 01       	movw	r18, r22
    18f8:	ac 01       	movw	r20, r24
    18fa:	bd 01       	movw	r22, r26
    18fc:	cf 01       	movw	r24, r30
    18fe:	08 95       	ret

00001900 <memcpy>:
    1900:	fb 01       	movw	r30, r22
    1902:	dc 01       	movw	r26, r24
    1904:	02 c0       	rjmp	.+4      	; 0x190a <memcpy+0xa>
    1906:	01 90       	ld	r0, Z+
    1908:	0d 92       	st	X+, r0
    190a:	41 50       	subi	r20, 0x01	; 1
    190c:	50 40       	sbci	r21, 0x00	; 0
    190e:	d8 f7       	brcc	.-10     	; 0x1906 <memcpy+0x6>
    1910:	08 95       	ret

00001912 <__itoa_ncheck>:
    1912:	bb 27       	eor	r27, r27
    1914:	4a 30       	cpi	r20, 0x0A	; 10
    1916:	31 f4       	brne	.+12     	; 0x1924 <__itoa_ncheck+0x12>
    1918:	99 23       	and	r25, r25
    191a:	22 f4       	brpl	.+8      	; 0x1924 <__itoa_ncheck+0x12>
    191c:	bd e2       	ldi	r27, 0x2D	; 45
    191e:	90 95       	com	r25
    1920:	81 95       	neg	r24
    1922:	9f 4f       	sbci	r25, 0xFF	; 255
    1924:	0c 94 95 0c 	jmp	0x192a	; 0x192a <__utoa_common>

00001928 <__utoa_ncheck>:
    1928:	bb 27       	eor	r27, r27

0000192a <__utoa_common>:
    192a:	fb 01       	movw	r30, r22
    192c:	55 27       	eor	r21, r21
    192e:	aa 27       	eor	r26, r26
    1930:	88 0f       	add	r24, r24
    1932:	99 1f       	adc	r25, r25
    1934:	aa 1f       	adc	r26, r26
    1936:	a4 17       	cp	r26, r20
    1938:	10 f0       	brcs	.+4      	; 0x193e <__utoa_common+0x14>
    193a:	a4 1b       	sub	r26, r20
    193c:	83 95       	inc	r24
    193e:	50 51       	subi	r21, 0x10	; 16
    1940:	b9 f7       	brne	.-18     	; 0x1930 <__utoa_common+0x6>
    1942:	a0 5d       	subi	r26, 0xD0	; 208
    1944:	aa 33       	cpi	r26, 0x3A	; 58
    1946:	08 f0       	brcs	.+2      	; 0x194a <__utoa_common+0x20>
    1948:	a9 5d       	subi	r26, 0xD9	; 217
    194a:	a1 93       	st	Z+, r26
    194c:	00 97       	sbiw	r24, 0x00	; 0
    194e:	79 f7       	brne	.-34     	; 0x192e <__utoa_common+0x4>
    1950:	b1 11       	cpse	r27, r1
    1952:	b1 93       	st	Z+, r27
    1954:	11 92       	st	Z+, r1
    1956:	cb 01       	movw	r24, r22
    1958:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <strrev>

0000195c <strrev>:
    195c:	dc 01       	movw	r26, r24
    195e:	fc 01       	movw	r30, r24
    1960:	67 2f       	mov	r22, r23
    1962:	71 91       	ld	r23, Z+
    1964:	77 23       	and	r23, r23
    1966:	e1 f7       	brne	.-8      	; 0x1960 <strrev+0x4>
    1968:	32 97       	sbiw	r30, 0x02	; 2
    196a:	04 c0       	rjmp	.+8      	; 0x1974 <strrev+0x18>
    196c:	7c 91       	ld	r23, X
    196e:	6d 93       	st	X+, r22
    1970:	70 83       	st	Z, r23
    1972:	62 91       	ld	r22, -Z
    1974:	ae 17       	cp	r26, r30
    1976:	bf 07       	cpc	r27, r31
    1978:	c8 f3       	brcs	.-14     	; 0x196c <strrev+0x10>
    197a:	08 95       	ret

0000197c <_exit>:
    197c:	f8 94       	cli

0000197e <__stop_program>:
    197e:	ff cf       	rjmp	.-2      	; 0x197e <__stop_program>
