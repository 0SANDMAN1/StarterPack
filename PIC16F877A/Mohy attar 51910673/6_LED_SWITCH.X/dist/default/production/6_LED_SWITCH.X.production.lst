

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Thu Nov 16 22:11:10 2023

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Generated 22/03/2023 GMT
    17                           ; 
    18                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    19                           ; All rights reserved.
    20                           ; 
    21                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    22                           ; 
    23                           ; Redistribution and use in source and binary forms, with or without modification, are
    24                           ; permitted provided that the following conditions are met:
    25                           ; 
    26                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    27                           ;        conditions and the following disclaimer.
    28                           ; 
    29                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    30                           ;        of conditions and the following disclaimer in the documentation and/or other
    31                           ;        materials provided with the distribution. Publication is not required when
    32                           ;        this file is used in an embedded application.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F877A Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  0091                     	;# 
    95  0092                     	;# 
    96  0093                     	;# 
    97  0094                     	;# 
    98  0098                     	;# 
    99  0099                     	;# 
   100  009C                     	;# 
   101  009D                     	;# 
   102  009E                     	;# 
   103  009F                     	;# 
   104  010C                     	;# 
   105  010D                     	;# 
   106  010E                     	;# 
   107  010F                     	;# 
   108  018C                     	;# 
   109  018D                     	;# 
   110  0000                     	;# 
   111  0001                     	;# 
   112  0002                     	;# 
   113  0003                     	;# 
   114  0004                     	;# 
   115  0005                     	;# 
   116  0006                     	;# 
   117  0007                     	;# 
   118  0008                     	;# 
   119  0009                     	;# 
   120  000A                     	;# 
   121  000B                     	;# 
   122  000C                     	;# 
   123  000D                     	;# 
   124  000E                     	;# 
   125  000E                     	;# 
   126  000F                     	;# 
   127  0010                     	;# 
   128  0011                     	;# 
   129  0012                     	;# 
   130  0013                     	;# 
   131  0014                     	;# 
   132  0015                     	;# 
   133  0015                     	;# 
   134  0016                     	;# 
   135  0017                     	;# 
   136  0018                     	;# 
   137  0019                     	;# 
   138  001A                     	;# 
   139  001B                     	;# 
   140  001B                     	;# 
   141  001C                     	;# 
   142  001D                     	;# 
   143  001E                     	;# 
   144  001F                     	;# 
   145  0081                     	;# 
   146  0085                     	;# 
   147  0086                     	;# 
   148  0087                     	;# 
   149  0088                     	;# 
   150  0089                     	;# 
   151  008C                     	;# 
   152  008D                     	;# 
   153  008E                     	;# 
   154  0091                     	;# 
   155  0092                     	;# 
   156  0093                     	;# 
   157  0094                     	;# 
   158  0098                     	;# 
   159  0099                     	;# 
   160  009C                     	;# 
   161  009D                     	;# 
   162  009E                     	;# 
   163  009F                     	;# 
   164  010C                     	;# 
   165  010D                     	;# 
   166  010E                     	;# 
   167  010F                     	;# 
   168  018C                     	;# 
   169  018D                     	;# 
   170                           
   171                           	psect	idataBANK0
   172  0641                     __pidataBANK0:
   173                           
   174                           ;initializer for _randx
   175  0641  3401               	retlw	1
   176  0642  3400               	retlw	0
   177  0643  3400               	retlw	0
   178  0644  3400               	retlw	0
   179  0006                     _PORTB	set	6
   180  0037                     _RB7	set	55
   181  0034                     _RB4	set	52
   182  0035                     _RB5	set	53
   183  0032                     _RB2	set	50
   184  0036                     _RB6	set	54
   185  0033                     _RB3	set	51
   186  0031                     _RB1	set	49
   187  0030                     _RB0	set	48
   188  0086                     _TRISB	set	134
   189                           
   190                           	psect	cinit
   191  07E4                     start_initialization:	
   192                           ; #config settings
   193                           
   194  07E4                     __initialization:
   195                           
   196                           ; Initialize objects allocated to BANK0
   197  07E4  120A  118A  2641  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   198  07E9  00B2               	movwf	__pdataBANK0& (0+127)
   199  07EA  120A  118A  2642  120A  118A  	fcall	__pidataBANK0+1	;fetch initializer
   200  07EF  00B3               	movwf	(__pdataBANK0+1)& (0+127)
   201  07F0  120A  118A  2643  120A  118A  	fcall	__pidataBANK0+2	;fetch initializer
   202  07F5  00B4               	movwf	(__pdataBANK0+2)& (0+127)
   203  07F6  120A  118A  2644  120A  118A  	fcall	__pidataBANK0+3	;fetch initializer
   204  07FB  00B5               	movwf	(__pdataBANK0+3)& (0+127)
   205  07FC                     end_of_initialization:	
   206                           ;End of C runtime variable initialization code
   207                           
   208  07FC                     __end_of__initialization:
   209  07FC  0183               	clrf	3
   210  07FD  120A  118A  2F2D   	ljmp	_main	;jump to C main() function
   211                           
   212                           	psect	dataBANK0
   213  0032                     __pdataBANK0:
   214  0032                     _randx:
   215  0032                     	ds	4
   216                           
   217                           	psect	cstackCOMMON
   218  0070                     __pcstackCOMMON:
   219  0070                     ?_main:
   220  0070                     ?___lmul:	
   221                           ; 1 bytes @ 0x0
   222                           
   223  0070                     ___lmul@multiplier:	
   224                           ; 4 bytes @ 0x0
   225                           
   226                           
   227                           ; 4 bytes @ 0x0
   228  0070                     	ds	4
   229  0074                     ___lmul@multiplicand:
   230                           
   231                           ; 4 bytes @ 0x4
   232  0074                     	ds	4
   233  0078                     ??___lmul:
   234                           
   235                           ; 1 bytes @ 0x8
   236  0078                     	ds	1
   237  0079                     ___lmul@product:
   238                           
   239                           ; 4 bytes @ 0x9
   240  0079                     	ds	4
   241  007D                     ??___awmod:
   242                           
   243                           ; 1 bytes @ 0xD
   244  007D                     	ds	1
   245                           
   246                           	psect	cstackBANK0
   247  0020                     __pcstackBANK0:
   248  0020                     ?_rand:
   249                           
   250                           ; 2 bytes @ 0x0
   251  0020                     	ds	2
   252  0022                     ??_rand:
   253                           
   254                           ; 1 bytes @ 0x2
   255  0022                     	ds	5
   256  0027                     ?___awmod:
   257  0027                     ___awmod@divisor:	
   258                           ; 2 bytes @ 0x7
   259                           
   260                           
   261                           ; 2 bytes @ 0x7
   262  0027                     	ds	2
   263  0029                     ___awmod@dividend:
   264                           
   265                           ; 2 bytes @ 0x9
   266  0029                     	ds	2
   267  002B                     ___awmod@counter:
   268                           
   269                           ; 1 bytes @ 0xB
   270  002B                     	ds	1
   271  002C                     ___awmod@sign:
   272                           
   273                           ; 1 bytes @ 0xC
   274  002C                     	ds	1
   275  002D                     ??_main:
   276                           
   277                           ; 1 bytes @ 0xD
   278  002D                     	ds	3
   279  0030                     main@button:
   280                           
   281                           ; 2 bytes @ 0x10
   282  0030                     	ds	2
   283                           
   284                           	psect	maintext
   285  072D                     __pmaintext:	
   286 ;;
   287 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   288 ;;
   289 ;; *************** function _main *****************
   290 ;; Defined at:
   291 ;;		line 17 in file "main.c"
   292 ;; Parameters:    Size  Location     Type
   293 ;;		None
   294 ;; Auto vars:     Size  Location     Type
   295 ;;  button          2   16[BANK0 ] int 
   296 ;; Return value:  Size  Location     Type
   297 ;;                  1    wreg      void 
   298 ;; Registers used:
   299 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   300 ;; Tracked objects:
   301 ;;		On entry : B00/0
   302 ;;		On exit  : 0/0
   303 ;;		Unchanged: 0/0
   304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   305 ;;      Params:         0       0       0       0       0
   306 ;;      Locals:         0       2       0       0       0
   307 ;;      Temps:          0       3       0       0       0
   308 ;;      Totals:         0       5       0       0       0
   309 ;;Total ram usage:        5 bytes
   310 ;; Hardware stack levels required when called: 2
   311 ;; This function calls:
   312 ;;		___awmod
   313 ;;		_rand
   314 ;; This function is called by:
   315 ;;		Startup code after reset
   316 ;; This function uses a non-reentrant model
   317 ;;
   318                           
   319  072D                     _main:	
   320                           ;psect for function _main
   321                           
   322  072D                     l880:	
   323                           ;incstack = 0
   324                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   325                           
   326                           
   327                           ;main.c: 18:     TRISB = 0x00;
   328  072D  1683               	bsf	3,5	;RP0=1, select bank1
   329  072E  1303               	bcf	3,6	;RP1=0, select bank1
   330  072F  0186               	clrf	6	;volatile
   331                           
   332                           ;main.c: 19:     PORTB = 0X00;
   333  0730  1283               	bcf	3,5	;RP0=0, select bank0
   334  0731  1303               	bcf	3,6	;RP1=0, select bank0
   335  0732  0186               	clrf	6	;volatile
   336  0733                     l882:
   337                           
   338                           ;main.c: 20:     RB0 = 1;
   339  0733  1406               	bsf	6,0	;volatile
   340  0734                     l884:
   341                           
   342                           ;main.c: 23:         if (RB0 == 0)
   343  0734  1806               	btfsc	6,0	;volatile
   344  0735  2F37               	goto	u331
   345  0736  2F38               	goto	u330
   346  0737                     u331:
   347  0737  2F34               	goto	l884
   348  0738                     u330:
   349  0738                     l886:
   350                           
   351                           ;main.c: 24:         {;main.c: 25:             _delay((unsigned long)((50)*(40000000/400
      +                          0.0)));
   352  0738  3003               	movlw	3
   353  0739  1283               	bcf	3,5	;RP0=0, select bank0
   354  073A  1303               	bcf	3,6	;RP1=0, select bank0
   355  073B  00AF               	movwf	??_main+2
   356  073C  308A               	movlw	138
   357  073D  00AE               	movwf	??_main+1
   358  073E  3055               	movlw	85
   359  073F  00AD               	movwf	??_main
   360  0740                     u357:
   361  0740  0BAD               	decfsz	??_main,f
   362  0741  2F40               	goto	u357
   363  0742  0BAE               	decfsz	??_main+1,f
   364  0743  2F40               	goto	u357
   365  0744  0BAF               	decfsz	??_main+2,f
   366  0745  2F40               	goto	u357
   367  0746                     l31:	
   368                           ;main.c: 26:             while (RB0 == 0);
   369                           
   370  0746  1283               	bcf	3,5	;RP0=0, select bank0
   371  0747  1303               	bcf	3,6	;RP1=0, select bank0
   372  0748  1C06               	btfss	6,0	;volatile
   373  0749  2F4B               	goto	u341
   374  074A  2F4C               	goto	u340
   375  074B                     u341:
   376  074B  2F46               	goto	l31
   377  074C                     u340:
   378  074C                     l888:
   379                           
   380                           ;main.c: 28:             int button = rand() % 7 + 1;
   381  074C  3007               	movlw	7
   382  074D  00A7               	movwf	___awmod@divisor
   383  074E  3000               	movlw	0
   384  074F  00A8               	movwf	___awmod@divisor+1
   385  0750  120A  118A  268B  120A  118A  	fcall	_rand
   386  0755  1283               	bcf	3,5	;RP0=0, select bank0
   387  0756  1303               	bcf	3,6	;RP1=0, select bank0
   388  0757  0821               	movf	?_rand+1,w
   389  0758  00AA               	movwf	___awmod@dividend+1
   390  0759  0820               	movf	?_rand,w
   391  075A  00A9               	movwf	___awmod@dividend
   392  075B  120A  118A  26D2  120A  118A  	fcall	___awmod
   393  0760  1283               	bcf	3,5	;RP0=0, select bank0
   394  0761  1303               	bcf	3,6	;RP1=0, select bank0
   395  0762  0827               	movf	?___awmod,w
   396  0763  3E01               	addlw	1
   397  0764  00B0               	movwf	main@button
   398  0765  0828               	movf	?___awmod+1,w
   399  0766  1803               	skipnc
   400  0767  3E01               	addlw	1
   401  0768  3E00               	addlw	0
   402  0769  00B1               	movwf	main@button+1
   403                           
   404                           ;main.c: 30:             switch (button){
   405  076A  2FC8               	goto	l958
   406  076B                     l890:
   407  076B  3001               	movlw	1
   408  076C  0086               	movwf	6	;volatile
   409  076D                     l892:
   410  076D  1486               	bsf	6,1	;volatile
   411  076E  3099               	movlw	153
   412  076F  1283               	bcf	3,5	;RP0=0, select bank0
   413  0770  1303               	bcf	3,6	;RP1=0, select bank0
   414  0771  00AF               	movwf	??_main+2
   415  0772  3031               	movlw	49
   416  0773  00AE               	movwf	??_main+1
   417  0774  30A1               	movlw	161
   418  0775  00AD               	movwf	??_main
   419  0776                     u367:
   420  0776  0BAD               	decfsz	??_main,f
   421  0777  2F76               	goto	u367
   422  0778  0BAE               	decfsz	??_main+1,f
   423  0779  2F76               	goto	u367
   424  077A  0BAF               	decfsz	??_main+2,f
   425  077B  2F76               	goto	u367
   426  077C  2F7D               	nop2
   427  077D  3001               	movlw	1
   428  077E  1283               	bcf	3,5	;RP0=0, select bank0
   429  077F  1303               	bcf	3,6	;RP1=0, select bank0
   430  0780  0086               	movwf	6	;volatile
   431  0781                     l894:
   432  0781  2F34               	goto	l884
   433  0782                     l896:
   434  0782  3001               	movlw	1
   435  0783  0086               	movwf	6	;volatile
   436  0784                     l898:
   437  0784  1586               	bsf	6,3	;volatile
   438  0785                     l900:
   439  0785  1706               	bsf	6,6	;volatile
   440  0786  3099               	movlw	153
   441  0787  1283               	bcf	3,5	;RP0=0, select bank0
   442  0788  1303               	bcf	3,6	;RP1=0, select bank0
   443  0789  00AF               	movwf	??_main+2
   444  078A  3031               	movlw	49
   445  078B  00AE               	movwf	??_main+1
   446  078C  30A1               	movlw	161
   447  078D  00AD               	movwf	??_main
   448  078E                     u377:
   449  078E  0BAD               	decfsz	??_main,f
   450  078F  2F8E               	goto	u377
   451  0790  0BAE               	decfsz	??_main+1,f
   452  0791  2F8E               	goto	u377
   453  0792  0BAF               	decfsz	??_main+2,f
   454  0793  2F8E               	goto	u377
   455  0794  2F95               	nop2
   456  0795  3001               	movlw	1
   457  0796  1283               	bcf	3,5	;RP0=0, select bank0
   458  0797  1303               	bcf	3,6	;RP1=0, select bank0
   459  0798  0086               	movwf	6	;volatile
   460  0799  2F81               	goto	l894
   461  079A                     l904:
   462  079A  3001               	movlw	1
   463  079B  0086               	movwf	6	;volatile
   464  079C                     l906:
   465  079C  1586               	bsf	6,3	;volatile
   466  079D                     l908:
   467  079D  1706               	bsf	6,6	;volatile
   468  079E  2F6D               	goto	l892
   469  079F                     l914:
   470  079F  3001               	movlw	1
   471  07A0  0086               	movwf	6	;volatile
   472  07A1                     l916:
   473  07A1  1506               	bsf	6,2	;volatile
   474  07A2                     l918:
   475  07A2  1686               	bsf	6,5	;volatile
   476  07A3                     l920:
   477  07A3  1606               	bsf	6,4	;volatile
   478  07A4                     l922:
   479  07A4  1786               	bsf	6,7	;volatile
   480  07A5  3099               	movlw	153
   481  07A6  1283               	bcf	3,5	;RP0=0, select bank0
   482  07A7  1303               	bcf	3,6	;RP1=0, select bank0
   483  07A8  00AF               	movwf	??_main+2
   484  07A9  3031               	movlw	49
   485  07AA  00AE               	movwf	??_main+1
   486  07AB  30A1               	movlw	161
   487  07AC  00AD               	movwf	??_main
   488  07AD                     u387:
   489  07AD  0BAD               	decfsz	??_main,f
   490  07AE  2FAD               	goto	u387
   491  07AF  0BAE               	decfsz	??_main+1,f
   492  07B0  2FAD               	goto	u387
   493  07B1  0BAF               	decfsz	??_main+2,f
   494  07B2  2FAD               	goto	u387
   495  07B3  2FB4               	nop2
   496  07B4  3001               	movlw	1
   497  07B5  1283               	bcf	3,5	;RP0=0, select bank0
   498  07B6  1303               	bcf	3,6	;RP1=0, select bank0
   499  07B7  0086               	movwf	6	;volatile
   500  07B8  2F81               	goto	l894
   501  07B9                     l926:
   502  07B9  3001               	movlw	1
   503  07BA  0086               	movwf	6	;volatile
   504  07BB                     l928:
   505  07BB  1506               	bsf	6,2	;volatile
   506  07BC                     l930:
   507  07BC  1686               	bsf	6,5	;volatile
   508  07BD                     l932:
   509  07BD  1606               	bsf	6,4	;volatile
   510  07BE                     l934:
   511  07BE  1786               	bsf	6,7	;volatile
   512  07BF  2F6D               	goto	l892
   513  07C0                     l940:
   514  07C0  3001               	movlw	1
   515  07C1  0086               	movwf	6	;volatile
   516  07C2                     l942:
   517  07C2  1506               	bsf	6,2	;volatile
   518  07C3                     l944:
   519  07C3  1586               	bsf	6,3	;volatile
   520  07C4                     l946:
   521  07C4  1606               	bsf	6,4	;volatile
   522  07C5                     l948:
   523  07C5  1686               	bsf	6,5	;volatile
   524  07C6                     l950:
   525  07C6  1706               	bsf	6,6	;volatile
   526  07C7  2FA4               	goto	l922
   527  07C8                     l958:
   528                           
   529                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   530                           ; Switch size 1, requested type "simple"
   531                           ; Number of cases is 1, Range of values is 0 to 0
   532                           ; switch strategies available:
   533                           ; Name         Instructions Cycles
   534                           ; simple_byte            4     3 (average)
   535                           ; direct_byte           11     8 (fixed)
   536                           ; jumptable            260     6 (fixed)
   537                           ;	Chosen strategy is simple_byte
   538  07C8  0831               	movf	main@button+1,w
   539  07C9  3A00               	xorlw	0	; case 0
   540  07CA  1903               	skipnz
   541  07CB  2FCD               	goto	l996
   542  07CC  2F34               	goto	l884
   543  07CD                     l996:
   544                           
   545                           ; Switch size 1, requested type "simple"
   546                           ; Number of cases is 6, Range of values is 1 to 6
   547                           ; switch strategies available:
   548                           ; Name         Instructions Cycles
   549                           ; simple_byte           19    10 (average)
   550                           ; direct_byte           29    11 (fixed)
   551                           ; jumptable            263     9 (fixed)
   552                           ;	Chosen strategy is simple_byte
   553  07CD  0830               	movf	main@button,w
   554  07CE  3A01               	xorlw	1	; case 1
   555  07CF  1903               	skipnz
   556  07D0  2F6B               	goto	l890
   557  07D1  3A03               	xorlw	3	; case 2
   558  07D2  1903               	skipnz
   559  07D3  2F82               	goto	l896
   560  07D4  3A01               	xorlw	1	; case 3
   561  07D5  1903               	skipnz
   562  07D6  2F9A               	goto	l904
   563  07D7  3A07               	xorlw	7	; case 4
   564  07D8  1903               	skipnz
   565  07D9  2F9F               	goto	l914
   566  07DA  3A01               	xorlw	1	; case 5
   567  07DB  1903               	skipnz
   568  07DC  2FB9               	goto	l926
   569  07DD  3A03               	xorlw	3	; case 6
   570  07DE  1903               	skipnz
   571  07DF  2FC0               	goto	l940
   572  07E0  2F34               	goto	l884
   573  07E1  120A  118A  2800   	ljmp	start
   574  07E4                     __end_of_main:
   575                           
   576                           	psect	text1
   577  068B                     __ptext1:	
   578 ;; *************** function _rand *****************
   579 ;; Defined at:
   580 ;;		line 12 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\rand.c"
   581 ;; Parameters:    Size  Location     Type
   582 ;;		None
   583 ;; Auto vars:     Size  Location     Type
   584 ;;		None
   585 ;; Return value:  Size  Location     Type
   586 ;;                  2    0[BANK0 ] int 
   587 ;; Registers used:
   588 ;;		wreg, status,2, status,0, pclath, cstack
   589 ;; Tracked objects:
   590 ;;		On entry : 0/0
   591 ;;		On exit  : 0/0
   592 ;;		Unchanged: 0/0
   593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   594 ;;      Params:         0       2       0       0       0
   595 ;;      Locals:         0       0       0       0       0
   596 ;;      Temps:          0       5       0       0       0
   597 ;;      Totals:         0       7       0       0       0
   598 ;;Total ram usage:        7 bytes
   599 ;; Hardware stack levels used: 1
   600 ;; Hardware stack levels required when called: 1
   601 ;; This function calls:
   602 ;;		___lmul
   603 ;; This function is called by:
   604 ;;		_main
   605 ;; This function uses a non-reentrant model
   606 ;;
   607                           
   608  068B                     _rand:	
   609                           ;psect for function _rand
   610                           
   611  068B                     l834:	
   612                           ;incstack = 0
   613                           ; Regs used in _rand: [wreg+status,2+status,0+pclath+cstack]
   614                           
   615  068B  1283               	bcf	3,5	;RP0=0, select bank0
   616  068C  1303               	bcf	3,6	;RP1=0, select bank0
   617  068D  0835               	movf	_randx+3,w
   618  068E  00F3               	movwf	___lmul@multiplier+3
   619  068F  0834               	movf	_randx+2,w
   620  0690  00F2               	movwf	___lmul@multiplier+2
   621  0691  0833               	movf	_randx+1,w
   622  0692  00F1               	movwf	___lmul@multiplier+1
   623  0693  0832               	movf	_randx,w
   624  0694  00F0               	movwf	___lmul@multiplier
   625  0695  3041               	movlw	65
   626  0696  00F7               	movwf	___lmul@multiplicand+3
   627  0697  30C6               	movlw	198
   628  0698  00F6               	movwf	___lmul@multiplicand+2
   629  0699  304E               	movlw	78
   630  069A  00F5               	movwf	___lmul@multiplicand+1
   631  069B  306D               	movlw	109
   632  069C  00F4               	movwf	___lmul@multiplicand
   633  069D  120A  118A  2645  120A  118A  	fcall	___lmul
   634  06A2  0873               	movf	?___lmul+3,w
   635  06A3  1283               	bcf	3,5	;RP0=0, select bank0
   636  06A4  1303               	bcf	3,6	;RP1=0, select bank0
   637  06A5  00B5               	movwf	_randx+3
   638  06A6  0872               	movf	?___lmul+2,w
   639  06A7  00B4               	movwf	_randx+2
   640  06A8  0871               	movf	?___lmul+1,w
   641  06A9  00B3               	movwf	_randx+1
   642  06AA  0870               	movf	?___lmul,w
   643  06AB  00B2               	movwf	_randx
   644  06AC                     l836:
   645  06AC  3039               	movlw	57
   646  06AD  07B2               	addwf	_randx,f
   647  06AE  3030               	movlw	48
   648  06AF  1803               	skipnc
   649  06B0  3031               	movlw	49
   650  06B1  07B3               	addwf	_randx+1,f
   651  06B2  3000               	movlw	0
   652  06B3  1803               	skipnc
   653  06B4  3001               	movlw	1
   654  06B5  07B4               	addwf	_randx+2,f
   655  06B6  3000               	movlw	0
   656  06B7  1803               	skipnc
   657  06B8  3001               	movlw	1
   658  06B9  07B5               	addwf	_randx+3,f
   659  06BA                     l838:
   660  06BA  0832               	movf	_randx,w
   661  06BB  00A2               	movwf	??_rand
   662  06BC  0833               	movf	_randx+1,w
   663  06BD  00A3               	movwf	??_rand+1
   664  06BE  0834               	movf	_randx+2,w
   665  06BF  00A4               	movwf	??_rand+2
   666  06C0  0835               	movf	_randx+3,w
   667  06C1  00A5               	movwf	??_rand+3
   668  06C2  3010               	movlw	16
   669  06C3  00A6               	movwf	??_rand+4
   670  06C4                     u235:
   671  06C4  0D25               	rlf	??_rand+3,w
   672  06C5  0CA5               	rrf	??_rand+3,f
   673  06C6  0CA4               	rrf	??_rand+2,f
   674  06C7  0CA3               	rrf	??_rand+1,f
   675  06C8  0CA2               	rrf	??_rand,f
   676  06C9                     u230:
   677  06C9  0BA6               	decfsz	??_rand+4,f
   678  06CA  2EC4               	goto	u235
   679  06CB  30FF               	movlw	255
   680  06CC  0522               	andwf	??_rand,w
   681  06CD  00A0               	movwf	?_rand
   682  06CE  307F               	movlw	127
   683  06CF  0523               	andwf	??_rand+1,w
   684  06D0  00A1               	movwf	?_rand+1
   685  06D1                     l586:
   686  06D1  0008               	return
   687  06D2                     __end_of_rand:
   688                           
   689                           	psect	text2
   690  0645                     __ptext2:	
   691 ;; *************** function ___lmul *****************
   692 ;; Defined at:
   693 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\Umul32.c"
   694 ;; Parameters:    Size  Location     Type
   695 ;;  multiplier      4    0[COMMON] unsigned long 
   696 ;;  multiplicand    4    4[COMMON] unsigned long 
   697 ;; Auto vars:     Size  Location     Type
   698 ;;  product         4    9[COMMON] unsigned long 
   699 ;; Return value:  Size  Location     Type
   700 ;;                  4    0[COMMON] unsigned long 
   701 ;; Registers used:
   702 ;;		wreg, status,2, status,0
   703 ;; Tracked objects:
   704 ;;		On entry : 0/0
   705 ;;		On exit  : 0/0
   706 ;;		Unchanged: 0/0
   707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   708 ;;      Params:         8       0       0       0       0
   709 ;;      Locals:         4       0       0       0       0
   710 ;;      Temps:          1       0       0       0       0
   711 ;;      Totals:        13       0       0       0       0
   712 ;;Total ram usage:       13 bytes
   713 ;; Hardware stack levels used: 1
   714 ;; This function calls:
   715 ;;		Nothing
   716 ;; This function is called by:
   717 ;;		_rand
   718 ;; This function uses a non-reentrant model
   719 ;;
   720                           
   721  0645                     ___lmul:	
   722                           ;psect for function ___lmul
   723                           
   724  0645                     l820:	
   725                           ;incstack = 0
   726                           ; Regs used in ___lmul: [wreg+status,2+status,0]
   727                           
   728  0645  3000               	movlw	0
   729  0646  00FC               	movwf	___lmul@product+3
   730  0647  3000               	movlw	0
   731  0648  00FB               	movwf	___lmul@product+2
   732  0649  3000               	movlw	0
   733  064A  00FA               	movwf	___lmul@product+1
   734  064B  3000               	movlw	0
   735  064C  00F9               	movwf	___lmul@product
   736  064D                     l822:
   737  064D  1C70               	btfss	___lmul@multiplier,0
   738  064E  2E50               	goto	u181
   739  064F  2E51               	goto	u180
   740  0650                     u181:
   741  0650  2E68               	goto	l826
   742  0651                     u180:
   743  0651                     l824:
   744  0651  0874               	movf	___lmul@multiplicand,w
   745  0652  07F9               	addwf	___lmul@product,f
   746  0653  0875               	movf	___lmul@multiplicand+1,w
   747  0654  1103               	clrz
   748  0655  1803               	skipnc
   749  0656  3E01               	addlw	1
   750  0657  1903               	skipnz
   751  0658  2E5A               	goto	u191
   752  0659  07FA               	addwf	___lmul@product+1,f
   753  065A                     u191:
   754  065A  0876               	movf	___lmul@multiplicand+2,w
   755  065B  1103               	clrz
   756  065C  1803               	skipnc
   757  065D  3E01               	addlw	1
   758  065E  1903               	skipnz
   759  065F  2E61               	goto	u192
   760  0660  07FB               	addwf	___lmul@product+2,f
   761  0661                     u192:
   762  0661  0877               	movf	___lmul@multiplicand+3,w
   763  0662  1103               	clrz
   764  0663  1803               	skipnc
   765  0664  3E01               	addlw	1
   766  0665  1903               	skipnz
   767  0666  2E68               	goto	u193
   768  0667  07FC               	addwf	___lmul@product+3,f
   769  0668                     u193:
   770  0668                     l826:
   771  0668  3001               	movlw	1
   772  0669  00F8               	movwf	??___lmul
   773  066A                     u205:
   774  066A  1003               	clrc
   775  066B  0DF4               	rlf	___lmul@multiplicand,f
   776  066C  0DF5               	rlf	___lmul@multiplicand+1,f
   777  066D  0DF6               	rlf	___lmul@multiplicand+2,f
   778  066E  0DF7               	rlf	___lmul@multiplicand+3,f
   779  066F  0BF8               	decfsz	??___lmul,f
   780  0670  2E6A               	goto	u205
   781  0671                     l828:
   782  0671  3001               	movlw	1
   783  0672                     u215:
   784  0672  1003               	clrc
   785  0673  0CF3               	rrf	___lmul@multiplier+3,f
   786  0674  0CF2               	rrf	___lmul@multiplier+2,f
   787  0675  0CF1               	rrf	___lmul@multiplier+1,f
   788  0676  0CF0               	rrf	___lmul@multiplier,f
   789  0677  3EFF               	addlw	-1
   790  0678  1D03               	skipz
   791  0679  2E72               	goto	u215
   792  067A  0873               	movf	___lmul@multiplier+3,w
   793  067B  0472               	iorwf	___lmul@multiplier+2,w
   794  067C  0471               	iorwf	___lmul@multiplier+1,w
   795  067D  0470               	iorwf	___lmul@multiplier,w
   796  067E  1D03               	skipz
   797  067F  2E81               	goto	u221
   798  0680  2E82               	goto	u220
   799  0681                     u221:
   800  0681  2E4D               	goto	l822
   801  0682                     u220:
   802  0682                     l830:
   803  0682  087C               	movf	___lmul@product+3,w
   804  0683  00F3               	movwf	?___lmul+3
   805  0684  087B               	movf	___lmul@product+2,w
   806  0685  00F2               	movwf	?___lmul+2
   807  0686  087A               	movf	___lmul@product+1,w
   808  0687  00F1               	movwf	?___lmul+1
   809  0688  0879               	movf	___lmul@product,w
   810  0689  00F0               	movwf	?___lmul
   811  068A                     l144:
   812  068A  0008               	return
   813  068B                     __end_of___lmul:
   814                           
   815                           	psect	text3
   816  06D2                     __ptext3:	
   817 ;; *************** function ___awmod *****************
   818 ;; Defined at:
   819 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\awmod.c"
   820 ;; Parameters:    Size  Location     Type
   821 ;;  divisor         2    7[BANK0 ] int 
   822 ;;  dividend        2    9[BANK0 ] int 
   823 ;; Auto vars:     Size  Location     Type
   824 ;;  sign            1   12[BANK0 ] unsigned char 
   825 ;;  counter         1   11[BANK0 ] unsigned char 
   826 ;; Return value:  Size  Location     Type
   827 ;;                  2    7[BANK0 ] int 
   828 ;; Registers used:
   829 ;;		wreg, status,2, status,0
   830 ;; Tracked objects:
   831 ;;		On entry : 0/0
   832 ;;		On exit  : 0/0
   833 ;;		Unchanged: 0/0
   834 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   835 ;;      Params:         0       4       0       0       0
   836 ;;      Locals:         0       2       0       0       0
   837 ;;      Temps:          1       0       0       0       0
   838 ;;      Totals:         1       6       0       0       0
   839 ;;Total ram usage:        7 bytes
   840 ;; Hardware stack levels used: 1
   841 ;; This function calls:
   842 ;;		Nothing
   843 ;; This function is called by:
   844 ;;		_main
   845 ;; This function uses a non-reentrant model
   846 ;;
   847                           
   848  06D2                     ___awmod:	
   849                           ;psect for function ___awmod
   850                           
   851  06D2                     l842:	
   852                           ;incstack = 0
   853                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   854                           
   855  06D2  1283               	bcf	3,5	;RP0=0, select bank0
   856  06D3  1303               	bcf	3,6	;RP1=0, select bank0
   857  06D4  01AC               	clrf	___awmod@sign
   858  06D5                     l844:
   859  06D5  1FAA               	btfss	___awmod@dividend+1,7
   860  06D6  2ED8               	goto	u241
   861  06D7  2ED9               	goto	u240
   862  06D8                     u241:
   863  06D8  2EE0               	goto	l850
   864  06D9                     u240:
   865  06D9                     l846:
   866  06D9  09A9               	comf	___awmod@dividend,f
   867  06DA  09AA               	comf	___awmod@dividend+1,f
   868  06DB  0AA9               	incf	___awmod@dividend,f
   869  06DC  1903               	skipnz
   870  06DD  0AAA               	incf	___awmod@dividend+1,f
   871  06DE                     l848:
   872  06DE  01AC               	clrf	___awmod@sign
   873  06DF  0AAC               	incf	___awmod@sign,f
   874  06E0                     l850:
   875  06E0  1FA8               	btfss	___awmod@divisor+1,7
   876  06E1  2EE3               	goto	u251
   877  06E2  2EE4               	goto	u250
   878  06E3                     u251:
   879  06E3  2EE9               	goto	l854
   880  06E4                     u250:
   881  06E4                     l852:
   882  06E4  09A7               	comf	___awmod@divisor,f
   883  06E5  09A8               	comf	___awmod@divisor+1,f
   884  06E6  0AA7               	incf	___awmod@divisor,f
   885  06E7  1903               	skipnz
   886  06E8  0AA8               	incf	___awmod@divisor+1,f
   887  06E9                     l854:
   888  06E9  0827               	movf	___awmod@divisor,w
   889  06EA  0428               	iorwf	___awmod@divisor+1,w
   890  06EB  1903               	btfsc	3,2
   891  06EC  2EEE               	goto	u261
   892  06ED  2EEF               	goto	u260
   893  06EE                     u261:
   894  06EE  2F1E               	goto	l872
   895  06EF                     u260:
   896  06EF                     l856:
   897  06EF  01AB               	clrf	___awmod@counter
   898  06F0  0AAB               	incf	___awmod@counter,f
   899  06F1  2EFD               	goto	l862
   900  06F2                     l858:
   901  06F2  3001               	movlw	1
   902  06F3                     u275:
   903  06F3  1003               	clrc
   904  06F4  0DA7               	rlf	___awmod@divisor,f
   905  06F5  0DA8               	rlf	___awmod@divisor+1,f
   906  06F6  3EFF               	addlw	-1
   907  06F7  1D03               	skipz
   908  06F8  2EF3               	goto	u275
   909  06F9                     l860:
   910  06F9  3001               	movlw	1
   911  06FA  00FD               	movwf	??___awmod
   912  06FB  087D               	movf	??___awmod,w
   913  06FC  07AB               	addwf	___awmod@counter,f
   914  06FD                     l862:
   915  06FD  1FA8               	btfss	___awmod@divisor+1,7
   916  06FE  2F00               	goto	u281
   917  06FF  2F01               	goto	u280
   918  0700                     u281:
   919  0700  2EF2               	goto	l858
   920  0701                     u280:
   921  0701                     l864:
   922  0701  0828               	movf	___awmod@divisor+1,w
   923  0702  022A               	subwf	___awmod@dividend+1,w
   924  0703  1D03               	skipz
   925  0704  2F07               	goto	u295
   926  0705  0827               	movf	___awmod@divisor,w
   927  0706  0229               	subwf	___awmod@dividend,w
   928  0707                     u295:
   929  0707  1C03               	skipc
   930  0708  2F0A               	goto	u291
   931  0709  2F0B               	goto	u290
   932  070A                     u291:
   933  070A  2F11               	goto	l868
   934  070B                     u290:
   935  070B                     l866:
   936  070B  0827               	movf	___awmod@divisor,w
   937  070C  02A9               	subwf	___awmod@dividend,f
   938  070D  0828               	movf	___awmod@divisor+1,w
   939  070E  1C03               	skipc
   940  070F  03AA               	decf	___awmod@dividend+1,f
   941  0710  02AA               	subwf	___awmod@dividend+1,f
   942  0711                     l868:
   943  0711  3001               	movlw	1
   944  0712                     u305:
   945  0712  1003               	clrc
   946  0713  0CA8               	rrf	___awmod@divisor+1,f
   947  0714  0CA7               	rrf	___awmod@divisor,f
   948  0715  3EFF               	addlw	-1
   949  0716  1D03               	skipz
   950  0717  2F12               	goto	u305
   951  0718                     l870:
   952  0718  3001               	movlw	1
   953  0719  02AB               	subwf	___awmod@counter,f
   954  071A  1D03               	btfss	3,2
   955  071B  2F1D               	goto	u311
   956  071C  2F1E               	goto	u310
   957  071D                     u311:
   958  071D  2F01               	goto	l864
   959  071E                     u310:
   960  071E                     l872:
   961  071E  082C               	movf	___awmod@sign,w
   962  071F  1903               	btfsc	3,2
   963  0720  2F22               	goto	u321
   964  0721  2F23               	goto	u320
   965  0722                     u321:
   966  0722  2F28               	goto	l876
   967  0723                     u320:
   968  0723                     l874:
   969  0723  09A9               	comf	___awmod@dividend,f
   970  0724  09AA               	comf	___awmod@dividend+1,f
   971  0725  0AA9               	incf	___awmod@dividend,f
   972  0726  1903               	skipnz
   973  0727  0AAA               	incf	___awmod@dividend+1,f
   974  0728                     l876:
   975  0728  082A               	movf	___awmod@dividend+1,w
   976  0729  00A8               	movwf	?___awmod+1
   977  072A  0829               	movf	___awmod@dividend,w
   978  072B  00A7               	movwf	?___awmod
   979  072C                     l296:
   980  072C  0008               	return
   981  072D                     __end_of___awmod:
   982  007E                     btemp	set	126	;btemp
   983  007E                     wtemp0	set	126
   984                           
   985                           	psect	config
   986                           
   987                           ;Config register CONFIG @ 0x2007
   988                           ;	Oscillator Selection bits
   989                           ;	FOSC = HS, HS oscillator
   990                           ;	Watchdog Timer Enable bit
   991                           ;	WDTE = OFF, WDT disabled
   992                           ;	Power-up Timer Enable bit
   993                           ;	PWRTE = ON, PWRT enabled
   994                           ;	Brown-out Reset Enable bit
   995                           ;	BOREN = OFF, BOR disabled
   996                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   997                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   998                           ;	Data EEPROM Memory Code Protection bit
   999                           ;	CPD = OFF, Data EEPROM code protection off
  1000                           ;	Flash Program Memory Write Enable bits
  1001                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1002                           ;	In-Circuit Debugger Mode bit
  1003                           ;	DEBUG = 0x1, unprogrammed default
  1004                           ;	Flash Program Memory Code Protection bit
  1005                           ;	CP = OFF, Code protection off
  1006  2007                     	org	8199
  1007  2007  3F32               	dw	16178

Data Sizes:
    Strings     0
    Constant    0
    Data        4
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     18      22
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awmod
    _rand->___lmul

Critical Paths under _main in BANK0

    _main->___awmod
    ___awmod->_rand

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     721
                                             13 BANK0      5     5      0
                            ___awmod
                               _rand
 ---------------------------------------------------------------------------------
 (1) _rand                                                 7     5      2     244
                                              0 BANK0      7     5      2
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     448
                                             13 COMMON     1     1      0
                                              7 BANK0      6     2      4
                               _rand (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awmod
     _rand (ARG)
       ___lmul
   _rand

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      16       5       27.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      24      12        0.0%
ABS                  0      0      24       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Thu Nov 16 22:11:10 2023

                     l31 0746                      l144 068A                      l296 072C  
                    l820 0645                      l900 0785                      l830 0682  
                    l822 064D                      l824 0651                      l920 07A3  
                    l904 079A                      l850 06E0                      l842 06D2  
                    l826 0668                      l586 06D1                      l834 068B  
                    l930 07BC                      l922 07A4                      l914 079F  
                    l906 079C                      l860 06F9                      l852 06E4  
                    l844 06D5                      l828 0671                      l836 06AC  
                    l940 07C0                      l932 07BD                      l916 07A1  
                    l908 079D                      l870 0718                      l862 06FD  
                    l854 06E9                      l846 06D9                      l838 06BA  
                    l950 07C6                      l942 07C2                      l934 07BE  
                    l926 07B9                      l918 07A2                      l864 0701  
                    l856 06EF                      l872 071E                      l848 06DE  
                    l944 07C3                      l928 07BB                      l880 072D  
                    l874 0723                      l866 070B                      l858 06F2  
                    l946 07C4                      l890 076B                      l882 0733  
                    l876 0728                      l868 0711                      l948 07C5  
                    l892 076D                      l884 0734                      l894 0781  
                    l958 07C8                      l886 0738                      l896 0782  
                    l888 074C                      l898 0784                      l996 07CD  
                    _RB0 0030                      _RB1 0031                      _RB2 0032  
                    _RB3 0033                      _RB4 0034                      _RB5 0035  
                    _RB6 0036                      _RB7 0037                      u220 0682  
                    u221 0681                      u205 066A                      u310 071E  
                    u230 06C9                      u311 071D                      u215 0672  
                    u320 0723                      u240 06D9                      u321 0722  
                    u305 0712                      u241 06D8                      u250 06E4  
                    u330 0738                      u251 06E3                      u235 06C4  
                    u331 0737                      u260 06EF                      u180 0651  
                    u340 074C                      u261 06EE                      u181 0650  
                    u341 074B                      u191 065A                      u280 0701  
                    u192 0661                      u281 0700                      u193 0668  
                    u290 070B                      u291 070A                      u275 06F3  
                    u357 0740                      u295 0707                      u367 0776  
                    u377 078E                      u387 07AD             ___awmod@sign 002C  
                   _main 072D                     _rand 068B                     btemp 007E  
                   start 0000                    ?_main 0070                    ?_rand 0020  
        __end_of___awmod 072D                    _PORTB 0006                    _TRISB 0086  
    ___lmul@multiplicand 0074                    _randx 0032                    status 0003  
                  wtemp0 007E          __initialization 07E4             __end_of_main 07E4  
           __end_of_rand 06D2                   ??_main 002D                   ??_rand 0022  
                 ___lmul 0645                ??___awmod 007D          ___awmod@divisor 0027  
        ___awmod@counter 002B  __end_of__initialization 07FC           __pcstackCOMMON 0070  
           __pidataBANK0 0641               __pmaintext 072D                  ?___lmul 0070  
         ___lmul@product 0079                  ___awmod 06D2                  __ptext1 068B  
                __ptext2 0645                  __ptext3 06D2         ___awmod@dividend 0029  
   end_of_initialization 07FC               main@button 0030           __end_of___lmul 068B  
    start_initialization 07E4                 ??___lmul 0078              __pdataBANK0 0032  
              ___latbits 0002            __pcstackBANK0 0020                 ?___awmod 0027  
      ___lmul@multiplier 0070  
