
Mohandseen_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002d8  00800060  00002518  000025ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800338  00800338  00002884  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002884  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000028b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00008273  00000000  00000000  00002db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ae8  00000000  00000000  0000b023  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000037dd  00000000  00000000  0000cb0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c6c  00000000  00000000  000102e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023de  00000000  00000000  00010f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005416  00000000  00000000  00013332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000568  00000000  00000000  00018748  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__ctors_end>
       4:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_1>
       8:	0c 94 4b 0d 	jmp	0x1a96	; 0x1a96 <__vector_2>
       c:	0c 94 72 0d 	jmp	0x1ae4	; 0x1ae4 <__vector_3>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 3b 0e 	jmp	0x1c76	; 0x1c76 <__vector_6>
      1c:	0c 94 f3 10 	jmp	0x21e6	; 0x21e6 <__vector_7>
      20:	0c 94 14 0e 	jmp	0x1c28	; 0x1c28 <__vector_8>
      24:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_9>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      4c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	70 04       	cpc	r7, r0
      56:	fd 04       	cpc	r15, r13
      58:	ac 05       	cpc	r26, r12
      5a:	b6 05       	cpc	r27, r6
      5c:	c0 05       	cpc	r28, r0
      5e:	ca 05       	cpc	r28, r10
      60:	65 06       	cpc	r6, r21
      62:	71 05       	cpc	r23, r1
      64:	70 06       	cpc	r7, r16
      66:	79 06       	cpc	r7, r25
      68:	da 05       	cpc	r29, r10
      6a:	45 05       	cpc	r20, r5
      6c:	ea 07       	cpc	r30, r26
      6e:	fb 07       	cpc	r31, r27
      70:	0c 08       	sbc	r0, r12
      72:	1d 08       	sbc	r1, r13
      74:	2e 08       	sbc	r2, r14
      76:	57 08       	sbc	r5, r7
      78:	3f 08       	sbc	r3, r15
      7a:	57 08       	sbc	r5, r7
      7c:	57 08       	sbc	r5, r7
      7e:	57 08       	sbc	r5, r7
      80:	57 08       	sbc	r5, r7
      82:	57 08       	sbc	r5, r7
      84:	57 08       	sbc	r5, r7
      86:	57 08       	sbc	r5, r7
      88:	57 08       	sbc	r5, r7
      8a:	57 08       	sbc	r5, r7
      8c:	57 08       	sbc	r5, r7
      8e:	57 08       	sbc	r5, r7
      90:	57 08       	sbc	r5, r7
      92:	57 08       	sbc	r5, r7
      94:	57 08       	sbc	r5, r7
      96:	57 08       	sbc	r5, r7
      98:	57 08       	sbc	r5, r7
      9a:	57 08       	sbc	r5, r7
      9c:	57 08       	sbc	r5, r7
      9e:	57 08       	sbc	r5, r7
      a0:	57 08       	sbc	r5, r7
      a2:	57 08       	sbc	r5, r7
      a4:	57 08       	sbc	r5, r7
      a6:	57 08       	sbc	r5, r7
      a8:	57 08       	sbc	r5, r7
      aa:	57 08       	sbc	r5, r7
      ac:	57 08       	sbc	r5, r7
      ae:	57 08       	sbc	r5, r7
      b0:	57 08       	sbc	r5, r7
      b2:	57 08       	sbc	r5, r7
      b4:	57 08       	sbc	r5, r7
      b6:	57 08       	sbc	r5, r7
      b8:	57 08       	sbc	r5, r7
      ba:	57 08       	sbc	r5, r7
      bc:	57 08       	sbc	r5, r7
      be:	57 08       	sbc	r5, r7
      c0:	57 08       	sbc	r5, r7
      c2:	57 08       	sbc	r5, r7
      c4:	57 08       	sbc	r5, r7
      c6:	57 08       	sbc	r5, r7
      c8:	57 08       	sbc	r5, r7
      ca:	57 08       	sbc	r5, r7
      cc:	57 08       	sbc	r5, r7
      ce:	57 08       	sbc	r5, r7
      d0:	57 08       	sbc	r5, r7
      d2:	57 08       	sbc	r5, r7
      d4:	57 08       	sbc	r5, r7
      d6:	57 08       	sbc	r5, r7
      d8:	57 08       	sbc	r5, r7
      da:	57 08       	sbc	r5, r7
      dc:	57 08       	sbc	r5, r7
      de:	57 08       	sbc	r5, r7
      e0:	57 08       	sbc	r5, r7
      e2:	57 08       	sbc	r5, r7
      e4:	57 08       	sbc	r5, r7
      e6:	50 08       	sbc	r5, r0

000000e8 <__ctors_end>:
      e8:	11 24       	eor	r1, r1
      ea:	1f be       	out	0x3f, r1	; 63
      ec:	cf e5       	ldi	r28, 0x5F	; 95
      ee:	d8 e0       	ldi	r29, 0x08	; 8
      f0:	de bf       	out	0x3e, r29	; 62
      f2:	cd bf       	out	0x3d, r28	; 61

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e6       	ldi	r26, 0x60	; 96
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 e1       	ldi	r30, 0x18	; 24
      fc:	f5 e2       	ldi	r31, 0x25	; 37
      fe:	02 c0       	rjmp	.+4      	; 0x104 <__do_copy_data+0x10>
     100:	05 90       	lpm	r0, Z+
     102:	0d 92       	st	X+, r0
     104:	a8 33       	cpi	r26, 0x38	; 56
     106:	b1 07       	cpc	r27, r17
     108:	d9 f7       	brne	.-10     	; 0x100 <__do_copy_data+0xc>

0000010a <__do_clear_bss>:
     10a:	23 e0       	ldi	r18, 0x03	; 3
     10c:	a8 e3       	ldi	r26, 0x38	; 56
     10e:	b3 e0       	ldi	r27, 0x03	; 3
     110:	01 c0       	rjmp	.+2      	; 0x114 <.do_clear_bss_start>

00000112 <.do_clear_bss_loop>:
     112:	1d 92       	st	X+, r1

00000114 <.do_clear_bss_start>:
     114:	a9 38       	cpi	r26, 0x89	; 137
     116:	b2 07       	cpc	r27, r18
     118:	e1 f7       	brne	.-8      	; 0x112 <.do_clear_bss_loop>
     11a:	0e 94 b0 00 	call	0x160	; 0x160 <main>
     11e:	0c 94 8a 12 	jmp	0x2514	; 0x2514 <_exit>

00000122 <__bad_interrupt>:
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <ExtInt0Fun>:
		}//End of while that repeats the menu after each successful action till session timeout
	}// end of the main while(1)
}//end of main function

void ExtInt0Fun(void) {
	advvalue = LM35_Read(ADC_Channel0);
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 a5 0a 	call	0x154a	; 0x154a <LM35_Read>
     12c:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <advvalue+0x1>
     130:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <advvalue>
	if (advvalue >= required_temperature ) {
     134:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     138:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     13c:	82 17       	cp	r24, r18
     13e:	93 07       	cpc	r25, r19
     140:	40 f0       	brcs	.+16     	; 0x152 <ExtInt0Fun+0x2c>
		DIO_WriteChannel(DIO_ChannelB7, STD_High);
     142:	61 e0       	ldi	r22, 0x01	; 1
     144:	8f e0       	ldi	r24, 0x0F	; 15
     146:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
		last_air_conditioning_value = AIR_CONDTIONING_ON;
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	80 93 3d 03 	sts	0x033D, r24	; 0x80033d <last_air_conditioning_value>
     150:	08 95       	ret
	} else if(advvalue <= required_temperature)
	{
		DIO_WriteChannel(DIO_ChannelB7, STD_Low);
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	8f e0       	ldi	r24, 0x0F	; 15
     156:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
		last_air_conditioning_value = AIR_CONDTIONING_OFF;
     15a:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <last_air_conditioning_value>
     15e:	08 95       	ret

00000160 <main>:
extern u8 last_air_conditioning_value;
u8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
u8 rxdata = 0;

int main(void)
{
     160:	cf 93       	push	r28
     162:	df 93       	push	r29
     164:	cd b7       	in	r28, 0x3d	; 61
     166:	de b7       	in	r29, 0x3e	; 62
     168:	2a 97       	sbiw	r28, 0x0a	; 10
     16a:	0f b6       	in	r0, 0x3f	; 63
     16c:	f8 94       	cli
     16e:	de bf       	out	0x3e, r29	; 62
     170:	0f be       	out	0x3f, r0	; 63
     172:	cd bf       	out	0x3d, r28	; 61
	u8 block_mode_flag = FALSE;
	u8 key_pressed  = NOT_PRESSED;
	u8 rxdata = 0;
	
	/*****************  INITIALIZE  **********************************************/
	Bluetooth_Init(&option);
     174:	84 e6       	ldi	r24, 0x64	; 100
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Bluetooth_Init>
	DIO_ConfigChannel(DIO_ChannelB3,Output);
     17c:	61 e0       	ldi	r22, 0x01	; 1
     17e:	8b e0       	ldi	r24, 0x0B	; 11
     180:	0e 94 bc 0b 	call	0x1778	; 0x1778 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelD2,Input);
     184:	60 e0       	ldi	r22, 0x00	; 0
     186:	8a e1       	ldi	r24, 0x1A	; 26
     188:	0e 94 bc 0b 	call	0x1778	; 0x1778 <DIO_ConfigChannel>
	LM35_Init(&options);
     18c:	82 e6       	ldi	r24, 0x62	; 98
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	0e 94 a2 0a 	call	0x1544	; 0x1544 <LM35_Init>
	DIO_Init();
     194:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <DIO_Init>
	Keypad_Init();
     198:	0e 94 2d 09 	call	0x125a	; 0x125a <Keypad_Init>
	LCD_Init();
     19c:	0e 94 08 0a 	call	0x1410	; 0x1410 <LCD_Init>
	
	Ext_Interrupt_SetCallBack(Ext_INT0,ExtInt0Fun);
     1a0:	63 e9       	ldi	r22, 0x93	; 147
     1a2:	70 e0       	ldi	r23, 0x00	; 0
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	0e 94 0f 0d 	call	0x1a1e	; 0x1a1e <Ext_Interrupt_SetCallBack>
	Ext_Interrupt_Sncontrol(Ext_INT0,Rising_Edge);
     1aa:	63 e0       	ldi	r22, 0x03	; 3
     1ac:	80 e0       	ldi	r24, 0x00	; 0
     1ae:	0e 94 f3 0c 	call	0x19e6	; 0x19e6 <Ext_Interrupt_Sncontrol>
	Ext_Interrupt_Enable(Ext_INT0);
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <Ext_Interrupt_Enable>
	// 	Ext_Interrupt_SetCallBack(Ext_INT1,ExtInt1Fun);
	// 	Ext_Interrupt_Sncontrol(Ext_INT1,Rising_Edge);
	// 	Ext_Interrupt_Enable(Ext_INT1);
	
	
	EnableAllInterrupts();
     1b8:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <EnableAllInterrupts>
	//Timer0_Init();
	/*****************************************************************************/
	/* Printing Welcome screen */
	LCD_SetPos(1, 0);
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
	LCD_String("Welcome to smart");
     1c4:	8c ec       	ldi	r24, 0xCC	; 204
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
	Bluetooth_TransmaitString("Welcome to smart");
     1cc:	8c ec       	ldi	r24, 0xCC	; 204
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
	LCD_SetPos(2, 0);
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
	LCD_String("home system");
     1dc:	8d ed       	ldi	r24, 0xDD	; 221
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
	Bluetooth_TransmaitString("home system");
     1e4:	8d ed       	ldi	r24, 0xDD	; 221
     1e6:	90 e0       	ldi	r25, 0x00	; 0
     1e8:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ec:	2f ef       	ldi	r18, 0xFF	; 255
     1ee:	33 ed       	ldi	r19, 0xD3	; 211
     1f0:	80 e3       	ldi	r24, 0x30	; 48
     1f2:	21 50       	subi	r18, 0x01	; 1
     1f4:	30 40       	sbci	r19, 0x00	; 0
     1f6:	80 40       	sbci	r24, 0x00	; 0
     1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x92>
     1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x9c>
     1fc:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
     1fe:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
	
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	advvalue = LM35_Read(ADC_Channel0);
     202:	80 e0       	ldi	r24, 0x00	; 0
     204:	0e 94 a5 0a 	call	0x154a	; 0x154a <LM35_Read>
     208:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <advvalue+0x1>
     20c:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <advvalue>
	if (advvalue >required_temperature)
     210:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     214:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     218:	28 17       	cp	r18, r24
     21a:	39 07       	cpc	r19, r25
     21c:	20 f4       	brcc	.+8      	; 0x226 <main+0xc6>
	{
		DIO_WriteChannel(DIO_ChannelB7,STD_High);
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	8f e0       	ldi	r24, 0x0F	; 15
     222:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	}
	
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
     226:	80 e5       	ldi	r24, 0x50	; 80
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_ui8ReadByteFromAddress>
     22e:	81 30       	cpi	r24, 0x01	; 1
     230:	39 f4       	brne	.+14     	; 0x240 <main+0xe0>
     232:	84 e6       	ldi	r24, 0x64	; 100
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_ui8ReadByteFromAddress>
     23a:	81 30       	cpi	r24, 0x01	; 1
     23c:	09 f4       	brne	.+2      	; 0x240 <main+0xe0>
     23e:	dc c0       	rjmp	.+440    	; 0x3f8 <main+0x298>
	{
		LCD_String("Login for");//printing login menu
     240:	89 ee       	ldi	r24, 0xE9	; 233
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
		LCD_SetPos(2,1);//move the cursor to the second line
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	82 e0       	ldi	r24, 0x02	; 2
     24c:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
		LCD_String("first time");
     250:	83 ef       	ldi	r24, 0xF3	; 243
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     258:	9f ef       	ldi	r25, 0xFF	; 255
     25a:	e3 ed       	ldi	r30, 0xD3	; 211
     25c:	f0 e3       	ldi	r31, 0x30	; 48
     25e:	91 50       	subi	r25, 0x01	; 1
     260:	e0 40       	sbci	r30, 0x00	; 0
     262:	f0 40       	sbci	r31, 0x00	; 0
     264:	e1 f7       	brne	.-8      	; 0x25e <main+0xfe>
     266:	00 c0       	rjmp	.+0      	; 0x268 <main+0x108>
     268:	00 00       	nop
		_delay_ms(1000);//Halt the system for the given time in (ms)
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     26a:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
		LCD_String("Set Admin pass");//printing the set admin password menu
     26e:	8e ef       	ldi	r24, 0xFE	; 254
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
		LCD_SetPos(2,1);
     276:	61 e0       	ldi	r22, 0x01	; 1
     278:	82 e0       	ldi	r24, 0x02	; 2
     27a:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
		LCD_String("Admin pass:");
     27e:	8d e0       	ldi	r24, 0x0D	; 13
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
		
		/********************************* setting Admin password **********************************************/
		u8 pass_counter = 0;  // the counter of the characters of the password
		u8 pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};  // the array where it stored the password
     286:	8f ef       	ldi	r24, 0xFF	; 255
     288:	89 83       	std	Y+1, r24	; 0x01
     28a:	8a 83       	std	Y+2, r24	; 0x02
     28c:	8b 83       	std	Y+3, r24	; 0x03
     28e:	8c 83       	std	Y+4, r24	; 0x04
     290:	9e 01       	movw	r18, r28
     292:	2f 5f       	subi	r18, 0xFF	; 255
     294:	3f 4f       	sbci	r19, 0xFF	; 255
     296:	79 01       	movw	r14, r18
     298:	69 01       	movw	r12, r18
     29a:	1c e0       	ldi	r17, 0x0C	; 12
		while (pass_counter < PASS_SIZE) {  // loop till the user finishes inserting the pass
			key_pressed = 0;  // return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0) {  // repeat till the user presses any key
				key_pressed = GetKey();  // if the user pressed any button on the keypad, save the value in GetKey
     29c:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GetKey>
     2a0:	3f ef       	ldi	r19, 0xFF	; 255
     2a2:	99 ef       	ldi	r25, 0xF9	; 249
     2a4:	e0 e0       	ldi	r30, 0x00	; 0
     2a6:	31 50       	subi	r19, 0x01	; 1
     2a8:	90 40       	sbci	r25, 0x00	; 0
     2aa:	e0 40       	sbci	r30, 0x00	; 0
     2ac:	e1 f7       	brne	.-8      	; 0x2a6 <main+0x146>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <main+0x150>
     2b0:	00 00       	nop
		/********************************* setting Admin password **********************************************/
		u8 pass_counter = 0;  // the counter of the characters of the password
		u8 pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};  // the array where it stored the password
		while (pass_counter < PASS_SIZE) {  // loop till the user finishes inserting the pass
			key_pressed = 0;  // return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0) {  // repeat till the user presses any key
     2b2:	88 23       	and	r24, r24
     2b4:	99 f3       	breq	.-26     	; 0x29c <main+0x13c>
				key_pressed = GetKey();  // if the user pressed any button on the keypad, save the value in GetKey
				_delay_ms(20);
			}

			pass[pass_counter] = key_pressed;  // add the entered character to the pass array
     2b6:	f6 01       	movw	r30, r12
     2b8:	81 93       	st	Z+, r24
     2ba:	6f 01       	movw	r12, r30
			LCD_Char(key_pressed);  // print the entered character
     2bc:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     2c0:	ff ef       	ldi	r31, 0xFF	; 255
     2c2:	25 ea       	ldi	r18, 0xA5	; 165
     2c4:	3e e0       	ldi	r19, 0x0E	; 14
     2c6:	f1 50       	subi	r31, 0x01	; 1
     2c8:	20 40       	sbci	r18, 0x00	; 0
     2ca:	30 40       	sbci	r19, 0x00	; 0
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <main+0x166>
     2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <main+0x170>
     2d0:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);  // Halt the system for the given time in (ms)
			LCD_SetPos(2, 12 + pass_counter);  // move the LCD cursor to the previous location to write the password symbol over the character
     2d2:	61 2f       	mov	r22, r17
     2d4:	82 e0       	ldi	r24, 0x02	; 2
     2d6:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
			LCD_Char(PASSWORD_SYMBOL);  // to display (Password sign *)
     2da:	8a e2       	ldi	r24, 0x2A	; 42
     2dc:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     2e0:	8f ef       	ldi	r24, 0xFF	; 255
     2e2:	91 ee       	ldi	r25, 0xE1	; 225
     2e4:	e4 e0       	ldi	r30, 0x04	; 4
     2e6:	81 50       	subi	r24, 0x01	; 1
     2e8:	90 40       	sbci	r25, 0x00	; 0
     2ea:	e0 40       	sbci	r30, 0x00	; 0
     2ec:	e1 f7       	brne	.-8      	; 0x2e6 <main+0x186>
     2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <main+0x190>
     2f0:	00 00       	nop
     2f2:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_String("Admin pass:");
		
		/********************************* setting Admin password **********************************************/
		u8 pass_counter = 0;  // the counter of the characters of the password
		u8 pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};  // the array where it stored the password
		while (pass_counter < PASS_SIZE) {  // loop till the user finishes inserting the pass
     2f4:	10 31       	cpi	r17, 0x10	; 16
     2f6:	91 f6       	brne	.-92     	; 0x29c <main+0x13c>
			LCD_Char(PASSWORD_SYMBOL);  // to display (Password sign *)
			_delay_ms(100);  // Halt the system for the given time in (ms)
			pass_counter++;  // increase the characters count
		}

		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     2f8:	44 e0       	ldi	r20, 0x04	; 4
     2fa:	50 e0       	ldi	r21, 0x00	; 0
     2fc:	be 01       	movw	r22, r28
     2fe:	6f 5f       	subi	r22, 0xFF	; 255
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	84 e1       	ldi	r24, 0x14	; 20
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 fd 08 	call	0x11fa	; 0x11fa <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	80 e5       	ldi	r24, 0x50	; 80
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 21 09 	call	0x1242	; 0x1242 <EEPROM_vWriteByteToAddress>
		
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     314:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
		LCD_String("Pass Saved");// show pass saved message
     318:	89 e1       	ldi	r24, 0x19	; 25
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     320:	ff ef       	ldi	r31, 0xFF	; 255
     322:	29 e6       	ldi	r18, 0x69	; 105
     324:	38 e1       	ldi	r19, 0x18	; 24
     326:	f1 50       	subi	r31, 0x01	; 1
     328:	20 40       	sbci	r18, 0x00	; 0
     32a:	30 40       	sbci	r19, 0x00	; 0
     32c:	e1 f7       	brne	.-8      	; 0x326 <main+0x1c6>
     32e:	00 c0       	rjmp	.+0      	; 0x330 <main+0x1d0>
     330:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     332:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
		
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_String("Set Guest Pass");//printing the set admin password menu
     336:	84 e2       	ldi	r24, 0x24	; 36
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
		LCD_SetPos(2,1);
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
		LCD_String("Guest Pass:");
     346:	83 e3       	ldi	r24, 0x33	; 51
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     34e:	1c e0       	ldi	r17, 0x0C	; 12
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0)//repeat till the user press any key
			{
				key_pressed = GetKey();//if the user pressed any button in keypad save the value in key_pressed
     350:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GetKey>
     354:	9f ef       	ldi	r25, 0xFF	; 255
     356:	e9 ef       	ldi	r30, 0xF9	; 249
     358:	f0 e0       	ldi	r31, 0x00	; 0
     35a:	91 50       	subi	r25, 0x01	; 1
     35c:	e0 40       	sbci	r30, 0x00	; 0
     35e:	f0 40       	sbci	r31, 0x00	; 0
     360:	e1 f7       	brne	.-8      	; 0x35a <main+0x1fa>
     362:	00 c0       	rjmp	.+0      	; 0x364 <main+0x204>
     364:	00 00       	nop
		LCD_SetPos(2,1);
		LCD_String("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0)//repeat till the user press any key
     366:	88 23       	and	r24, r24
     368:	99 f3       	breq	.-26     	; 0x350 <main+0x1f0>
			{
				key_pressed = GetKey();//if the user pressed any button in keypad save the value in key_pressed
				_delay_ms(20);
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     36a:	f7 01       	movw	r30, r14
     36c:	81 93       	st	Z+, r24
     36e:	7f 01       	movw	r14, r30
			LCD_Char(key_pressed);//print the entered character
     370:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     374:	ff ef       	ldi	r31, 0xFF	; 255
     376:	25 ea       	ldi	r18, 0xA5	; 165
     378:	3e e0       	ldi	r19, 0x0E	; 14
     37a:	f1 50       	subi	r31, 0x01	; 1
     37c:	20 40       	sbci	r18, 0x00	; 0
     37e:	30 40       	sbci	r19, 0x00	; 0
     380:	e1 f7       	brne	.-8      	; 0x37a <main+0x21a>
     382:	00 c0       	rjmp	.+0      	; 0x384 <main+0x224>
     384:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_SetPos(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     386:	61 2f       	mov	r22, r17
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
			LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
     38e:	8a e2       	ldi	r24, 0x2A	; 42
     390:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     394:	8f ef       	ldi	r24, 0xFF	; 255
     396:	91 ee       	ldi	r25, 0xE1	; 225
     398:	e4 e0       	ldi	r30, 0x04	; 4
     39a:	81 50       	subi	r24, 0x01	; 1
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e0 40       	sbci	r30, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <main+0x23a>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <main+0x244>
     3a4:	00 00       	nop
     3a6:	1f 5f       	subi	r17, 0xFF	; 255
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_String("Set Guest Pass");//printing the set admin password menu
		LCD_SetPos(2,1);
		LCD_String("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     3a8:	10 31       	cpi	r17, 0x10	; 16
     3aa:	91 f6       	brne	.-92     	; 0x350 <main+0x1f0>
			LCD_SetPos(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     3ac:	44 e0       	ldi	r20, 0x04	; 4
     3ae:	50 e0       	ldi	r21, 0x00	; 0
     3b0:	be 01       	movw	r22, r28
     3b2:	6f 5f       	subi	r22, 0xFF	; 255
     3b4:	7f 4f       	sbci	r23, 0xFF	; 255
     3b6:	88 e2       	ldi	r24, 0x28	; 40
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 fd 08 	call	0x11fa	; 0x11fa <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	84 e6       	ldi	r24, 0x64	; 100
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 21 09 	call	0x1242	; 0x1242 <EEPROM_vWriteByteToAddress>
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     3c8:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
		LCD_String("Pass Saved");//move the lcd cursor to the previous location
     3cc:	89 e1       	ldi	r24, 0x19	; 25
     3ce:	91 e0       	ldi	r25, 0x01	; 1
     3d0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     3d4:	ff ef       	ldi	r31, 0xFF	; 255
     3d6:	29 e6       	ldi	r18, 0x69	; 105
     3d8:	38 e1       	ldi	r19, 0x18	; 24
     3da:	f1 50       	subi	r31, 0x01	; 1
     3dc:	20 40       	sbci	r18, 0x00	; 0
     3de:	30 40       	sbci	r19, 0x00	; 0
     3e0:	e1 f7       	brne	.-8      	; 0x3da <main+0x27a>
     3e2:	00 c0       	rjmp	.+0      	; 0x3e4 <main+0x284>
     3e4:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     3e6:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
     3ea:	60 e0       	ldi	r22, 0x00	; 0
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	91 e0       	ldi	r25, 0x01	; 1
     3f0:	0e 94 21 09 	call	0x1242	; 0x1242 <EEPROM_vWriteByteToAddress>
	u8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	u8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	u8 Dimmer_ones = NOT_SELECTED;
	u8 Dimmer_tens = NOT_SELECTED;
	u8 Dimmer_hundreds = NOT_SELECTED;
	u8 block_mode_flag = FALSE;
     3f4:	1a 86       	std	Y+10, r1	; 0x0a
	{
		DIO_WriteChannel(DIO_ChannelB7,STD_High);
	}
	
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
	{
     3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
		
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		block_mode_flag = EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
     3f8:	8a e0       	ldi	r24, 0x0A	; 10
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	0e 94 1a 09 	call	0x1234	; 0x1234 <EEPROM_ui8ReadByteFromAddress>
     400:	8a 87       	std	Y+10, r24	; 0x0a
	u8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	u8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	u8 Dimmer_ones = NOT_SELECTED;
	u8 Dimmer_tens = NOT_SELECTED;
	u8 Dimmer_hundreds = NOT_SELECTED;
	u8 block_mode_flag = FALSE;
     402:	10 e0       	ldi	r17, 0x00	; 0
	{
		
		key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
		u8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		if ( pass_tries_count!=3 ){
			login_mode=NO_MODE;//log the user out
     404:	b1 2c       	mov	r11, r1
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			u8 pass_counter=0;//counts the entered key of the password from the keypad
			u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     406:	aa 24       	eor	r10, r10
     408:	aa 94       	dec	r10
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_SetPos(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
						LCD_Char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						rxdata = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     40a:	cb 2c       	mov	r12, r11
						LCD_String("Wrong Pass");
						Bluetooth_TransmaitString("Wrong Pass");
						LCD_SetPos(2,1);
						LCD_String("Tries left:");
						Bluetooth_TransmaitString("Tries left:");
						LCD_Char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     40c:	0f 2e       	mov	r0, r31
     40e:	f3 e3       	ldi	r31, 0x33	; 51
     410:	8f 2e       	mov	r8, r31
     412:	f0 2d       	mov	r31, r0
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_SetPos(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
						LCD_Char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						rxdata = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     414:	db 2c       	mov	r13, r11
     416:	b9 86       	std	Y+9, r11	; 0x09
	{
		
		key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
		u8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		if ( pass_tries_count!=3 ){
			login_mode=NO_MODE;//log the user out
     418:	b0 92 39 03 	sts	0x0339, r11	; 0x800339 <login_mode>
			key_pressed = 0;//clear the key_pressed to avoid unwanted selection in the menu switch
			DIO_WriteChannel(DIO_ChannelD6,STD_Low);//turnoff the led of the admin
     41c:	6b 2d       	mov	r22, r11
     41e:	8e e1       	ldi	r24, 0x1E	; 30
     420:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
			DIO_WriteChannel(DIO_ChannelD3,STD_Low);//turnoff the led of the guest
     424:	6b 2d       	mov	r22, r11
     426:	8b e1       	ldi	r24, 0x1B	; 27
     428:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	93 ed       	ldi	r25, 0xD3	; 211
     430:	e0 e3       	ldi	r30, 0x30	; 48
     432:	81 50       	subi	r24, 0x01	; 1
     434:	90 40       	sbci	r25, 0x00	; 0
     436:	e0 40       	sbci	r30, 0x00	; 0
     438:	e1 f7       	brne	.-8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
     43c:	00 00       	nop
	
	while (1)//The start of the periodic code
	{
		
		key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
		u8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
     43e:	61 2c       	mov	r6, r1
		if ( pass_tries_count!=3 ){
			login_mode=NO_MODE;//log the user out
			key_pressed = 0;//clear the key_pressed to avoid unwanted selection in the menu switch
     440:	fb 2c       	mov	r15, r11
     442:	20 c2       	rjmp	.+1088   	; 0x884 <__stack+0x25>
		
		
		
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
     444:	fa 85       	ldd	r31, Y+10	; 0x0a
     446:	f1 30       	cpi	r31, 0x01	; 1
     448:	c9 f5       	brne	.+114    	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
			{
				LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     44a:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
				LCD_String("Login blocked");
     44e:	8f e3       	ldi	r24, 0x3F	; 63
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
				Bluetooth_TransmaitString("Login blocked");
     456:	8f e3       	ldi	r24, 0x3F	; 63
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
				LCD_SetPos(2,1);
     45e:	61 e0       	ldi	r22, 0x01	; 1
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
				LCD_String("wait 20 seconds");
     466:	8d e4       	ldi	r24, 0x4D	; 77
     468:	91 e0       	ldi	r25, 0x01	; 1
     46a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
				Bluetooth_TransmaitString("wait 20 seconds");
     46e:	8d e4       	ldi	r24, 0x4D	; 77
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
				DIO_WriteChannel(DIO_ChannelD4,STD_High);//Turn on the led of Blocked
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	8c e1       	ldi	r24, 0x1C	; 28
     47a:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelA3,STD_High);
     47e:	61 e0       	ldi	r22, 0x01	; 1
     480:	83 e0       	ldi	r24, 0x03	; 3
     482:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
     486:	24 e5       	ldi	r18, 0x54	; 84
     488:	3d ec       	ldi	r19, 0xCD	; 205
     48a:	8d e2       	ldi	r24, 0x2D	; 45
     48c:	93 e0       	ldi	r25, 0x03	; 3
     48e:	21 50       	subi	r18, 0x01	; 1
     490:	30 40       	sbci	r19, 0x00	; 0
     492:	80 40       	sbci	r24, 0x00	; 0
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	d9 f7       	brne	.-10     	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     498:	00 c0       	rjmp	.+0      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
     49c:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				DIO_WriteChannel(DIO_ChannelA3,STD_Low);
     49e:	6c 2d       	mov	r22, r12
     4a0:	83 e0       	ldi	r24, 0x03	; 3
     4a2:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode_flag = FALSE;//Disable block of runtime
				DIO_WriteChannel(DIO_ChannelD4,STD_Low);//Turn off the led of Blocked
     4a6:	6c 2d       	mov	r22, r12
     4a8:	8c e1       	ldi	r24, 0x1C	; 28
     4aa:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     4ae:	6c 2d       	mov	r22, r12
     4b0:	8a e0       	ldi	r24, 0x0A	; 10
     4b2:	91 e0       	ldi	r25, 0x01	; 1
     4b4:	0e 94 21 09 	call	0x1242	; 0x1242 <EEPROM_vWriteByteToAddress>
				Bluetooth_TransmaitString("wait 20 seconds");
				DIO_WriteChannel(DIO_ChannelD4,STD_High);//Turn on the led of Blocked
				DIO_WriteChannel(DIO_ChannelA3,STD_High);
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				DIO_WriteChannel(DIO_ChannelA3,STD_Low);
				pass_tries_count = 0; //Clear the count on number of wrong tries
     4b8:	61 2c       	mov	r6, r1
				block_mode_flag = FALSE;//Disable block of runtime
     4ba:	ca 86       	std	Y+10, r12	; 0x0a
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}
			
			
			
			LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     4bc:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
			LCD_String("Select mode :");
     4c0:	8d e5       	ldi	r24, 0x5D	; 93
     4c2:	91 e0       	ldi	r25, 0x01	; 1
     4c4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
			LCD_SetPos(2,1);
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
			LCD_String("0:Admin 1:Guest");
     4d0:	8b e6       	ldi	r24, 0x6B	; 107
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
			/*Bluetooth_TransmaitString("Select mode : 0:Admin 1:Guest");*/
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     4d8:	f1 10       	cpse	r15, r1
     4da:	0e c0       	rjmp	.+28     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
			{
				key_pressed = GetKey();
     4dc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GetKey>
     4e0:	f8 2e       	mov	r15, r24
     4e2:	ef ef       	ldi	r30, 0xFF	; 255
     4e4:	f9 ef       	ldi	r31, 0xF9	; 249
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	e1 50       	subi	r30, 0x01	; 1
     4ea:	f0 40       	sbci	r31, 0x00	; 0
     4ec:	20 40       	sbci	r18, 0x00	; 0
     4ee:	e1 f7       	brne	.-8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
     4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <__LOCK_REGION_LENGTH__+0xf2>
     4f2:	00 00       	nop
			LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_String("Select mode :");
			LCD_SetPos(2,1);
			LCD_String("0:Admin 1:Guest");
			/*Bluetooth_TransmaitString("Select mode : 0:Admin 1:Guest");*/
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     4f4:	88 23       	and	r24, r24
     4f6:	91 f3       	breq	.-28     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			{
				key_pressed = GetKey();
				_delay_ms(20);//if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
     4f8:	80 ed       	ldi	r24, 0xD0	; 208
     4fa:	8f 0d       	add	r24, r15
     4fc:	82 30       	cpi	r24, 0x02	; 2
     4fe:	88 f0       	brcs	.+34     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
			{
				LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     500:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
				LCD_String("Wrong input.");//Prints error message on the LCD
     504:	8b e7       	ldi	r24, 0x7B	; 123
     506:	91 e0       	ldi	r25, 0x01	; 1
     508:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     50c:	3f ef       	ldi	r19, 0xFF	; 255
     50e:	83 ed       	ldi	r24, 0xD3	; 211
     510:	90 e3       	ldi	r25, 0x30	; 48
     512:	31 50       	subi	r19, 0x01	; 1
     514:	80 40       	sbci	r24, 0x00	; 0
     516:	90 40       	sbci	r25, 0x00	; 0
     518:	e1 f7       	brne	.-8      	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     51a:	00 c0       	rjmp	.+0      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     51c:	00 00       	nop
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     51e:	fc 2c       	mov	r15, r12
     520:	b1 c1       	rjmp	.+866    	; 0x884 <__stack+0x25>
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
			}

			u8 pass_counter=0;//counts the entered key of the password from the keypad
			u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     522:	ad 82       	std	Y+5, r10	; 0x05
     524:	ae 82       	std	Y+6, r10	; 0x06
     526:	af 82       	std	Y+7, r10	; 0x07
     528:	a8 86       	std	Y+8, r10	; 0x08
			u8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
     52a:	a9 82       	std	Y+1, r10	; 0x01
     52c:	aa 82       	std	Y+2, r10	; 0x02
     52e:	ab 82       	std	Y+3, r10	; 0x03
     530:	ac 82       	std	Y+4, r10	; 0x04
			
			switch(key_pressed)
     532:	e0 e3       	ldi	r30, 0x30	; 48
     534:	fe 16       	cp	r15, r30
     536:	09 f4       	brne	.+2      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
     538:	ed c0       	rjmp	.+474    	; 0x714 <__LOCK_REGION_LENGTH__+0x314>
     53a:	f1 e3       	ldi	r31, 0x31	; 49
     53c:	ff 16       	cp	r15, r31
     53e:	09 f4       	brne	.+2      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     540:	9c c1       	rjmp	.+824    	; 0x87a <__stack+0x1b>
     542:	a0 c1       	rjmp	.+832    	; 0x884 <__stack+0x25>
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     544:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					LCD_String("Admin mode");
     548:	88 e8       	ldi	r24, 0x88	; 136
     54a:	91 e0       	ldi	r25, 0x01	; 1
     54c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					Bluetooth_TransmaitString("Admin mode");
     550:	88 e8       	ldi	r24, 0x88	; 136
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
					LCD_SetPos(2,1);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	82 e0       	ldi	r24, 0x02	; 2
     55c:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					LCD_String("Enter Pass:");
     560:	83 e9       	ldi	r24, 0x93	; 147
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					Bluetooth_TransmaitString("Enter Pass:");
     568:	83 e9       	ldi	r24, 0x93	; 147
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
     570:	2f ef       	ldi	r18, 0xFF	; 255
     572:	33 ec       	ldi	r19, 0xC3	; 195
     574:	89 e0       	ldi	r24, 0x09	; 9
     576:	21 50       	subi	r18, 0x01	; 1
     578:	30 40       	sbci	r19, 0x00	; 0
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	e1 f7       	brne	.-8      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     57e:	00 c0       	rjmp	.+0      	; 0x580 <__LOCK_REGION_LENGTH__+0x180>
     580:	00 00       	nop
     582:	7e 01       	movw	r14, r28
     584:	95 e0       	ldi	r25, 0x05	; 5
     586:	e9 0e       	add	r14, r25
     588:	f1 1c       	adc	r15, r1
     58a:	0c e0       	ldi	r16, 0x0C	; 12
     58c:	31 c0       	rjmp	.+98     	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (rxdata == NOT_PRESSED)//repeat till the user press any key
						{
							rxdata = u8GetTX();//if the user pressed any button in keypad save the value in key_pressed
     58e:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     592:	18 2f       	mov	r17, r24
     594:	ef ef       	ldi	r30, 0xFF	; 255
     596:	f9 ef       	ldi	r31, 0xF9	; 249
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	e1 50       	subi	r30, 0x01	; 1
     59c:	f0 40       	sbci	r31, 0x00	; 0
     59e:	20 40       	sbci	r18, 0x00	; 0
     5a0:	e1 f7       	brne	.-8      	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
     5a2:	00 c0       	rjmp	.+0      	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     5a4:	00 00       	nop
					Bluetooth_TransmaitString("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (rxdata == NOT_PRESSED)//repeat till the user press any key
     5a6:	88 23       	and	r24, r24
     5a8:	91 f3       	breq	.-28     	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
						{
							rxdata = u8GetTX();//if the user pressed any button in keypad save the value in key_pressed
							_delay_ms(20);
						}
						pass[pass_counter]=rxdata;//add the entered character to the pass array
     5aa:	f7 01       	movw	r30, r14
     5ac:	11 93       	st	Z+, r17
     5ae:	7f 01       	movw	r14, r30
						LCD_Char(rxdata);//print the entered character
     5b0:	81 2f       	mov	r24, r17
     5b2:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     5b6:	ff ef       	ldi	r31, 0xFF	; 255
     5b8:	25 ea       	ldi	r18, 0xA5	; 165
     5ba:	3e e0       	ldi	r19, 0x0E	; 14
     5bc:	f1 50       	subi	r31, 0x01	; 1
     5be:	20 40       	sbci	r18, 0x00	; 0
     5c0:	30 40       	sbci	r19, 0x00	; 0
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
     5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
     5c6:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_SetPos(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
     5c8:	60 2f       	mov	r22, r16
     5ca:	82 e0       	ldi	r24, 0x02	; 2
     5cc:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_Char(PASSWORD_SYMBOL);// to display (Password sign *)
     5d0:	8a e2       	ldi	r24, 0x2A	; 42
     5d2:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     5d6:	8f ef       	ldi	r24, 0xFF	; 255
     5d8:	91 ee       	ldi	r25, 0xE1	; 225
     5da:	e4 e0       	ldi	r30, 0x04	; 4
     5dc:	81 50       	subi	r24, 0x01	; 1
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e0 40       	sbci	r30, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <__LOCK_REGION_LENGTH__+0x1dc>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     5e6:	00 00       	nop
     5e8:	0f 5f       	subi	r16, 0xFF	; 255
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						rxdata = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     5ea:	19 85       	ldd	r17, Y+9	; 0x09
					LCD_SetPos(2,1);
					LCD_String("Enter Pass:");
					Bluetooth_TransmaitString("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     5ec:	00 31       	cpi	r16, 0x10	; 16
     5ee:	19 f0       	breq	.+6      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
					{
						while (rxdata == NOT_PRESSED)//repeat till the user press any key
     5f0:	11 23       	and	r17, r17
     5f2:	69 f2       	breq	.-102    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     5f4:	da cf       	rjmp	.-76     	; 0x5aa <__LOCK_REGION_LENGTH__+0x1aa>
						LCD_Char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						rxdata = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
     5f6:	44 e0       	ldi	r20, 0x04	; 4
     5f8:	50 e0       	ldi	r21, 0x00	; 0
     5fa:	be 01       	movw	r22, r28
     5fc:	6f 5f       	subi	r22, 0xFF	; 255
     5fe:	7f 4f       	sbci	r23, 0xFF	; 255
     600:	84 e1       	ldi	r24, 0x14	; 20
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	0e 94 e5 08 	call	0x11ca	; 0x11ca <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if ((ui8ComparePass2(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
     608:	44 e0       	ldi	r20, 0x04	; 4
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	be 01       	movw	r22, r28
     60e:	6f 5f       	subi	r22, 0xFF	; 255
     610:	7f 4f       	sbci	r23, 0xFF	; 255
     612:	ce 01       	movw	r24, r28
     614:	05 96       	adiw	r24, 0x05	; 5
     616:	0e 94 7f 07 	call	0xefe	; 0xefe <ui8ComparePass2>
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	09 f0       	breq	.+2      	; 0x620 <__LOCK_REGION_LENGTH__+0x220>
     61e:	43 c0       	rjmp	.+134    	; 0x6a6 <__LOCK_REGION_LENGTH__+0x2a6>
					{
						login_mode = ADMIN;//set the login mode to admin mode
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <login_mode>
						pass_tries_count=0;//clear the counter of wrong tries
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     626:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Right pass");
     62a:	8f e9       	ldi	r24, 0x9F	; 159
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						Bluetooth_TransmaitString("Right pass");
     632:	8f e9       	ldi	r24, 0x9F	; 159
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
						LCD_SetPos(2,1);
     63a:	61 e0       	ldi	r22, 0x01	; 1
     63c:	82 e0       	ldi	r24, 0x02	; 2
     63e:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_String("Admin mode");
     642:	88 e8       	ldi	r24, 0x88	; 136
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						Bluetooth_TransmaitString("Admin mode");
     64a:	88 e8       	ldi	r24, 0x88	; 136
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
     652:	ff ef       	ldi	r31, 0xFF	; 255
     654:	29 e6       	ldi	r18, 0x69	; 105
     656:	38 e1       	ldi	r19, 0x18	; 24
     658:	f1 50       	subi	r31, 0x01	; 1
     65a:	20 40       	sbci	r18, 0x00	; 0
     65c:	30 40       	sbci	r19, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     660:	00 c0       	rjmp	.+0      	; 0x662 <__LOCK_REGION_LENGTH__+0x262>
     662:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						DIO_WriteChannel(DIO_ChannelD6,STD_High);//turn on the led of admin
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	8e e1       	ldi	r24, 0x1E	; 30
     668:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
						LCD_SetPos(1,0);
     66c:	6d 2d       	mov	r22, r13
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_String("Door opening");
     674:	8a ea       	ldi	r24, 0xAA	; 170
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						Bluetooth_TransmaitString("Door opening");
     67c:	8a ea       	ldi	r24, 0xAA	; 170
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
						ServoMotor(90);
     684:	8a e5       	ldi	r24, 0x5A	; 90
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 ac 0a 	call	0x1558	; 0x1558 <ServoMotor>
     68c:	8f ef       	ldi	r24, 0xFF	; 255
     68e:	99 e6       	ldi	r25, 0x69	; 105
     690:	e8 e1       	ldi	r30, 0x18	; 24
     692:	81 50       	subi	r24, 0x01	; 1
     694:	90 40       	sbci	r25, 0x00	; 0
     696:	e0 40       	sbci	r30, 0x00	; 0
     698:	e1 f7       	brne	.-8      	; 0x692 <__LOCK_REGION_LENGTH__+0x292>
     69a:	00 c0       	rjmp	.+0      	; 0x69c <__LOCK_REGION_LENGTH__+0x29c>
     69c:	00 00       	nop
						_delay_ms(500);
						
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     69e:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>

					/*compare passwords*/
					if ((ui8ComparePass2(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
     6a2:	61 2c       	mov	r6, r1
     6a4:	35 c0       	rjmp	.+106    	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
						
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     6a6:	63 94       	inc	r6
						login_mode = NO_MODE;//set the mode as not logged in
     6a8:	d0 92 39 03 	sts	0x0339, r13	; 0x800339 <login_mode>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6ac:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong Pass");
     6b0:	87 eb       	ldi	r24, 0xB7	; 183
     6b2:	91 e0       	ldi	r25, 0x01	; 1
     6b4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						Bluetooth_TransmaitString("Wrong Pass");
     6b8:	87 eb       	ldi	r24, 0xB7	; 183
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
						LCD_SetPos(2,1);
     6c0:	61 e0       	ldi	r22, 0x01	; 1
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_String("Tries left:");
     6c8:	82 ec       	ldi	r24, 0xC2	; 194
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						Bluetooth_TransmaitString("Tries left:");
     6d0:	82 ec       	ldi	r24, 0xC2	; 194
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
						LCD_Char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     6d8:	88 2d       	mov	r24, r8
     6da:	86 19       	sub	r24, r6
     6dc:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     6e0:	ff ef       	ldi	r31, 0xFF	; 255
     6e2:	23 ed       	ldi	r18, 0xD3	; 211
     6e4:	30 e3       	ldi	r19, 0x30	; 48
     6e6:	f1 50       	subi	r31, 0x01	; 1
     6e8:	20 40       	sbci	r18, 0x00	; 0
     6ea:	30 40       	sbci	r19, 0x00	; 0
     6ec:	e1 f7       	brne	.-8      	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <__LOCK_REGION_LENGTH__+0x2f0>
     6f0:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6f2:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	86 15       	cp	r24, r6
     6fa:	50 f4       	brcc	.+20     	; 0x710 <__LOCK_REGION_LENGTH__+0x310>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     6fc:	61 e0       	ldi	r22, 0x01	; 1
     6fe:	8a e0       	ldi	r24, 0x0A	; 10
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	0e 94 21 09 	call	0x1242	; 0x1242 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     706:	1c 2d       	mov	r17, r12
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     708:	fc 2c       	mov	r15, r12
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     70a:	91 e0       	ldi	r25, 0x01	; 1
     70c:	9a 87       	std	Y+10, r25	; 0x0a
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     70e:	ba c0       	rjmp	.+372    	; 0x884 <__stack+0x25>
     710:	fd 2c       	mov	r15, r13
     712:	1d 2d       	mov	r17, r13
			
			switch(key_pressed)
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
     714:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     718:	81 30       	cpi	r24, 0x01	; 1
     71a:	09 f0       	breq	.+2      	; 0x71e <__LOCK_REGION_LENGTH__+0x31e>
     71c:	13 cf       	rjmp	.-474    	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
     71e:	b2 c0       	rjmp	.+356    	; 0x884 <__stack+0x25>
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     720:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					LCD_String("Guest mode");
     724:	8e ec       	ldi	r24, 0xCE	; 206
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					LCD_SetPos(2,1);
     72c:	61 e0       	ldi	r22, 0x01	; 1
     72e:	82 e0       	ldi	r24, 0x02	; 2
     730:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					LCD_String("Enter pass:");
     734:	89 ed       	ldi	r24, 0xD9	; 217
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     73c:	ef ef       	ldi	r30, 0xFF	; 255
     73e:	f3 ec       	ldi	r31, 0xC3	; 195
     740:	29 e0       	ldi	r18, 0x09	; 9
     742:	e1 50       	subi	r30, 0x01	; 1
     744:	f0 40       	sbci	r31, 0x00	; 0
     746:	20 40       	sbci	r18, 0x00	; 0
     748:	e1 f7       	brne	.-8      	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
     74a:	00 c0       	rjmp	.+0      	; 0x74c <__LOCK_REGION_LENGTH__+0x34c>
     74c:	00 00       	nop
     74e:	7e 01       	movw	r14, r28
     750:	35 e0       	ldi	r19, 0x05	; 5
     752:	e3 0e       	add	r14, r19
     754:	f1 1c       	adc	r15, r1
     756:	0c e0       	ldi	r16, 0x0C	; 12
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = GetKey();
     758:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GetKey>
     75c:	9f ef       	ldi	r25, 0xFF	; 255
     75e:	e9 ef       	ldi	r30, 0xF9	; 249
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	91 50       	subi	r25, 0x01	; 1
     764:	e0 40       	sbci	r30, 0x00	; 0
     766:	f0 40       	sbci	r31, 0x00	; 0
     768:	e1 f7       	brne	.-8      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     76a:	00 c0       	rjmp	.+0      	; 0x76c <__LOCK_REGION_LENGTH__+0x36c>
     76c:	00 00       	nop
					LCD_String("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     76e:	88 23       	and	r24, r24
     770:	99 f3       	breq	.-26     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
						{
							key_pressed = GetKey();
							_delay_ms(20);//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
     772:	f7 01       	movw	r30, r14
     774:	81 93       	st	Z+, r24
     776:	7f 01       	movw	r14, r30
						LCD_Char(key_pressed);//print the entered character
     778:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     77c:	ff ef       	ldi	r31, 0xFF	; 255
     77e:	25 ea       	ldi	r18, 0xA5	; 165
     780:	3e e0       	ldi	r19, 0x0E	; 14
     782:	f1 50       	subi	r31, 0x01	; 1
     784:	20 40       	sbci	r18, 0x00	; 0
     786:	30 40       	sbci	r19, 0x00	; 0
     788:	e1 f7       	brne	.-8      	; 0x782 <__LOCK_REGION_LENGTH__+0x382>
     78a:	00 c0       	rjmp	.+0      	; 0x78c <__LOCK_REGION_LENGTH__+0x38c>
     78c:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_SetPos(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
     78e:	60 2f       	mov	r22, r16
     790:	82 e0       	ldi	r24, 0x02	; 2
     792:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
     796:	8a e2       	ldi	r24, 0x2A	; 42
     798:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     79c:	8f ef       	ldi	r24, 0xFF	; 255
     79e:	91 ee       	ldi	r25, 0xE1	; 225
     7a0:	e4 e0       	ldi	r30, 0x04	; 4
     7a2:	81 50       	subi	r24, 0x01	; 1
     7a4:	90 40       	sbci	r25, 0x00	; 0
     7a6:	e0 40       	sbci	r30, 0x00	; 0
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <__LOCK_REGION_LENGTH__+0x3a2>
     7aa:	00 c0       	rjmp	.+0      	; 0x7ac <__LOCK_REGION_LENGTH__+0x3ac>
     7ac:	00 00       	nop
     7ae:	0f 5f       	subi	r16, 0xFF	; 255
					LCD_String("Guest mode");
					LCD_SetPos(2,1);
					LCD_String("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     7b0:	00 31       	cpi	r16, 0x10	; 16
     7b2:	91 f6       	brne	.-92     	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
						LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
     7b4:	44 e0       	ldi	r20, 0x04	; 4
     7b6:	50 e0       	ldi	r21, 0x00	; 0
     7b8:	be 01       	movw	r22, r28
     7ba:	6f 5f       	subi	r22, 0xFF	; 255
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	88 e2       	ldi	r24, 0x28	; 40
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <EEPROM_vReadBlockFromAddress>
					/*compare passwords*/
					if (ui8ComparePass2(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     7c6:	44 e0       	ldi	r20, 0x04	; 4
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	be 01       	movw	r22, r28
     7cc:	6f 5f       	subi	r22, 0xFF	; 255
     7ce:	7f 4f       	sbci	r23, 0xFF	; 255
     7d0:	ce 01       	movw	r24, r28
     7d2:	05 96       	adiw	r24, 0x05	; 5
     7d4:	0e 94 7f 07 	call	0xefe	; 0xefe <ui8ComparePass2>
     7d8:	01 97       	sbiw	r24, 0x01	; 1
     7da:	11 f5       	brne	.+68     	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
					{
						login_mode = GUEST;
     7dc:	82 e0       	ldi	r24, 0x02	; 2
     7de:	80 93 39 03 	sts	0x0339, r24	; 0x800339 <login_mode>
						pass_tries_count=0;//clear the counter of wrong tries
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7e2:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Right pass");
     7e6:	8f e9       	ldi	r24, 0x9F	; 159
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						LCD_SetPos(2,1);
     7ee:	61 e0       	ldi	r22, 0x01	; 1
     7f0:	82 e0       	ldi	r24, 0x02	; 2
     7f2:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_String("Guest mode");
     7f6:	8e ec       	ldi	r24, 0xCE	; 206
     7f8:	91 e0       	ldi	r25, 0x01	; 1
     7fa:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     7fe:	ff ef       	ldi	r31, 0xFF	; 255
     800:	29 e6       	ldi	r18, 0x69	; 105
     802:	38 e1       	ldi	r19, 0x18	; 24
     804:	f1 50       	subi	r31, 0x01	; 1
     806:	20 40       	sbci	r18, 0x00	; 0
     808:	30 40       	sbci	r19, 0x00	; 0
     80a:	e1 f7       	brne	.-8      	; 0x804 <__LOCK_REGION_LENGTH__+0x404>
     80c:	00 c0       	rjmp	.+0      	; 0x80e <__LOCK_REGION_LENGTH__+0x40e>
     80e:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						DIO_WriteChannel(DIO_ChannelD3,STD_High);//turn the led of gust mode that is connected to the master micro controller on
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	8b e1       	ldi	r24, 0x1B	; 27
     814:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     818:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
					/*compare passwords*/
					if (ui8ComparePass2(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
     81c:	61 2c       	mov	r6, r1
     81e:	2c c0       	rjmp	.+88     	; 0x878 <__stack+0x19>
						DIO_WriteChannel(DIO_ChannelD3,STD_High);//turn the led of gust mode that is connected to the master micro controller on
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     820:	63 94       	inc	r6
						login_mode = NO_MODE;//set the mode as not logged in
     822:	c0 92 39 03 	sts	0x0339, r12	; 0x800339 <login_mode>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     826:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong pass");
     82a:	85 ee       	ldi	r24, 0xE5	; 229
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						LCD_SetPos(2,1);
     832:	61 e0       	ldi	r22, 0x01	; 1
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_String("Tries left:");
     83a:	82 ec       	ldi	r24, 0xC2	; 194
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						LCD_Char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     842:	88 2d       	mov	r24, r8
     844:	86 19       	sub	r24, r6
     846:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
     84a:	8f ef       	ldi	r24, 0xFF	; 255
     84c:	93 ed       	ldi	r25, 0xD3	; 211
     84e:	e0 e3       	ldi	r30, 0x30	; 48
     850:	81 50       	subi	r24, 0x01	; 1
     852:	90 40       	sbci	r25, 0x00	; 0
     854:	e0 40       	sbci	r30, 0x00	; 0
     856:	e1 f7       	brne	.-8      	; 0x850 <__LOCK_REGION_LENGTH__+0x450>
     858:	00 c0       	rjmp	.+0      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     85a:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     85c:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     860:	f2 e0       	ldi	r31, 0x02	; 2
     862:	f6 15       	cp	r31, r6
     864:	48 f4       	brcc	.+18     	; 0x878 <__stack+0x19>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     866:	61 e0       	ldi	r22, 0x01	; 1
     868:	8a e0       	ldi	r24, 0x0A	; 10
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 21 09 	call	0x1242	; 0x1242 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     870:	fc 2c       	mov	r15, r12
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	2a 87       	std	Y+10, r18	; 0x0a
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     876:	06 c0       	rjmp	.+12     	; 0x884 <__stack+0x25>
     878:	fc 2c       	mov	r15, r12
				break;//bREAK SWITCH case
				
				
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
     87a:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     87e:	82 30       	cpi	r24, 0x02	; 2
     880:	09 f0       	breq	.+2      	; 0x884 <__stack+0x25>
     882:	4e cf       	rjmp	.-356    	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		
		
		
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     884:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     888:	88 23       	and	r24, r24
     88a:	09 f4       	brne	.+2      	; 0x88e <__stack+0x2f>
     88c:	db cd       	rjmp	.-1098   	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
     88e:	ff 24       	eor	r15, r15
     890:	f3 94       	inc	r15
						Dimmer_ones = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}


					brightness = ((Dimmer_hundreds*100) + (Dimmer_tens*10) + (Dimmer_ones));//set the value of the temperature from the given separated values
     892:	0f 2e       	mov	r0, r31
     894:	f4 e6       	ldi	r31, 0x64	; 100
     896:	3f 2e       	mov	r3, r31
     898:	f0 2d       	mov	r31, r0
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (rxdata == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     89a:	0f 2e       	mov	r0, r31
     89c:	f9 e0       	ldi	r31, 0x09	; 9
     89e:	6f 2e       	mov	r6, r31
     8a0:	f0 2d       	mov	r31, r0
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     8a2:	0f 2e       	mov	r0, r31
     8a4:	fa e0       	ldi	r31, 0x0A	; 10
     8a6:	ef 2e       	mov	r14, r31
     8a8:	f0 2d       	mov	r31, r0
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (rxdata == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     8aa:	0f 2e       	mov	r0, r31
     8ac:	f7 e0       	ldi	r31, 0x07	; 7
     8ae:	9f 2e       	mov	r9, r31
     8b0:	f0 2d       	mov	r31, r0
					}
					else if (rxdata == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     8b2:	68 94       	set
     8b4:	44 24       	eor	r4, r4
     8b6:	43 f8       	bld	r4, 3
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     8b8:	0f 2e       	mov	r0, r31
     8ba:	f6 e0       	ldi	r31, 0x06	; 6
     8bc:	5f 2e       	mov	r5, r31
     8be:	f0 2d       	mov	r31, r0
					LCD_String("1:DimLED 2:RET");
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_DIMMERLED)//If key pressed is 1
					{
						show_menu = DimmerLED_MENU;//Set the next menu to be shown to Air conditioning menu
     8c0:	0f 2e       	mov	r0, r31
     8c2:	fb e0       	ldi	r31, 0x0B	; 11
     8c4:	7f 2e       	mov	r7, r31
     8c6:	f0 2d       	mov	r31, r0
     8c8:	db c2       	rjmp	.+1462   	; 0xe80 <__stack+0x621>
		
		while(block_mode_flag!=TRUE)
		{
			key_pressed = 0;//Set the key pressed by the user to its default value
			u8 Value = 0;
			switch (show_menu)
     8ca:	8f 2d       	mov	r24, r15
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	fc 01       	movw	r30, r24
     8d0:	31 97       	sbiw	r30, 0x01	; 1
     8d2:	ec 30       	cpi	r30, 0x0C	; 12
     8d4:	f1 05       	cpc	r31, r1
     8d6:	d8 f7       	brcc	.-10     	; 0x8ce <__stack+0x6f>
     8d8:	e6 5d       	subi	r30, 0xD6	; 214
     8da:	ff 4f       	sbci	r31, 0xFF	; 255
     8dc:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__tablejump2__>
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_Clear();
     8e0:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					LCD_String("1:Room1 2:Room2");
     8e4:	80 ef       	ldi	r24, 0xF0	; 240
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					if(login_mode==ADMIN)//check login mode
     8ec:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	d1 f4       	brne	.+52     	; 0x928 <__stack+0xc9>
					{
						Bluetooth_TransmaitString("1:Room1 2:Room2");
     8f4:	80 ef       	ldi	r24, 0xF0	; 240
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
     8fc:	3f ef       	ldi	r19, 0xFF	; 255
     8fe:	81 ee       	ldi	r24, 0xE1	; 225
     900:	94 e0       	ldi	r25, 0x04	; 4
     902:	31 50       	subi	r19, 0x01	; 1
     904:	80 40       	sbci	r24, 0x00	; 0
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	e1 f7       	brne	.-8      	; 0x902 <__stack+0xa3>
     90a:	00 c0       	rjmp	.+0      	; 0x90c <__stack+0xad>
     90c:	00 00       	nop
						_delay_ms(100);
						Bluetooth_TransmaitString("3:Room3 4:More");
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	92 e0       	ldi	r25, 0x02	; 2
     912:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
						LCD_SetPos(2,1);
     916:	61 e0       	ldi	r22, 0x01	; 1
     918:	82 e0       	ldi	r24, 0x02	; 2
     91a:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_String("3:Room3 4:More");//this menu options only printed if the logged in user is an admin
     91e:	80 e0       	ldi	r24, 0x00	; 0
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     926:	09 c0       	rjmp	.+18     	; 0x93a <__stack+0xdb>
					}
					else if(login_mode==GUEST)//check login mode
     928:	82 30       	cpi	r24, 0x02	; 2
     92a:	d1 f6       	brne	.-76     	; 0x8e0 <__stack+0x81>
					{
						LCD_SetPos(2,1);
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
						LCD_String("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     932:	8f e0       	ldi	r24, 0x0F	; 15
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					}
					/*******************************************************/
					
					if (login_mode == GUEST)
     93a:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	61 f5       	brne	.+88     	; 0x99a <__stack+0x13b>
					{
						key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	0e 94 88 07 	call	0xf10	; 0xf10 <u8GetKeyPressed>
     94a:	ef ef       	ldi	r30, 0xFF	; 255
     94c:	f1 ee       	ldi	r31, 0xE1	; 225
     94e:	24 e0       	ldi	r18, 0x04	; 4
     950:	e1 50       	subi	r30, 0x01	; 1
     952:	f0 40       	sbci	r31, 0x00	; 0
     954:	20 40       	sbci	r18, 0x00	; 0
     956:	e1 f7       	brne	.-8      	; 0x950 <__stack+0xf1>
     958:	00 c0       	rjmp	.+0      	; 0x95a <__stack+0xfb>
     95a:	00 00       	nop
						_delay_ms(100);//to avoid the duplication of the pressed key
						if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     95c:	81 33       	cpi	r24, 0x31	; 49
     95e:	09 f4       	brne	.+2      	; 0x962 <__stack+0x103>
     960:	94 c2       	rjmp	.+1320   	; 0xe8a <__stack+0x62b>
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     962:	82 33       	cpi	r24, 0x32	; 50
     964:	09 f4       	brne	.+2      	; 0x968 <__stack+0x109>
     966:	96 c2       	rjmp	.+1324   	; 0xe94 <__stack+0x635>
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     968:	83 33       	cpi	r24, 0x33	; 51
     96a:	09 f4       	brne	.+2      	; 0x96e <__stack+0x10f>
     96c:	97 c2       	rjmp	.+1326   	; 0xe9c <__stack+0x63d>
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM4)//If key pressed is 4 and the logged in user is guest
     96e:	84 33       	cpi	r24, 0x34	; 52
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x115>
     972:	99 c2       	rjmp	.+1330   	; 0xea6 <__stack+0x647>
						{
							show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
							Value = key_pressed;
						}
						else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <__stack+0x11b>
     978:	b3 cf       	rjmp	.-154    	; 0x8e0 <__stack+0x81>
						{
							LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     97a:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
							LCD_String("Wrong input");//print error message
     97e:	8f e1       	ldi	r24, 0x1F	; 31
     980:	92 e0       	ldi	r25, 0x02	; 2
     982:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     986:	3f ef       	ldi	r19, 0xFF	; 255
     988:	89 e6       	ldi	r24, 0x69	; 105
     98a:	98 e1       	ldi	r25, 0x18	; 24
     98c:	31 50       	subi	r19, 0x01	; 1
     98e:	80 40       	sbci	r24, 0x00	; 0
     990:	90 40       	sbci	r25, 0x00	; 0
     992:	e1 f7       	brne	.-8      	; 0x98c <__stack+0x12d>
     994:	00 c0       	rjmp	.+0      	; 0x996 <__stack+0x137>
     996:	00 00       	nop
     998:	a3 cf       	rjmp	.-186    	; 0x8e0 <__stack+0x81>
							_delay_ms(500);//Halt the system for the given time in (ms)
							Value = 0;
						}
					}
					else if (login_mode == ADMIN)
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	09 f0       	breq	.+2      	; 0x9a0 <__stack+0x141>
     99e:	a0 cf       	rjmp	.-192    	; 0x8e0 <__stack+0x81>
					{
						rxdata = u8GetTX(login_mode);
     9a0:	81 e0       	ldi	r24, 0x01	; 1
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     9a8:	18 2f       	mov	r17, r24
     9aa:	ef ef       	ldi	r30, 0xFF	; 255
     9ac:	f9 ef       	ldi	r31, 0xF9	; 249
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	e1 50       	subi	r30, 0x01	; 1
     9b2:	f0 40       	sbci	r31, 0x00	; 0
     9b4:	20 40       	sbci	r18, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <__stack+0x151>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <__stack+0x15b>
     9ba:	00 00       	nop
						_delay_ms(20);
						if (rxdata == SELECT_ROOM1)//If key pressed is 1
     9bc:	81 33       	cpi	r24, 0x31	; 49
     9be:	09 f4       	brne	.+2      	; 0x9c2 <__stack+0x163>
     9c0:	74 c2       	rjmp	.+1256   	; 0xeaa <__stack+0x64b>
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM2)//If key pressed is 2
     9c2:	82 33       	cpi	r24, 0x32	; 50
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__stack+0x169>
     9c6:	76 c2       	rjmp	.+1260   	; 0xeb4 <__stack+0x655>
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM3)//If key pressed is 3
     9c8:	83 33       	cpi	r24, 0x33	; 51
     9ca:	09 f4       	brne	.+2      	; 0x9ce <__stack+0x16f>
     9cc:	77 c2       	rjmp	.+1262   	; 0xebc <__stack+0x65d>
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
							Value = rxdata;
						}
						else if (rxdata == ADMIN_MORE_OPTION)//If key pressed is 4 and the logged in user is admin
     9ce:	84 33       	cpi	r24, 0x34	; 52
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <__stack+0x175>
     9d2:	79 c2       	rjmp	.+1266   	; 0xec6 <__stack+0x667>
						{
							show_menu = MORE_MENU;//Set the next menu to be shown to more menu
							Value = rxdata;
						}
						else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     9d4:	88 23       	and	r24, r24
     9d6:	09 f4       	brne	.+2      	; 0x9da <__stack+0x17b>
     9d8:	83 cf       	rjmp	.-250    	; 0x8e0 <__stack+0x81>
						{
							LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9da:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
							LCD_String("Wrong input");//print error message
     9de:	8f e1       	ldi	r24, 0x1F	; 31
     9e0:	92 e0       	ldi	r25, 0x02	; 2
     9e2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     9e6:	3f ef       	ldi	r19, 0xFF	; 255
     9e8:	89 e6       	ldi	r24, 0x69	; 105
     9ea:	98 e1       	ldi	r25, 0x18	; 24
     9ec:	31 50       	subi	r19, 0x01	; 1
     9ee:	80 40       	sbci	r24, 0x00	; 0
     9f0:	90 40       	sbci	r25, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <__stack+0x18d>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <__stack+0x197>
     9f6:	00 00       	nop
     9f8:	73 cf       	rjmp	.-282    	; 0x8e0 <__stack+0x81>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9fa:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					Bluetooth_TransmaitString("1:Room4    2:TV ");
     9fe:	8b e2       	ldi	r24, 0x2B	; 43
     a00:	92 e0       	ldi	r25, 0x02	; 2
     a02:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
     a06:	ef ef       	ldi	r30, 0xFF	; 255
     a08:	f9 ef       	ldi	r31, 0xF9	; 249
     a0a:	20 e0       	ldi	r18, 0x00	; 0
     a0c:	e1 50       	subi	r30, 0x01	; 1
     a0e:	f0 40       	sbci	r31, 0x00	; 0
     a10:	20 40       	sbci	r18, 0x00	; 0
     a12:	e1 f7       	brne	.-8      	; 0xa0c <__stack+0x1ad>
     a14:	00 c0       	rjmp	.+0      	; 0xa16 <__stack+0x1b7>
     a16:	00 00       	nop
					_delay_ms(20);
					Bluetooth_TransmaitString("3:AirCond 4:MORE");
     a18:	8c e3       	ldi	r24, 0x3C	; 60
     a1a:	92 e0       	ldi	r25, 0x02	; 2
     a1c:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
					LCD_String("1:Room4    2:TV ");
     a20:	8b e2       	ldi	r24, 0x2B	; 43
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					LCD_SetPos(2,1);
     a28:	61 e0       	ldi	r22, 0x01	; 1
     a2a:	82 e0       	ldi	r24, 0x02	; 2
     a2c:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					LCD_String("3:AirCond.4:MORE");
     a30:	8d e4       	ldi	r24, 0x4D	; 77
     a32:	92 e0       	ldi	r25, 0x02	; 2
     a34:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
     a38:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     a42:	18 2f       	mov	r17, r24
					
					if (rxdata == SELECT_ROOM4_ADMIN)//If key pressed is 1
     a44:	81 33       	cpi	r24, 0x31	; 49
     a46:	09 f4       	brne	.+2      	; 0xa4a <__stack+0x1eb>
     a48:	42 c2       	rjmp	.+1156   	; 0xece <__stack+0x66f>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (rxdata == SELECT_TV)//If key pressed is 2
     a4a:	82 33       	cpi	r24, 0x32	; 50
     a4c:	09 f4       	brne	.+2      	; 0xa50 <__stack+0x1f1>
     a4e:	41 c2       	rjmp	.+1154   	; 0xed2 <__stack+0x673>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (rxdata == SELECT_AIR_CONDITIONING)//If key pressed is 3
     a50:	83 33       	cpi	r24, 0x33	; 51
     a52:	09 f4       	brne	.+2      	; 0xa56 <__stack+0x1f7>
     a54:	40 c2       	rjmp	.+1152   	; 0xed6 <__stack+0x677>
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (rxdata == ADMIN_LAST_OPTION)//If key pressed is 4 (RET)
     a56:	84 33       	cpi	r24, 0x34	; 52
     a58:	09 f4       	brne	.+2      	; 0xa5c <__stack+0x1fd>
     a5a:	3f c2       	rjmp	.+1150   	; 0xeda <__stack+0x67b>
					{
						show_menu = LAST_MENU;//Set the next menu to be shown to main menu
					}

					else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     a5c:	88 23       	and	r24, r24
     a5e:	69 f2       	breq	.-102    	; 0x9fa <__stack+0x19b>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a60:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     a64:	8f e1       	ldi	r24, 0x1F	; 31
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     a6c:	3f ef       	ldi	r19, 0xFF	; 255
     a6e:	89 e6       	ldi	r24, 0x69	; 105
     a70:	98 e1       	ldi	r25, 0x18	; 24
     a72:	31 50       	subi	r19, 0x01	; 1
     a74:	80 40       	sbci	r24, 0x00	; 0
     a76:	90 40       	sbci	r25, 0x00	; 0
     a78:	e1 f7       	brne	.-8      	; 0xa72 <__stack+0x213>
     a7a:	00 c0       	rjmp	.+0      	; 0xa7c <__stack+0x21d>
     a7c:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (rxdata < '1') || (rxdata > '4') ));//break the loop in case of valid key or time is out
     a7e:	8f ec       	ldi	r24, 0xCF	; 207
     a80:	81 0f       	add	r24, r17
     a82:	84 30       	cpi	r24, 0x04	; 4
     a84:	08 f0       	brcs	.+2      	; 0xa88 <__stack+0x229>
     a86:	b9 cf       	rjmp	.-142    	; 0x9fa <__stack+0x19b>
     a88:	fb c1       	rjmp	.+1014   	; 0xe80 <__stack+0x621>
				
				case LAST_MENU:
				do
				{
					/******************** print more Menu ******************/
					Bluetooth_TransmaitString("1:DimLED 2:RET");
     a8a:	8e e5       	ldi	r24, 0x5E	; 94
     a8c:	92 e0       	ldi	r25, 0x02	; 2
     a8e:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a92:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					LCD_String("1:DimLED 2:RET");
     a96:	8e e5       	ldi	r24, 0x5E	; 94
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					rxdata = u8GetTX(login_mode);
     a9e:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     aa8:	18 2f       	mov	r17, r24
					
					if (rxdata == SELECT_DIMMERLED)//If key pressed is 1
     aaa:	81 33       	cpi	r24, 0x31	; 49
     aac:	09 f4       	brne	.+2      	; 0xab0 <__stack+0x251>
     aae:	1a c2       	rjmp	.+1076   	; 0xee4 <__stack+0x685>
					{
						show_menu = DimmerLED_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (rxdata == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
     ab0:	82 33       	cpi	r24, 0x32	; 50
     ab2:	09 f4       	brne	.+2      	; 0xab6 <__stack+0x257>
     ab4:	19 c2       	rjmp	.+1074   	; 0xee8 <__stack+0x689>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
					}
					else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     ab6:	88 23       	and	r24, r24
     ab8:	41 f3       	breq	.-48     	; 0xa8a <__stack+0x22b>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     aba:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     abe:	8f e1       	ldi	r24, 0x1F	; 31
     ac0:	92 e0       	ldi	r25, 0x02	; 2
     ac2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     ac6:	ef ef       	ldi	r30, 0xFF	; 255
     ac8:	f9 e6       	ldi	r31, 0x69	; 105
     aca:	28 e1       	ldi	r18, 0x18	; 24
     acc:	e1 50       	subi	r30, 0x01	; 1
     ace:	f0 40       	sbci	r31, 0x00	; 0
     ad0:	20 40       	sbci	r18, 0x00	; 0
     ad2:	e1 f7       	brne	.-8      	; 0xacc <__stack+0x26d>
     ad4:	00 c0       	rjmp	.+0      	; 0xad6 <__stack+0x277>
     ad6:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (rxdata < '1') || (rxdata > '2') ));//break the loop in case of valid key or time is out
     ad8:	8f ec       	ldi	r24, 0xCF	; 207
     ada:	81 0f       	add	r24, r17
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	a8 f6       	brcc	.-86     	; 0xa8a <__stack+0x22b>
     ae0:	cf c1       	rjmp	.+926    	; 0xe80 <__stack+0x621>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     ae2:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					Bluetooth_TransmaitString("1:Set temperature");
     ae6:	8d e6       	ldi	r24, 0x6D	; 109
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
					Bluetooth_TransmaitString("2:Control  3:RET");
     aee:	8f e7       	ldi	r24, 0x7F	; 127
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
					LCD_String("1:Set temperature ");
     af6:	80 e9       	ldi	r24, 0x90	; 144
     af8:	92 e0       	ldi	r25, 0x02	; 2
     afa:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					LCD_SetPos(2,1);
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	82 e0       	ldi	r24, 0x02	; 2
     b02:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					LCD_String("2:Control  3:RET");
     b06:	8f e7       	ldi	r24, 0x7F	; 127
     b08:	92 e0       	ldi	r25, 0x02	; 2
     b0a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
     b0e:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     b18:	18 2f       	mov	r17, r24
					
					if (rxdata == SELECT_SET_TEMPERATURE)//If key pressed is 1
     b1a:	81 33       	cpi	r24, 0x31	; 49
     b1c:	09 f4       	brne	.+2      	; 0xb20 <__stack+0x2c1>
     b1e:	e7 c1       	rjmp	.+974    	; 0xeee <__stack+0x68f>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (rxdata == SELECT_AIR_COND_CTRL)//If key pressed is 2
     b20:	82 33       	cpi	r24, 0x32	; 50
     b22:	09 f4       	brne	.+2      	; 0xb26 <__stack+0x2c7>
     b24:	e6 c1       	rjmp	.+972    	; 0xef2 <__stack+0x693>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (rxdata == SELECT_AIR_COND_RET)//If key pressed is 0
     b26:	83 33       	cpi	r24, 0x33	; 51
     b28:	09 f4       	brne	.+2      	; 0xb2c <__stack+0x2cd>
     b2a:	e5 c1       	rjmp	.+970    	; 0xef6 <__stack+0x697>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     b2c:	88 23       	and	r24, r24
     b2e:	c9 f2       	breq	.-78     	; 0xae2 <__stack+0x283>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     b30:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     b34:	8f e1       	ldi	r24, 0x1F	; 31
     b36:	92 e0       	ldi	r25, 0x02	; 2
     b38:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     b3c:	3f ef       	ldi	r19, 0xFF	; 255
     b3e:	89 e6       	ldi	r24, 0x69	; 105
     b40:	98 e1       	ldi	r25, 0x18	; 24
     b42:	31 50       	subi	r19, 0x01	; 1
     b44:	80 40       	sbci	r24, 0x00	; 0
     b46:	90 40       	sbci	r25, 0x00	; 0
     b48:	e1 f7       	brne	.-8      	; 0xb42 <__stack+0x2e3>
     b4a:	00 c0       	rjmp	.+0      	; 0xb4c <__stack+0x2ed>
     b4c:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (rxdata < '1') || (rxdata > '3') ));//break the loop in case of valid key or time is out
     b4e:	8f ec       	ldi	r24, 0xCF	; 207
     b50:	81 0f       	add	r24, r17
     b52:	83 30       	cpi	r24, 0x03	; 3
     b54:	30 f6       	brcc	.-116    	; 0xae2 <__stack+0x283>
     b56:	94 c1       	rjmp	.+808    	; 0xe80 <__stack+0x621>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
     b58:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <login_mode>
     b5c:	70 e0       	ldi	r23, 0x00	; 0
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	0e 94 a4 07 	call	0xf48	; 0xf48 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     b66:	ff 24       	eor	r15, r15
     b68:	f3 94       	inc	r15
				break;//End of room1 menu case
     b6a:	8a c1       	rjmp	.+788    	; 0xe80 <__stack+0x621>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
     b6c:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <login_mode>
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	84 e0       	ldi	r24, 0x04	; 4
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 a4 07 	call	0xf48	; 0xf48 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     b7a:	ff 24       	eor	r15, r15
     b7c:	f3 94       	inc	r15
				break;//End of room2 menu case
     b7e:	80 c1       	rjmp	.+768    	; 0xe80 <__stack+0x621>
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
     b80:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <login_mode>
     b84:	70 e0       	ldi	r23, 0x00	; 0
     b86:	85 e0       	ldi	r24, 0x05	; 5
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 a4 07 	call	0xf48	; 0xf48 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     b8e:	ff 24       	eor	r15, r15
     b90:	f3 94       	inc	r15
				break;//End of room3 menu case
     b92:	76 c1       	rjmp	.+748    	; 0xe80 <__stack+0x621>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
     b94:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <login_mode>
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	86 e0       	ldi	r24, 0x06	; 6
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 a4 07 	call	0xf48	; 0xf48 <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
     ba2:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     ba6:	82 30       	cpi	r24, 0x02	; 2
     ba8:	09 f4       	brne	.+2      	; 0xbac <__stack+0x34d>
     baa:	68 c1       	rjmp	.+720    	; 0xe7c <__stack+0x61d>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     bac:	68 94       	set
     bae:	ff 24       	eor	r15, r15
     bb0:	f1 f8       	bld	r15, 1
     bb2:	66 c1       	rjmp	.+716    	; 0xe80 <__stack+0x621>
				
				case DimmerLED_MENU://
				brightness = 0;
				while (brightness==0 )//start the loop that asks for the temperature from the user
				{
					InitPWM();
     bb4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <InitPWM>
					rxdata = NOT_PRESSED;//set the key pressed to the default value
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bb8:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					Bluetooth_TransmaitString("Set Brightness:%");
     bbc:	83 ea       	ldi	r24, 0xA3	; 163
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
					LCD_String("Set Brightness:%");//print the format of inserting temperature
     bc4:	83 ea       	ldi	r24, 0xA3	; 163
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					LCD_SetPos(2,0);//move the cursor to the place to write the entered temperature
     bcc:	6b 2d       	mov	r22, r11
     bce:	82 e0       	ldi	r24, 0x02	; 2
     bd0:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					
					/*******************************************************************************/
					rxdata = u8GetTX(login_mode);
     bd4:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     bde:	18 2f       	mov	r17, r24

					if (rxdata > '9')//show wrong input message if the user entered non numeric value
     be0:	8a 33       	cpi	r24, 0x3A	; 58
     be2:	80 f0       	brcs	.+32     	; 0xc04 <__stack+0x3a5>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     be4:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     be8:	8f e1       	ldi	r24, 0x1F	; 31
     bea:	92 e0       	ldi	r25, 0x02	; 2
     bec:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     bf0:	ef ef       	ldi	r30, 0xFF	; 255
     bf2:	f9 e6       	ldi	r31, 0x69	; 105
     bf4:	28 e1       	ldi	r18, 0x18	; 24
     bf6:	e1 50       	subi	r30, 0x01	; 1
     bf8:	f0 40       	sbci	r31, 0x00	; 0
     bfa:	20 40       	sbci	r18, 0x00	; 0
     bfc:	e1 f7       	brne	.-8      	; 0xbf6 <__stack+0x397>
     bfe:	00 c0       	rjmp	.+0      	; 0xc00 <__stack+0x3a1>
     c00:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
     c02:	d8 cf       	rjmp	.-80     	; 0xbb4 <__stack+0x355>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     c04:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
						Dimmer_hundreds = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					rxdata = u8GetTX(login_mode);
     c08:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     c12:	f8 2e       	mov	r15, r24

					if ((rxdata <'0' || rxdata >'9'))//show wrong input message if the user entered non numeric value
     c14:	80 ed       	ldi	r24, 0xD0	; 208
     c16:	8f 0d       	add	r24, r15
     c18:	8a 30       	cpi	r24, 0x0A	; 10
     c1a:	80 f0       	brcs	.+32     	; 0xc3c <__stack+0x3dd>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c1c:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     c20:	8f e1       	ldi	r24, 0x1F	; 31
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     c28:	3f ef       	ldi	r19, 0xFF	; 255
     c2a:	89 e6       	ldi	r24, 0x69	; 105
     c2c:	98 e1       	ldi	r25, 0x18	; 24
     c2e:	31 50       	subi	r19, 0x01	; 1
     c30:	80 40       	sbci	r24, 0x00	; 0
     c32:	90 40       	sbci	r25, 0x00	; 0
     c34:	e1 f7       	brne	.-8      	; 0xc2e <__stack+0x3cf>
     c36:	00 c0       	rjmp	.+0      	; 0xc38 <__stack+0x3d9>
     c38:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     c3a:	bc cf       	rjmp	.-136    	; 0xbb4 <__stack+0x355>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     c3c:	8f 2d       	mov	r24, r15
     c3e:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
						Dimmer_tens = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					
					rxdata = u8GetTX(login_mode);//wait for the user till key is pressed or the time is out
     c42:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     c4c:	28 2e       	mov	r2, r24
					
					if ((rxdata <'0' || rxdata >'9'))//show wrong input message if the user entered non numeric value
     c4e:	80 ed       	ldi	r24, 0xD0	; 208
     c50:	82 0d       	add	r24, r2
     c52:	8a 30       	cpi	r24, 0x0A	; 10
     c54:	80 f0       	brcs	.+32     	; 0xc76 <__stack+0x417>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c56:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     c5a:	8f e1       	ldi	r24, 0x1F	; 31
     c5c:	92 e0       	ldi	r25, 0x02	; 2
     c5e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     c62:	ef ef       	ldi	r30, 0xFF	; 255
     c64:	f9 e6       	ldi	r31, 0x69	; 105
     c66:	28 e1       	ldi	r18, 0x18	; 24
     c68:	e1 50       	subi	r30, 0x01	; 1
     c6a:	f0 40       	sbci	r31, 0x00	; 0
     c6c:	20 40       	sbci	r18, 0x00	; 0
     c6e:	e1 f7       	brne	.-8      	; 0xc68 <__stack+0x409>
     c70:	00 c0       	rjmp	.+0      	; 0xc72 <__stack+0x413>
     c72:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     c74:	9f cf       	rjmp	.-194    	; 0xbb4 <__stack+0x355>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     c76:	82 2d       	mov	r24, r2
     c78:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
						Dimmer_ones = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}


					brightness = ((Dimmer_hundreds*100) + (Dimmer_tens*10) + (Dimmer_ones));//set the value of the temperature from the given separated values
     c7c:	ff 0c       	add	r15, r15
     c7e:	8f 2d       	mov	r24, r15
     c80:	88 0f       	add	r24, r24
     c82:	88 0f       	add	r24, r24
     c84:	f8 0e       	add	r15, r24
     c86:	13 9d       	mul	r17, r3
     c88:	f0 0c       	add	r15, r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 0c       	add	r2, r15
						_delay_ms(500);
						show_menu = DimmerLED_MENU;

					}else
					{
						InitPWM();
     c8e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <InitPWM>
						SetPWMOutPut(brightness);
     c92:	82 2d       	mov	r24, r2
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	0e 94 da 08 	call	0x11b4	; 0x11b4 <SetPWMOutPut>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     c9a:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						//show the message
						LCD_String("Brightness Set");
     c9e:	84 eb       	ldi	r24, 0xB4	; 180
     ca0:	92 e0       	ldi	r25, 0x02	; 2
     ca2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     ca6:	3f ef       	ldi	r19, 0xFF	; 255
     ca8:	89 e6       	ldi	r24, 0x69	; 105
     caa:	98 e1       	ldi	r25, 0x18	; 24
     cac:	31 50       	subi	r19, 0x01	; 1
     cae:	80 40       	sbci	r24, 0x00	; 0
     cb0:	90 40       	sbci	r25, 0x00	; 0
     cb2:	e1 f7       	brne	.-8      	; 0xcac <__stack+0x44d>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <__stack+0x457>
     cb6:	00 00       	nop
				}
				break;//End of room4 menu case
				
				case DimmerLED_MENU://
				brightness = 0;
				while (brightness==0 )//start the loop that asks for the temperature from the user
     cb8:	22 20       	and	r2, r2
     cba:	09 f4       	brne	.+2      	; 0xcbe <__stack+0x45f>
     cbc:	7b cf       	rjmp	.-266    	; 0xbb4 <__stack+0x355>
						SetPWMOutPut(brightness);
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						//show the message
						LCD_String("Brightness Set");
						_delay_ms(500);//Halt the system for the given time in (ms)
						show_menu = LAST_MENU;
     cbe:	0f 2e       	mov	r0, r31
     cc0:	fc e0       	ldi	r31, 0x0C	; 12
     cc2:	ff 2e       	mov	r15, r31
     cc4:	f0 2d       	mov	r31, r0
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
						Dimmer_ones = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
     cc6:	1b 2d       	mov	r17, r11
     cc8:	db c0       	rjmp	.+438    	; 0xe80 <__stack+0x621>
					}

				}break;
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
     cca:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <login_mode>
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	87 e0       	ldi	r24, 0x07	; 7
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	0e 94 a4 07 	call	0xf48	; 0xf48 <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     cd8:	68 94       	set
     cda:	ff 24       	eor	r15, r15
     cdc:	f1 f8       	bld	r15, 1
				break;//End of TV menu case
     cde:	d0 c0       	rjmp	.+416    	; 0xe80 <__stack+0x621>
				
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
     ce0:	60 91 39 03 	lds	r22, 0x0339	; 0x800339 <login_mode>
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	89 e0       	ldi	r24, 0x09	; 9
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 a4 07 	call	0xf48	; 0xf48 <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     cee:	f4 2c       	mov	r15, r4
				break;//End of air conditioning control menu case
     cf0:	c7 c0       	rjmp	.+398    	; 0xe80 <__stack+0x621>
				
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
     cf2:	b0 92 3a 03 	sts	0x033A, r11	; 0x80033a <temperature>
				while (temperature==0 )//start the loop that asks for the temperature from the user
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     cf6:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					LCD_String("Set temp.:__");//print the format of inserting temperature
     cfa:	83 ec       	ldi	r24, 0xC3	; 195
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					LCD_Char(DEGREES_SYMBOL); // print the symbol of degree
     d02:	8f ed       	ldi	r24, 0xDF	; 223
     d04:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
					LCD_Char('C'); // print the C character
     d08:	83 e4       	ldi	r24, 0x43	; 67
     d0a:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
					LCD_SetPos(1,11);//move the cursor to the place to write the entered temperature
     d0e:	67 2d       	mov	r22, r7
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f3 ec       	ldi	r31, 0xC3	; 195
     d1a:	29 e0       	ldi	r18, 0x09	; 9
     d1c:	e1 50       	subi	r30, 0x01	; 1
     d1e:	f0 40       	sbci	r31, 0x00	; 0
     d20:	20 40       	sbci	r18, 0x00	; 0
     d22:	e1 f7       	brne	.-8      	; 0xd1c <__stack+0x4bd>
     d24:	00 c0       	rjmp	.+0      	; 0xd26 <__stack+0x4c7>
     d26:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					LCD_SetPos(1,10);
     d28:	6e 2d       	mov	r22, r14
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					
					/*******************************************************************************/
					rxdata = u8GetTX();//wait for the user till key is pressed or the time is out
     d30:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     d34:	18 2f       	mov	r17, r24

					if (rxdata <'0' || rxdata >'9')//show wrong input message if the user entered non numeric value
     d36:	0f 2e       	mov	r0, r31
     d38:	f0 ed       	ldi	r31, 0xD0	; 208
     d3a:	ff 2e       	mov	r15, r31
     d3c:	f0 2d       	mov	r31, r0
     d3e:	f8 0e       	add	r15, r24
     d40:	39 e0       	ldi	r19, 0x09	; 9
     d42:	3f 15       	cp	r19, r15
     d44:	a0 f4       	brcc	.+40     	; 0xd6e <__stack+0x50f>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d46:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     d4a:	8f e1       	ldi	r24, 0x1F	; 31
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						Bluetooth_TransmaitString("Wrong input");
     d52:	8f e1       	ldi	r24, 0x1F	; 31
     d54:	92 e0       	ldi	r25, 0x02	; 2
     d56:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
     d5a:	8f ef       	ldi	r24, 0xFF	; 255
     d5c:	99 e6       	ldi	r25, 0x69	; 105
     d5e:	e8 e1       	ldi	r30, 0x18	; 24
     d60:	81 50       	subi	r24, 0x01	; 1
     d62:	90 40       	sbci	r25, 0x00	; 0
     d64:	e0 40       	sbci	r30, 0x00	; 0
     d66:	e1 f7       	brne	.-8      	; 0xd60 <__stack+0x501>
     d68:	00 c0       	rjmp	.+0      	; 0xd6a <__stack+0x50b>
     d6a:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
     d6c:	80 c0       	rjmp	.+256    	; 0xe6e <__stack+0x60f>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     d6e:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
						temp_tens = rxdata-ASCII_ZERO;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					rxdata = u8GetTX();//wait for the user till key is pressed or the time is out					
     d72:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
     d76:	18 2f       	mov	r17, r24

					if ((rxdata <'0' || rxdata >'9'))//show wrong input message if the user entered non numeric value
     d78:	0f 2e       	mov	r0, r31
     d7a:	f0 ed       	ldi	r31, 0xD0	; 208
     d7c:	2f 2e       	mov	r2, r31
     d7e:	f0 2d       	mov	r31, r0
     d80:	28 0e       	add	r2, r24
     d82:	f9 e0       	ldi	r31, 0x09	; 9
     d84:	f2 15       	cp	r31, r2
     d86:	a0 f4       	brcc	.+40     	; 0xdb0 <__stack+0x551>
					{
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d88:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
						LCD_String("Wrong input");//print error message
     d8c:	8f e1       	ldi	r24, 0x1F	; 31
     d8e:	92 e0       	ldi	r25, 0x02	; 2
     d90:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
						Bluetooth_TransmaitString("Wrong input");
     d94:	8f e1       	ldi	r24, 0x1F	; 31
     d96:	92 e0       	ldi	r25, 0x02	; 2
     d98:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
     d9c:	2f ef       	ldi	r18, 0xFF	; 255
     d9e:	39 e6       	ldi	r19, 0x69	; 105
     da0:	88 e1       	ldi	r24, 0x18	; 24
     da2:	21 50       	subi	r18, 0x01	; 1
     da4:	30 40       	sbci	r19, 0x00	; 0
     da6:	80 40       	sbci	r24, 0x00	; 0
     da8:	e1 f7       	brne	.-8      	; 0xda2 <__stack+0x543>
     daa:	00 c0       	rjmp	.+0      	; 0xdac <__stack+0x54d>
     dac:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     dae:	5f c0       	rjmp	.+190    	; 0xe6e <__stack+0x60f>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     db0:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
						temp_ones = rxdata-ASCII_ZERO;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
     db4:	ff 0c       	add	r15, r15
     db6:	8f 2d       	mov	r24, r15
     db8:	88 0f       	add	r24, r24
     dba:	88 0f       	add	r24, r24
     dbc:	f8 0e       	add	r15, r24
     dbe:	2f 0c       	add	r2, r15
     dc0:	20 92 3a 03 	sts	0x033A, r2	; 0x80033a <temperature>
     dc4:	9f ef       	ldi	r25, 0xFF	; 255
     dc6:	e3 ec       	ldi	r30, 0xC3	; 195
     dc8:	f9 e0       	ldi	r31, 0x09	; 9
     dca:	91 50       	subi	r25, 0x01	; 1
     dcc:	e0 40       	sbci	r30, 0x00	; 0
     dce:	f0 40       	sbci	r31, 0x00	; 0
     dd0:	e1 f7       	brne	.-8      	; 0xdca <__stack+0x56b>
     dd2:	00 c0       	rjmp	.+0      	; 0xdd4 <__stack+0x575>
     dd4:	00 00       	nop
					_delay_ms(200);
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     dd6:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
					LCD_String("Temperature Set");//show the message
     dda:	80 ed       	ldi	r24, 0xD0	; 208
     ddc:	92 e0       	ldi	r25, 0x02	; 2
     dde:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					Bluetooth_TransmaitString("Temperature Set");
     de2:	80 ed       	ldi	r24, 0xD0	; 208
     de4:	92 e0       	ldi	r25, 0x02	; 2
     de6:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
     dea:	2f ef       	ldi	r18, 0xFF	; 255
     dec:	39 e6       	ldi	r19, 0x69	; 105
     dee:	88 e1       	ldi	r24, 0x18	; 24
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	30 40       	sbci	r19, 0x00	; 0
     df4:	80 40       	sbci	r24, 0x00	; 0
     df6:	e1 f7       	brne	.-8      	; 0xdf0 <__stack+0x591>
     df8:	00 c0       	rjmp	.+0      	; 0xdfa <__stack+0x59b>
     dfa:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
					if (advvalue >temperature)
     dfc:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <temperature>
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	20 91 3b 03 	lds	r18, 0x033B	; 0x80033b <advvalue>
     e06:	30 91 3c 03 	lds	r19, 0x033C	; 0x80033c <advvalue+0x1>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	28 f4       	brcc	.+10     	; 0xe1a <__stack+0x5bb>
					{
						DIO_WriteChannel(DIO_ChannelB7,STD_High);
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	8f e0       	ldi	r24, 0x0F	; 15
     e14:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <__stack+0x5c3>
					}else
					{
						DIO_WriteChannel(DIO_ChannelB7,STD_Low);
     e1a:	6b 2d       	mov	r22, r11
     e1c:	8f e0       	ldi	r24, 0x0F	; 15
     e1e:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
					}
					advvalue=LM35_Read(ADC_Channel0);
     e22:	8b 2d       	mov	r24, r11
     e24:	0e 94 a5 0a 	call	0x154a	; 0x154a <LM35_Read>
     e28:	90 93 3c 03 	sts	0x033C, r25	; 0x80033c <advvalue+0x1>
     e2c:	80 93 3b 03 	sts	0x033B, r24	; 0x80033b <advvalue>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     e30:	4e 2d       	mov	r20, r14
     e32:	6e e7       	ldi	r22, 0x7E	; 126
     e34:	73 e0       	ldi	r23, 0x03	; 3
     e36:	0e 94 55 12 	call	0x24aa	; 0x24aa <__itoa_ncheck>
					itoa (advvalue,adcstring,10);
					LCD_SetPos(2,0);
     e3a:	6b 2d       	mov	r22, r11
     e3c:	82 e0       	ldi	r24, 0x02	; 2
     e3e:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					LCD_String("TEMP NOW");
     e42:	80 ee       	ldi	r24, 0xE0	; 224
     e44:	92 e0       	ldi	r25, 0x02	; 2
     e46:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
					LCD_SetPos(2,9);
     e4a:	66 2d       	mov	r22, r6
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
					LCD_String(adcstring);
     e52:	8e e7       	ldi	r24, 0x7E	; 126
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     e5a:	9f ef       	ldi	r25, 0xFF	; 255
     e5c:	e9 e6       	ldi	r30, 0x69	; 105
     e5e:	f8 e1       	ldi	r31, 0x18	; 24
     e60:	91 50       	subi	r25, 0x01	; 1
     e62:	e0 40       	sbci	r30, 0x00	; 0
     e64:	f0 40       	sbci	r31, 0x00	; 0
     e66:	e1 f7       	brne	.-8      	; 0xe60 <__stack+0x601>
     e68:	00 c0       	rjmp	.+0      	; 0xe6a <__stack+0x60b>
     e6a:	00 00       	nop
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
						temp_ones = rxdata-ASCII_ZERO;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
     e6c:	1b 2d       	mov	r17, r11
				break;//End of air conditioning control menu case
				
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 )//start the loop that asks for the temperature from the user
     e6e:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <temperature>
     e72:	88 23       	and	r24, r24
     e74:	09 f4       	brne	.+2      	; 0xe78 <__stack+0x619>
     e76:	3f cf       	rjmp	.-386    	; 0xcf6 <__stack+0x497>
					LCD_String("TEMP NOW");
					LCD_SetPos(2,9);
					LCD_String(adcstring);
					_delay_ms(500);
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     e78:	f4 2c       	mov	r15, r4
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <__stack+0x621>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
				if (login_mode == GUEST)//in case of guest is logged in
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     e7c:	ff 24       	eor	r15, r15
     e7e:	f3 94       	inc	r15
		}
		
		/******************************************************************************************************************************************************************/
		u8 show_menu = MAIN_MENU;
		
		while(block_mode_flag!=TRUE)
     e80:	2a 85       	ldd	r18, Y+10	; 0x0a
     e82:	21 30       	cpi	r18, 0x01	; 1
     e84:	09 f0       	breq	.+2      	; 0xe88 <__stack+0x629>
     e86:	21 cd       	rjmp	.-1470   	; 0x8ca <__stack+0x6b>
     e88:	c7 ca       	rjmp	.-2674   	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
					{
						key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed
						_delay_ms(100);//to avoid the duplication of the pressed key
						if (key_pressed == SELECT_ROOM1)//If key pressed is 1
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     e8a:	0f 2e       	mov	r0, r31
     e8c:	f3 e0       	ldi	r31, 0x03	; 3
     e8e:	ff 2e       	mov	r15, r31
     e90:	f0 2d       	mov	r31, r0
     e92:	f6 cf       	rjmp	.-20     	; 0xe80 <__stack+0x621>
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     e94:	68 94       	set
     e96:	ff 24       	eor	r15, r15
     e98:	f2 f8       	bld	r15, 2
     e9a:	f2 cf       	rjmp	.-28     	; 0xe80 <__stack+0x621>
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     e9c:	0f 2e       	mov	r0, r31
     e9e:	f5 e0       	ldi	r31, 0x05	; 5
     ea0:	ff 2e       	mov	r15, r31
     ea2:	f0 2d       	mov	r31, r0
     ea4:	ed cf       	rjmp	.-38     	; 0xe80 <__stack+0x621>
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM4)//If key pressed is 4 and the logged in user is guest
						{
							show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     ea6:	f5 2c       	mov	r15, r5
     ea8:	eb cf       	rjmp	.-42     	; 0xe80 <__stack+0x621>
					{
						rxdata = u8GetTX(login_mode);
						_delay_ms(20);
						if (rxdata == SELECT_ROOM1)//If key pressed is 1
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     eaa:	0f 2e       	mov	r0, r31
     eac:	f3 e0       	ldi	r31, 0x03	; 3
     eae:	ff 2e       	mov	r15, r31
     eb0:	f0 2d       	mov	r31, r0
     eb2:	e6 cf       	rjmp	.-52     	; 0xe80 <__stack+0x621>
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM2)//If key pressed is 2
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     eb4:	68 94       	set
     eb6:	ff 24       	eor	r15, r15
     eb8:	f2 f8       	bld	r15, 2
     eba:	e2 cf       	rjmp	.-60     	; 0xe80 <__stack+0x621>
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM3)//If key pressed is 3
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     ebc:	0f 2e       	mov	r0, r31
     ebe:	f5 e0       	ldi	r31, 0x05	; 5
     ec0:	ff 2e       	mov	r15, r31
     ec2:	f0 2d       	mov	r31, r0
     ec4:	dd cf       	rjmp	.-70     	; 0xe80 <__stack+0x621>
							Value = rxdata;
						}
						else if (rxdata == ADMIN_MORE_OPTION)//If key pressed is 4 and the logged in user is admin
						{
							show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     ec6:	68 94       	set
     ec8:	ff 24       	eor	r15, r15
     eca:	f1 f8       	bld	r15, 1
     ecc:	d9 cf       	rjmp	.-78     	; 0xe80 <__stack+0x621>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     ece:	f5 2c       	mov	r15, r5
     ed0:	d7 cf       	rjmp	.-82     	; 0xe80 <__stack+0x621>
					}
					else if (rxdata == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     ed2:	f9 2c       	mov	r15, r9
     ed4:	d5 cf       	rjmp	.-86     	; 0xe80 <__stack+0x621>
					}
					else if (rxdata == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     ed6:	f4 2c       	mov	r15, r4
     ed8:	d3 cf       	rjmp	.-90     	; 0xe80 <__stack+0x621>
					}
					else if (rxdata == ADMIN_LAST_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = LAST_MENU;//Set the next menu to be shown to main menu
     eda:	0f 2e       	mov	r0, r31
     edc:	fc e0       	ldi	r31, 0x0C	; 12
     ede:	ff 2e       	mov	r15, r31
     ee0:	f0 2d       	mov	r31, r0
     ee2:	ce cf       	rjmp	.-100    	; 0xe80 <__stack+0x621>
					LCD_String("1:DimLED 2:RET");
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_DIMMERLED)//If key pressed is 1
					{
						show_menu = DimmerLED_MENU;//Set the next menu to be shown to Air conditioning menu
     ee4:	f7 2c       	mov	r15, r7
     ee6:	cc cf       	rjmp	.-104    	; 0xe80 <__stack+0x621>
					}
					else if (rxdata == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     ee8:	ff 24       	eor	r15, r15
     eea:	f3 94       	inc	r15
     eec:	c9 cf       	rjmp	.-110    	; 0xe80 <__stack+0x621>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     eee:	fe 2c       	mov	r15, r14
     ef0:	c7 cf       	rjmp	.-114    	; 0xe80 <__stack+0x621>
					}
					else if (rxdata == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     ef2:	f6 2c       	mov	r15, r6
     ef4:	c5 cf       	rjmp	.-118    	; 0xe80 <__stack+0x621>
					}
					else if (rxdata == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     ef6:	68 94       	set
     ef8:	ff 24       	eor	r15, r15
     efa:	f1 f8       	bld	r15, 1
     efc:	c1 cf       	rjmp	.-126    	; 0xe80 <__stack+0x621>

00000efe <ui8ComparePass2>:
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	0e 94 48 12 	call	0x2490	; 0x2490 <memcmp>
     f04:	21 e0       	ldi	r18, 0x01	; 1
     f06:	89 2b       	or	r24, r25
     f08:	09 f0       	breq	.+2      	; 0xf0c <ui8ComparePass2+0xe>
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	82 2f       	mov	r24, r18
     f0e:	08 95       	ret

00000f10 <u8GetKeyPressed>:
     f10:	0e 94 64 09 	call	0x12c8	; 0x12c8 <GetKey>
     f14:	2f ef       	ldi	r18, 0xFF	; 255
     f16:	39 ef       	ldi	r19, 0xF9	; 249
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	21 50       	subi	r18, 0x01	; 1
     f1c:	30 40       	sbci	r19, 0x00	; 0
     f1e:	90 40       	sbci	r25, 0x00	; 0
     f20:	e1 f7       	brne	.-8      	; 0xf1a <u8GetKeyPressed+0xa>
     f22:	00 c0       	rjmp	.+0      	; 0xf24 <u8GetKeyPressed+0x14>
     f24:	00 00       	nop
     f26:	88 23       	and	r24, r24
     f28:	99 f3       	breq	.-26     	; 0xf10 <u8GetKeyPressed>
     f2a:	08 95       	ret

00000f2c <u8GetTX>:
     f2c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <Bluetooth_Receive>
     f30:	2f ef       	ldi	r18, 0xFF	; 255
     f32:	39 ef       	ldi	r19, 0xF9	; 249
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	21 50       	subi	r18, 0x01	; 1
     f38:	30 40       	sbci	r19, 0x00	; 0
     f3a:	90 40       	sbci	r25, 0x00	; 0
     f3c:	e1 f7       	brne	.-8      	; 0xf36 <u8GetTX+0xa>
     f3e:	00 c0       	rjmp	.+0      	; 0xf40 <u8GetTX+0x14>
     f40:	00 00       	nop
     f42:	88 23       	and	r24, r24
     f44:	99 f3       	breq	.-26     	; 0xf2c <u8GetTX>
     f46:	08 95       	ret

00000f48 <vMenuOption>:
     f48:	cf 92       	push	r12
     f4a:	df 92       	push	r13
     f4c:	ef 92       	push	r14
     f4e:	ff 92       	push	r15
     f50:	0f 93       	push	r16
     f52:	1f 93       	push	r17
     f54:	cf 93       	push	r28
     f56:	df 93       	push	r29
     f58:	c8 2f       	mov	r28, r24
     f5a:	06 2f       	mov	r16, r22
     f5c:	d0 e0       	ldi	r29, 0x00	; 0
     f5e:	10 e0       	ldi	r17, 0x00	; 0
     f60:	c8 2e       	mov	r12, r24
     f62:	d1 2c       	mov	r13, r1
     f64:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
     f68:	c5 30       	cpi	r28, 0x05	; 5
     f6a:	b1 f0       	breq	.+44     	; 0xf98 <vMenuOption+0x50>
     f6c:	28 f4       	brcc	.+10     	; 0xf78 <vMenuOption+0x30>
     f6e:	c3 30       	cpi	r28, 0x03	; 3
     f70:	49 f0       	breq	.+18     	; 0xf84 <vMenuOption+0x3c>
     f72:	c4 30       	cpi	r28, 0x04	; 4
     f74:	61 f0       	breq	.+24     	; 0xf8e <vMenuOption+0x46>
     f76:	24 c0       	rjmp	.+72     	; 0xfc0 <vMenuOption+0x78>
     f78:	c7 30       	cpi	r28, 0x07	; 7
     f7a:	c1 f0       	breq	.+48     	; 0xfac <vMenuOption+0x64>
     f7c:	90 f0       	brcs	.+36     	; 0xfa2 <vMenuOption+0x5a>
     f7e:	c9 30       	cpi	r28, 0x09	; 9
     f80:	d1 f0       	breq	.+52     	; 0xfb6 <vMenuOption+0x6e>
     f82:	1e c0       	rjmp	.+60     	; 0xfc0 <vMenuOption+0x78>
     f84:	89 ee       	ldi	r24, 0xE9	; 233
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     f8c:	23 c0       	rjmp	.+70     	; 0xfd4 <vMenuOption+0x8c>
     f8e:	82 ef       	ldi	r24, 0xF2	; 242
     f90:	92 e0       	ldi	r25, 0x02	; 2
     f92:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     f96:	2f c0       	rjmp	.+94     	; 0xff6 <vMenuOption+0xae>
     f98:	8b ef       	ldi	r24, 0xFB	; 251
     f9a:	92 e0       	ldi	r25, 0x02	; 2
     f9c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     fa0:	3b c0       	rjmp	.+118    	; 0x1018 <vMenuOption+0xd0>
     fa2:	84 e0       	ldi	r24, 0x04	; 4
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     faa:	47 c0       	rjmp	.+142    	; 0x103a <vMenuOption+0xf2>
     fac:	8d e0       	ldi	r24, 0x0D	; 13
     fae:	93 e0       	ldi	r25, 0x03	; 3
     fb0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     fb4:	53 c0       	rjmp	.+166    	; 0x105c <vMenuOption+0x114>
     fb6:	83 e1       	ldi	r24, 0x13	; 19
     fb8:	93 e0       	ldi	r25, 0x03	; 3
     fba:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     fbe:	5f c0       	rjmp	.+190    	; 0x107e <vMenuOption+0x136>
     fc0:	f6 01       	movw	r30, r12
     fc2:	33 97       	sbiw	r30, 0x03	; 3
     fc4:	ee 33       	cpi	r30, 0x3E	; 62
     fc6:	f1 05       	cpc	r31, r1
     fc8:	08 f0       	brcs	.+2      	; 0xfcc <vMenuOption+0x84>
     fca:	71 c0       	rjmp	.+226    	; 0x10ae <vMenuOption+0x166>
     fcc:	ea 5c       	subi	r30, 0xCA	; 202
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	0c 94 42 12 	jmp	0x2484	; 0x2484 <__tablejump2__>
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	31 f4       	brne	.+12     	; 0xfea <vMenuOption+0xa2>
     fde:	80 e2       	ldi	r24, 0x20	; 32
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     fe6:	11 e0       	ldi	r17, 0x01	; 1
     fe8:	62 c0       	rjmp	.+196    	; 0x10ae <vMenuOption+0x166>
     fea:	83 e2       	ldi	r24, 0x23	; 35
     fec:	93 e0       	ldi	r25, 0x03	; 3
     fee:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
     ff2:	11 e0       	ldi	r17, 0x01	; 1
     ff4:	5c c0       	rjmp	.+184    	; 0x10ae <vMenuOption+0x166>
     ff6:	8c e0       	ldi	r24, 0x0C	; 12
     ff8:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	31 f4       	brne	.+12     	; 0x100c <vMenuOption+0xc4>
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	93 e0       	ldi	r25, 0x03	; 3
    1004:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    1008:	1c e0       	ldi	r17, 0x0C	; 12
    100a:	51 c0       	rjmp	.+162    	; 0x10ae <vMenuOption+0x166>
    100c:	83 e2       	ldi	r24, 0x23	; 35
    100e:	93 e0       	ldi	r25, 0x03	; 3
    1010:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    1014:	1c e0       	ldi	r17, 0x0C	; 12
    1016:	4b c0       	rjmp	.+150    	; 0x10ae <vMenuOption+0x166>
    1018:	8d e0       	ldi	r24, 0x0D	; 13
    101a:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	31 f4       	brne	.+12     	; 0x102e <vMenuOption+0xe6>
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	93 e0       	ldi	r25, 0x03	; 3
    1026:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    102a:	1d e0       	ldi	r17, 0x0D	; 13
    102c:	40 c0       	rjmp	.+128    	; 0x10ae <vMenuOption+0x166>
    102e:	83 e2       	ldi	r24, 0x23	; 35
    1030:	93 e0       	ldi	r25, 0x03	; 3
    1032:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    1036:	1d e0       	ldi	r17, 0x0D	; 13
    1038:	3a c0       	rjmp	.+116    	; 0x10ae <vMenuOption+0x166>
    103a:	8e e0       	ldi	r24, 0x0E	; 14
    103c:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	31 f4       	brne	.+12     	; 0x1050 <vMenuOption+0x108>
    1044:	80 e2       	ldi	r24, 0x20	; 32
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    104c:	1e e0       	ldi	r17, 0x0E	; 14
    104e:	2f c0       	rjmp	.+94     	; 0x10ae <vMenuOption+0x166>
    1050:	83 e2       	ldi	r24, 0x23	; 35
    1052:	93 e0       	ldi	r25, 0x03	; 3
    1054:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    1058:	1e e0       	ldi	r17, 0x0E	; 14
    105a:	29 c0       	rjmp	.+82     	; 0x10ae <vMenuOption+0x166>
    105c:	8f e1       	ldi	r24, 0x1F	; 31
    105e:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
    1062:	81 30       	cpi	r24, 0x01	; 1
    1064:	31 f4       	brne	.+12     	; 0x1072 <vMenuOption+0x12a>
    1066:	80 e2       	ldi	r24, 0x20	; 32
    1068:	93 e0       	ldi	r25, 0x03	; 3
    106a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    106e:	1f e1       	ldi	r17, 0x1F	; 31
    1070:	1e c0       	rjmp	.+60     	; 0x10ae <vMenuOption+0x166>
    1072:	83 e2       	ldi	r24, 0x23	; 35
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    107a:	1f e1       	ldi	r17, 0x1F	; 31
    107c:	18 c0       	rjmp	.+48     	; 0x10ae <vMenuOption+0x166>
    107e:	8f e0       	ldi	r24, 0x0F	; 15
    1080:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	31 f4       	brne	.+12     	; 0x1094 <vMenuOption+0x14c>
    1088:	80 e2       	ldi	r24, 0x20	; 32
    108a:	93 e0       	ldi	r25, 0x03	; 3
    108c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    1090:	1f e0       	ldi	r17, 0x0F	; 15
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <vMenuOption+0x166>
    1094:	83 e2       	ldi	r24, 0x23	; 35
    1096:	93 e0       	ldi	r25, 0x03	; 3
    1098:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    109c:	1f e0       	ldi	r17, 0x0F	; 15
    109e:	07 c0       	rjmp	.+14     	; 0x10ae <vMenuOption+0x166>
    10a0:	80 91 3a 03 	lds	r24, 0x033A	; 0x80033a <temperature>
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    10aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	82 e0       	ldi	r24, 0x02	; 2
    10b2:	0e 94 91 0a 	call	0x1522	; 0x1522 <LCD_SetPos>
    10b6:	87 e2       	ldi	r24, 0x27	; 39
    10b8:	93 e0       	ldi	r25, 0x03	; 3
    10ba:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    10be:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	81 f5       	brne	.+96     	; 0x1126 <vMenuOption+0x1de>
    10c6:	80 2f       	mov	r24, r16
    10c8:	0e 94 88 07 	call	0xf10	; 0xf10 <u8GetKeyPressed>
    10cc:	2f ef       	ldi	r18, 0xFF	; 255
    10ce:	31 ee       	ldi	r19, 0xE1	; 225
    10d0:	94 e0       	ldi	r25, 0x04	; 4
    10d2:	21 50       	subi	r18, 0x01	; 1
    10d4:	30 40       	sbci	r19, 0x00	; 0
    10d6:	90 40       	sbci	r25, 0x00	; 0
    10d8:	e1 f7       	brne	.-8      	; 0x10d2 <vMenuOption+0x18a>
    10da:	00 c0       	rjmp	.+0      	; 0x10dc <vMenuOption+0x194>
    10dc:	00 00       	nop
    10de:	81 33       	cpi	r24, 0x31	; 49
    10e0:	29 f4       	brne	.+10     	; 0x10ec <vMenuOption+0x1a4>
    10e2:	61 e0       	ldi	r22, 0x01	; 1
    10e4:	81 2f       	mov	r24, r17
    10e6:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    10ea:	53 c0       	rjmp	.+166    	; 0x1192 <vMenuOption+0x24a>
    10ec:	82 33       	cpi	r24, 0x32	; 50
    10ee:	29 f4       	brne	.+10     	; 0x10fa <vMenuOption+0x1b2>
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	81 2f       	mov	r24, r17
    10f4:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    10f8:	4c c0       	rjmp	.+152    	; 0x1192 <vMenuOption+0x24a>
    10fa:	80 33       	cpi	r24, 0x30	; 48
    10fc:	09 f4       	brne	.+2      	; 0x1100 <vMenuOption+0x1b8>
    10fe:	49 c0       	rjmp	.+146    	; 0x1192 <vMenuOption+0x24a>
    1100:	88 23       	and	r24, r24
    1102:	09 f4       	brne	.+2      	; 0x1106 <vMenuOption+0x1be>
    1104:	41 c0       	rjmp	.+130    	; 0x1188 <vMenuOption+0x240>
    1106:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
    110a:	8f e1       	ldi	r24, 0x1F	; 31
    110c:	92 e0       	ldi	r25, 0x02	; 2
    110e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    1112:	2f ef       	ldi	r18, 0xFF	; 255
    1114:	39 e6       	ldi	r19, 0x69	; 105
    1116:	88 e1       	ldi	r24, 0x18	; 24
    1118:	21 50       	subi	r18, 0x01	; 1
    111a:	30 40       	sbci	r19, 0x00	; 0
    111c:	80 40       	sbci	r24, 0x00	; 0
    111e:	e1 f7       	brne	.-8      	; 0x1118 <vMenuOption+0x1d0>
    1120:	00 c0       	rjmp	.+0      	; 0x1122 <vMenuOption+0x1da>
    1122:	00 00       	nop
    1124:	31 c0       	rjmp	.+98     	; 0x1188 <vMenuOption+0x240>
    1126:	81 30       	cpi	r24, 0x01	; 1
    1128:	79 f5       	brne	.+94     	; 0x1188 <vMenuOption+0x240>
    112a:	87 e2       	ldi	r24, 0x27	; 39
    112c:	93 e0       	ldi	r25, 0x03	; 3
    112e:	0e 94 df 08 	call	0x11be	; 0x11be <Bluetooth_TransmaitString>
    1132:	80 91 39 03 	lds	r24, 0x0339	; 0x800339 <login_mode>
    1136:	0e 94 96 07 	call	0xf2c	; 0xf2c <u8GetTX>
    113a:	80 93 38 03 	sts	0x0338, r24	; 0x800338 <__data_end>
    113e:	81 33       	cpi	r24, 0x31	; 49
    1140:	39 f4       	brne	.+14     	; 0x1150 <vMenuOption+0x208>
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	81 2f       	mov	r24, r17
    1146:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    114a:	d0 91 38 03 	lds	r29, 0x0338	; 0x800338 <__data_end>
    114e:	1c c0       	rjmp	.+56     	; 0x1188 <vMenuOption+0x240>
    1150:	82 33       	cpi	r24, 0x32	; 50
    1152:	39 f4       	brne	.+14     	; 0x1162 <vMenuOption+0x21a>
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	81 2f       	mov	r24, r17
    1158:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    115c:	d0 91 38 03 	lds	r29, 0x0338	; 0x800338 <__data_end>
    1160:	13 c0       	rjmp	.+38     	; 0x1188 <vMenuOption+0x240>
    1162:	80 33       	cpi	r24, 0x30	; 48
    1164:	b1 f0       	breq	.+44     	; 0x1192 <vMenuOption+0x24a>
    1166:	88 23       	and	r24, r24
    1168:	79 f0       	breq	.+30     	; 0x1188 <vMenuOption+0x240>
    116a:	0e 94 8d 0a 	call	0x151a	; 0x151a <LCD_Clear>
    116e:	8f e1       	ldi	r24, 0x1F	; 31
    1170:	92 e0       	ldi	r25, 0x02	; 2
    1172:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_String>
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	29 e6       	ldi	r18, 0x69	; 105
    117a:	38 e1       	ldi	r19, 0x18	; 24
    117c:	91 50       	subi	r25, 0x01	; 1
    117e:	20 40       	sbci	r18, 0x00	; 0
    1180:	30 40       	sbci	r19, 0x00	; 0
    1182:	e1 f7       	brne	.-8      	; 0x117c <vMenuOption+0x234>
    1184:	00 c0       	rjmp	.+0      	; 0x1186 <vMenuOption+0x23e>
    1186:	00 00       	nop
    1188:	80 ed       	ldi	r24, 0xD0	; 208
    118a:	8d 0f       	add	r24, r29
    118c:	83 30       	cpi	r24, 0x03	; 3
    118e:	08 f0       	brcs	.+2      	; 0x1192 <vMenuOption+0x24a>
    1190:	e9 ce       	rjmp	.-558    	; 0xf64 <vMenuOption+0x1c>
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	1f 91       	pop	r17
    1198:	0f 91       	pop	r16
    119a:	ff 90       	pop	r15
    119c:	ef 90       	pop	r14
    119e:	df 90       	pop	r13
    11a0:	cf 90       	pop	r12
    11a2:	08 95       	ret

000011a4 <InitPWM>:
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	8b e0       	ldi	r24, 0x0B	; 11
    11a8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <DIO_ConfigChannel>
    11ac:	83 b7       	in	r24, 0x33	; 51
    11ae:	89 66       	ori	r24, 0x69	; 105
    11b0:	83 bf       	out	0x33, r24	; 51
    11b2:	08 95       	ret

000011b4 <SetPWMOutPut>:
    11b4:	8c bf       	out	0x3c, r24	; 60
    11b6:	08 95       	ret

000011b8 <Bluetooth_Init>:
    11b8:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <UART_Init>
    11bc:	08 95       	ret

000011be <Bluetooth_TransmaitString>:
    11be:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <UART_TransmaitString>
    11c2:	08 95       	ret

000011c4 <Bluetooth_Receive>:
    11c4:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <UART_Receive>
    11c8:	08 95       	ret

000011ca <EEPROM_vReadBlockFromAddress>:
    11ca:	e1 99       	sbic	0x1c, 1	; 28
    11cc:	fe cf       	rjmp	.-4      	; 0x11ca <EEPROM_vReadBlockFromAddress>
    11ce:	41 15       	cp	r20, r1
    11d0:	51 05       	cpc	r21, r1
    11d2:	91 f0       	breq	.+36     	; 0x11f8 <EEPROM_vReadBlockFromAddress+0x2e>
    11d4:	46 0f       	add	r20, r22
    11d6:	57 1f       	adc	r21, r23
    11d8:	fb 01       	movw	r30, r22
    11da:	9c 01       	movw	r18, r24
    11dc:	26 1b       	sub	r18, r22
    11de:	37 0b       	sbc	r19, r23
    11e0:	b9 01       	movw	r22, r18
    11e2:	9b 01       	movw	r18, r22
    11e4:	2e 0f       	add	r18, r30
    11e6:	3f 1f       	adc	r19, r31
    11e8:	3f bb       	out	0x1f, r19	; 31
    11ea:	2e bb       	out	0x1e, r18	; 30
    11ec:	e0 9a       	sbi	0x1c, 0	; 28
    11ee:	9d b3       	in	r25, 0x1d	; 29
    11f0:	91 93       	st	Z+, r25
    11f2:	e4 17       	cp	r30, r20
    11f4:	f5 07       	cpc	r31, r21
    11f6:	a9 f7       	brne	.-22     	; 0x11e2 <EEPROM_vReadBlockFromAddress+0x18>
    11f8:	08 95       	ret

000011fa <EEPROM_vWriteBlockToAddress>:
    11fa:	41 15       	cp	r20, r1
    11fc:	51 05       	cpc	r21, r1
    11fe:	c9 f0       	breq	.+50     	; 0x1232 <EEPROM_vWriteBlockToAddress+0x38>
    1200:	46 0f       	add	r20, r22
    1202:	57 1f       	adc	r21, r23
    1204:	fb 01       	movw	r30, r22
    1206:	9c 01       	movw	r18, r24
    1208:	26 1b       	sub	r18, r22
    120a:	37 0b       	sbc	r19, r23
    120c:	b9 01       	movw	r22, r18
    120e:	e1 99       	sbic	0x1c, 1	; 28
    1210:	fe cf       	rjmp	.-4      	; 0x120e <EEPROM_vWriteBlockToAddress+0x14>
    1212:	9b 01       	movw	r18, r22
    1214:	2e 0f       	add	r18, r30
    1216:	3f 1f       	adc	r19, r31
    1218:	3f bb       	out	0x1f, r19	; 31
    121a:	2e bb       	out	0x1e, r18	; 30
    121c:	e0 9a       	sbi	0x1c, 0	; 28
    121e:	2d b3       	in	r18, 0x1d	; 29
    1220:	91 91       	ld	r25, Z+
    1222:	29 17       	cp	r18, r25
    1224:	19 f0       	breq	.+6      	; 0x122c <EEPROM_vWriteBlockToAddress+0x32>
    1226:	9d bb       	out	0x1d, r25	; 29
    1228:	e2 9a       	sbi	0x1c, 2	; 28
    122a:	e1 9a       	sbi	0x1c, 1	; 28
    122c:	e4 17       	cp	r30, r20
    122e:	f5 07       	cpc	r31, r21
    1230:	71 f7       	brne	.-36     	; 0x120e <EEPROM_vWriteBlockToAddress+0x14>
    1232:	08 95       	ret

00001234 <EEPROM_ui8ReadByteFromAddress>:
    1234:	e1 99       	sbic	0x1c, 1	; 28
    1236:	fe cf       	rjmp	.-4      	; 0x1234 <EEPROM_ui8ReadByteFromAddress>
    1238:	9f bb       	out	0x1f, r25	; 31
    123a:	8e bb       	out	0x1e, r24	; 30
    123c:	e0 9a       	sbi	0x1c, 0	; 28
    123e:	8d b3       	in	r24, 0x1d	; 29
    1240:	08 95       	ret

00001242 <EEPROM_vWriteByteToAddress>:
    1242:	e1 99       	sbic	0x1c, 1	; 28
    1244:	fe cf       	rjmp	.-4      	; 0x1242 <EEPROM_vWriteByteToAddress>
    1246:	9f bb       	out	0x1f, r25	; 31
    1248:	8e bb       	out	0x1e, r24	; 30
    124a:	e0 9a       	sbi	0x1c, 0	; 28
    124c:	8d b3       	in	r24, 0x1d	; 29
    124e:	86 17       	cp	r24, r22
    1250:	19 f0       	breq	.+6      	; 0x1258 <EEPROM_vWriteByteToAddress+0x16>
    1252:	6d bb       	out	0x1d, r22	; 29
    1254:	e2 9a       	sbi	0x1c, 2	; 28
    1256:	e1 9a       	sbi	0x1c, 1	; 28
    1258:	08 95       	ret

0000125a <Keypad_Init>:
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cc e7       	ldi	r28, 0x7C	; 124
    1268:	d0 e0       	ldi	r29, 0x00	; 0
    126a:	0f 2e       	mov	r0, r31
    126c:	f0 e8       	ldi	r31, 0x80	; 128
    126e:	ef 2e       	mov	r14, r31
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	ff 2e       	mov	r15, r31
    1274:	f0 2d       	mov	r31, r0
    1276:	8e 01       	movw	r16, r28
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	89 91       	ld	r24, Y+
    127c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <DIO_ConfigChannel>
    1280:	61 e0       	ldi	r22, 0x01	; 1
    1282:	f8 01       	movw	r30, r16
    1284:	80 81       	ld	r24, Z
    1286:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    128a:	ce 15       	cp	r28, r14
    128c:	df 05       	cpc	r29, r15
    128e:	99 f7       	brne	.-26     	; 0x1276 <Keypad_Init+0x1c>
    1290:	c0 e8       	ldi	r28, 0x80	; 128
    1292:	d0 e0       	ldi	r29, 0x00	; 0
    1294:	0f 2e       	mov	r0, r31
    1296:	f4 e8       	ldi	r31, 0x84	; 132
    1298:	ef 2e       	mov	r14, r31
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ff 2e       	mov	r15, r31
    129e:	f0 2d       	mov	r31, r0
    12a0:	8e 01       	movw	r16, r28
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	89 91       	ld	r24, Y+
    12a6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <DIO_ConfigChannel>
    12aa:	61 e0       	ldi	r22, 0x01	; 1
    12ac:	f8 01       	movw	r30, r16
    12ae:	80 81       	ld	r24, Z
    12b0:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    12b4:	ce 15       	cp	r28, r14
    12b6:	df 05       	cpc	r29, r15
    12b8:	99 f7       	brne	.-26     	; 0x12a0 <Keypad_Init+0x46>
    12ba:	df 91       	pop	r29
    12bc:	cf 91       	pop	r28
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	08 95       	ret

000012c8 <GetKey>:
    12c8:	6f 92       	push	r6
    12ca:	7f 92       	push	r7
    12cc:	8f 92       	push	r8
    12ce:	9f 92       	push	r9
    12d0:	af 92       	push	r10
    12d2:	bf 92       	push	r11
    12d4:	cf 92       	push	r12
    12d6:	df 92       	push	r13
    12d8:	ef 92       	push	r14
    12da:	ff 92       	push	r15
    12dc:	0f 93       	push	r16
    12de:	1f 93       	push	r17
    12e0:	cf 93       	push	r28
    12e2:	df 93       	push	r29
    12e4:	00 e8       	ldi	r16, 0x80	; 128
    12e6:	10 e0       	ldi	r17, 0x00	; 0
    12e8:	c1 2c       	mov	r12, r1
    12ea:	d1 2c       	mov	r13, r1
    12ec:	46 01       	movw	r8, r12
    12ee:	58 01       	movw	r10, r16
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	f8 01       	movw	r30, r16
    12f4:	80 81       	ld	r24, Z
    12f6:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    12fa:	cc e7       	ldi	r28, 0x7C	; 124
    12fc:	d0 e0       	ldi	r29, 0x00	; 0
    12fe:	61 2c       	mov	r6, r1
    1300:	71 2c       	mov	r7, r1
    1302:	73 01       	movw	r14, r6
    1304:	89 91       	ld	r24, Y+
    1306:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
    130a:	81 11       	cpse	r24, r1
    130c:	14 c0       	rjmp	.+40     	; 0x1336 <GetKey+0x6e>
    130e:	e3 01       	movw	r28, r6
    1310:	c4 58       	subi	r28, 0x84	; 132
    1312:	df 4f       	sbci	r29, 0xFF	; 255
    1314:	88 81       	ld	r24, Y
    1316:	0e 94 89 0b 	call	0x1712	; 0x1712 <DIO_ReadChannel>
    131a:	88 23       	and	r24, r24
    131c:	d9 f3       	breq	.-10     	; 0x1314 <GetKey+0x4c>
    131e:	c4 01       	movw	r24, r8
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	88 0f       	add	r24, r24
    1326:	99 1f       	adc	r25, r25
    1328:	84 59       	subi	r24, 0x94	; 148
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	fc 01       	movw	r30, r24
    132e:	ee 0d       	add	r30, r14
    1330:	ff 1d       	adc	r31, r15
    1332:	80 81       	ld	r24, Z
    1334:	16 c0       	rjmp	.+44     	; 0x1362 <GetKey+0x9a>
    1336:	ff ef       	ldi	r31, 0xFF	; 255
    1338:	6f 1a       	sub	r6, r31
    133a:	7f 0a       	sbc	r7, r31
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	68 16       	cp	r6, r24
    1340:	71 04       	cpc	r7, r1
    1342:	f9 f6       	brne	.-66     	; 0x1302 <GetKey+0x3a>
    1344:	0f 5f       	subi	r16, 0xFF	; 255
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	f5 01       	movw	r30, r10
    134c:	80 81       	ld	r24, Z
    134e:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    1352:	ff ef       	ldi	r31, 0xFF	; 255
    1354:	cf 1a       	sub	r12, r31
    1356:	df 0a       	sbc	r13, r31
    1358:	84 e0       	ldi	r24, 0x04	; 4
    135a:	c8 16       	cp	r12, r24
    135c:	d1 04       	cpc	r13, r1
    135e:	31 f6       	brne	.-116    	; 0x12ec <GetKey+0x24>
    1360:	80 e0       	ldi	r24, 0x00	; 0
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	9f 90       	pop	r9
    1378:	8f 90       	pop	r8
    137a:	7f 90       	pop	r7
    137c:	6f 90       	pop	r6
    137e:	08 95       	ret

00001380 <LCD_Cmd>:
    1380:	cf 93       	push	r28
    1382:	c8 2f       	mov	r28, r24
    1384:	60 e0       	ldi	r22, 0x00	; 0
    1386:	89 e0       	ldi	r24, 0x09	; 9
    1388:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	0e 94 3e 0c 	call	0x187c	; 0x187c <DIO_ReadPort>
    1392:	8f 70       	andi	r24, 0x0F	; 15
    1394:	9c 2f       	mov	r25, r28
    1396:	90 7f       	andi	r25, 0xF0	; 240
    1398:	68 2f       	mov	r22, r24
    139a:	69 2b       	or	r22, r25
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_WritePort>
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	88 e0       	ldi	r24, 0x08	; 8
    13a6:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13aa:	8f e8       	ldi	r24, 0x8F	; 143
    13ac:	91 e0       	ldi	r25, 0x01	; 1
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	f1 f7       	brne	.-4      	; 0x13ae <LCD_Cmd+0x2e>
    13b2:	00 c0       	rjmp	.+0      	; 0x13b4 <LCD_Cmd+0x34>
    13b4:	00 00       	nop
    13b6:	61 e0       	ldi	r22, 0x01	; 1
    13b8:	88 e0       	ldi	r24, 0x08	; 8
    13ba:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13be:	8f e1       	ldi	r24, 0x1F	; 31
    13c0:	9e e4       	ldi	r25, 0x4E	; 78
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	f1 f7       	brne	.-4      	; 0x13c2 <LCD_Cmd+0x42>
    13c6:	00 c0       	rjmp	.+0      	; 0x13c8 <LCD_Cmd+0x48>
    13c8:	00 00       	nop
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	0e 94 3e 0c 	call	0x187c	; 0x187c <DIO_ReadPort>
    13d0:	8f 70       	andi	r24, 0x0F	; 15
    13d2:	90 e1       	ldi	r25, 0x10	; 16
    13d4:	c9 9f       	mul	r28, r25
    13d6:	90 01       	movw	r18, r0
    13d8:	11 24       	eor	r1, r1
    13da:	68 2f       	mov	r22, r24
    13dc:	62 2b       	or	r22, r18
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_WritePort>
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	88 e0       	ldi	r24, 0x08	; 8
    13e8:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    13ec:	8f e8       	ldi	r24, 0x8F	; 143
    13ee:	91 e0       	ldi	r25, 0x01	; 1
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	f1 f7       	brne	.-4      	; 0x13f0 <LCD_Cmd+0x70>
    13f4:	00 c0       	rjmp	.+0      	; 0x13f6 <LCD_Cmd+0x76>
    13f6:	00 00       	nop
    13f8:	61 e0       	ldi	r22, 0x01	; 1
    13fa:	88 e0       	ldi	r24, 0x08	; 8
    13fc:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1400:	8f e3       	ldi	r24, 0x3F	; 63
    1402:	9f e1       	ldi	r25, 0x1F	; 31
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	f1 f7       	brne	.-4      	; 0x1404 <LCD_Cmd+0x84>
    1408:	00 c0       	rjmp	.+0      	; 0x140a <LCD_Cmd+0x8a>
    140a:	00 00       	nop
    140c:	cf 91       	pop	r28
    140e:	08 95       	ret

00001410 <LCD_Init>:
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	8a e0       	ldi	r24, 0x0A	; 10
    1414:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    1418:	61 e0       	ldi	r22, 0x01	; 1
    141a:	88 e0       	ldi	r24, 0x08	; 8
    141c:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    1420:	2f ef       	ldi	r18, 0xFF	; 255
    1422:	89 ef       	ldi	r24, 0xF9	; 249
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	21 50       	subi	r18, 0x01	; 1
    1428:	80 40       	sbci	r24, 0x00	; 0
    142a:	90 40       	sbci	r25, 0x00	; 0
    142c:	e1 f7       	brne	.-8      	; 0x1426 <LCD_Init+0x16>
    142e:	00 c0       	rjmp	.+0      	; 0x1430 <LCD_Init+0x20>
    1430:	00 00       	nop
    1432:	83 e3       	ldi	r24, 0x33	; 51
    1434:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    1438:	82 e3       	ldi	r24, 0x32	; 50
    143a:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    143e:	88 e2       	ldi	r24, 0x28	; 40
    1440:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    144a:	8f e0       	ldi	r24, 0x0F	; 15
    144c:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    1450:	8f e3       	ldi	r24, 0x3F	; 63
    1452:	9f e1       	ldi	r25, 0x1F	; 31
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	f1 f7       	brne	.-4      	; 0x1454 <LCD_Init+0x44>
    1458:	00 c0       	rjmp	.+0      	; 0x145a <LCD_Init+0x4a>
    145a:	00 00       	nop
    145c:	08 95       	ret

0000145e <LCD_Char>:
    145e:	cf 93       	push	r28
    1460:	c8 2f       	mov	r28, r24
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	89 e0       	ldi	r24, 0x09	; 9
    1466:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	0e 94 3e 0c 	call	0x187c	; 0x187c <DIO_ReadPort>
    1470:	8f 70       	andi	r24, 0x0F	; 15
    1472:	9c 2f       	mov	r25, r28
    1474:	90 7f       	andi	r25, 0xF0	; 240
    1476:	68 2f       	mov	r22, r24
    1478:	69 2b       	or	r22, r25
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_WritePort>
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	88 e0       	ldi	r24, 0x08	; 8
    1484:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1488:	8f e8       	ldi	r24, 0x8F	; 143
    148a:	91 e0       	ldi	r25, 0x01	; 1
    148c:	01 97       	sbiw	r24, 0x01	; 1
    148e:	f1 f7       	brne	.-4      	; 0x148c <LCD_Char+0x2e>
    1490:	00 c0       	rjmp	.+0      	; 0x1492 <LCD_Char+0x34>
    1492:	00 00       	nop
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	88 e0       	ldi	r24, 0x08	; 8
    1498:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    149c:	8f e1       	ldi	r24, 0x1F	; 31
    149e:	9e e4       	ldi	r25, 0x4E	; 78
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_Char+0x42>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <LCD_Char+0x48>
    14a6:	00 00       	nop
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	0e 94 3e 0c 	call	0x187c	; 0x187c <DIO_ReadPort>
    14ae:	8f 70       	andi	r24, 0x0F	; 15
    14b0:	90 e1       	ldi	r25, 0x10	; 16
    14b2:	c9 9f       	mul	r28, r25
    14b4:	90 01       	movw	r18, r0
    14b6:	11 24       	eor	r1, r1
    14b8:	68 2f       	mov	r22, r24
    14ba:	62 2b       	or	r22, r18
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	0e 94 50 0c 	call	0x18a0	; 0x18a0 <DIO_WritePort>
    14c2:	60 e0       	ldi	r22, 0x00	; 0
    14c4:	88 e0       	ldi	r24, 0x08	; 8
    14c6:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14ca:	8f e8       	ldi	r24, 0x8F	; 143
    14cc:	91 e0       	ldi	r25, 0x01	; 1
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <LCD_Char+0x70>
    14d2:	00 c0       	rjmp	.+0      	; 0x14d4 <LCD_Char+0x76>
    14d4:	00 00       	nop
    14d6:	61 e0       	ldi	r22, 0x01	; 1
    14d8:	88 e0       	ldi	r24, 0x08	; 8
    14da:	0e 94 07 0b 	call	0x160e	; 0x160e <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    14de:	8f e3       	ldi	r24, 0x3F	; 63
    14e0:	9f e1       	ldi	r25, 0x1F	; 31
    14e2:	01 97       	sbiw	r24, 0x01	; 1
    14e4:	f1 f7       	brne	.-4      	; 0x14e2 <LCD_Char+0x84>
    14e6:	00 c0       	rjmp	.+0      	; 0x14e8 <LCD_Char+0x8a>
    14e8:	00 00       	nop
    14ea:	cf 91       	pop	r28
    14ec:	08 95       	ret

000014ee <LCD_String>:
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	fc 01       	movw	r30, r24
    14f6:	80 81       	ld	r24, Z
    14f8:	88 23       	and	r24, r24
    14fa:	59 f0       	breq	.+22     	; 0x1512 <LCD_String+0x24>
    14fc:	8f 01       	movw	r16, r30
    14fe:	c0 e0       	ldi	r28, 0x00	; 0
    1500:	0e 94 2f 0a 	call	0x145e	; 0x145e <LCD_Char>
    1504:	cf 5f       	subi	r28, 0xFF	; 255
    1506:	f8 01       	movw	r30, r16
    1508:	ec 0f       	add	r30, r28
    150a:	f1 1d       	adc	r31, r1
    150c:	80 81       	ld	r24, Z
    150e:	81 11       	cpse	r24, r1
    1510:	f7 cf       	rjmp	.-18     	; 0x1500 <LCD_String+0x12>
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	08 95       	ret

0000151a <LCD_Clear>:
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    1520:	08 95       	ret

00001522 <LCD_SetPos>:
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	19 f0       	breq	.+6      	; 0x152c <LCD_SetPos+0xa>
    1526:	82 30       	cpi	r24, 0x02	; 2
    1528:	39 f0       	breq	.+14     	; 0x1538 <LCD_SetPos+0x16>
    152a:	08 95       	ret
    152c:	86 2f       	mov	r24, r22
    152e:	8f 70       	andi	r24, 0x0F	; 15
    1530:	80 68       	ori	r24, 0x80	; 128
    1532:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    1536:	08 95       	ret
    1538:	86 2f       	mov	r24, r22
    153a:	8f 70       	andi	r24, 0x0F	; 15
    153c:	80 6c       	ori	r24, 0xC0	; 192
    153e:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_Cmd>
    1542:	08 95       	ret

00001544 <LM35_Init>:
    1544:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <ADC_Init>
    1548:	08 95       	ret

0000154a <LM35_Read>:
    154a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <ADC_Read>
    154e:	96 95       	lsr	r25
    1550:	87 95       	ror	r24
    1552:	96 95       	lsr	r25
    1554:	87 95       	ror	r24
    1556:	08 95       	ret

00001558 <ServoMotor>:
    1558:	0f 93       	push	r16
    155a:	1f 93       	push	r17
    155c:	cf 93       	push	r28
    155e:	df 93       	push	r29
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	28 97       	sbiw	r28, 0x08	; 8
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	8c 01       	movw	r16, r24
    1572:	61 e0       	ldi	r22, 0x01	; 1
    1574:	8d e1       	ldi	r24, 0x1D	; 29
    1576:	0e 94 bc 0b 	call	0x1778	; 0x1778 <DIO_ConfigChannel>
    157a:	67 e8       	ldi	r22, 0x87	; 135
    157c:	73 e1       	ldi	r23, 0x13	; 19
    157e:	82 e0       	ldi	r24, 0x02	; 2
    1580:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Timer1_SetValue>
    1584:	b8 01       	movw	r22, r16
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	0e 94 25 11 	call	0x224a	; 0x224a <__floatunsisf>
    158e:	2c e1       	ldi	r18, 0x1C	; 28
    1590:	37 ec       	ldi	r19, 0xC7	; 199
    1592:	41 eb       	ldi	r20, 0xB1	; 177
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 b3 11 	call	0x2366	; 0x2366 <__mulsf3>
    159a:	0e 94 f6 10 	call	0x21ec	; 0x21ec <__fixunssfsi>
    159e:	67 50       	subi	r22, 0x07	; 7
    15a0:	7f 4f       	sbci	r23, 0xFF	; 255
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	0e 94 de 0d 	call	0x1bbc	; 0x1bbc <Timer1_SetValue>
    15a8:	88 e0       	ldi	r24, 0x08	; 8
    15aa:	e4 ec       	ldi	r30, 0xC4	; 196
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	de 01       	movw	r26, r28
    15b0:	11 96       	adiw	r26, 0x01	; 1
    15b2:	01 90       	ld	r0, Z+
    15b4:	0d 92       	st	X+, r0
    15b6:	8a 95       	dec	r24
    15b8:	e1 f7       	brne	.-8      	; 0x15b2 <ServoMotor+0x5a>
    15ba:	ce 01       	movw	r24, r28
    15bc:	01 96       	adiw	r24, 0x01	; 1
    15be:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <Timer1_Init>
    15c2:	28 96       	adiw	r28, 0x08	; 8
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	df 91       	pop	r29
    15d0:	cf 91       	pop	r28
    15d2:	1f 91       	pop	r17
    15d4:	0f 91       	pop	r16
    15d6:	08 95       	ret

000015d8 <ADC_Init>:
    15d8:	fc 01       	movw	r30, r24
    15da:	90 81       	ld	r25, Z
    15dc:	92 95       	swap	r25
    15de:	99 0f       	add	r25, r25
    15e0:	99 0f       	add	r25, r25
    15e2:	90 7c       	andi	r25, 0xC0	; 192
    15e4:	97 b9       	out	0x07, r25	; 7
    15e6:	96 b1       	in	r25, 0x06	; 6
    15e8:	81 81       	ldd	r24, Z+1	; 0x01
    15ea:	89 2b       	or	r24, r25
    15ec:	86 b9       	out	0x06, r24	; 6
    15ee:	37 9a       	sbi	0x06, 7	; 6
    15f0:	08 95       	ret

000015f2 <ADC_Read>:
    15f2:	97 b1       	in	r25, 0x07	; 7
    15f4:	90 7e       	andi	r25, 0xE0	; 224
    15f6:	8f 71       	andi	r24, 0x1F	; 31
    15f8:	89 2b       	or	r24, r25
    15fa:	87 b9       	out	0x07, r24	; 7
    15fc:	36 9a       	sbi	0x06, 6	; 6
    15fe:	34 9b       	sbis	0x06, 4	; 6
    1600:	fe cf       	rjmp	.-4      	; 0x15fe <ADC_Read+0xc>
    1602:	34 9a       	sbi	0x06, 4	; 6
    1604:	84 b1       	in	r24, 0x04	; 4
    1606:	25 b1       	in	r18, 0x05	; 5
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	92 2b       	or	r25, r18
    160c:	08 95       	ret

0000160e <DIO_WriteChannel>:
    160e:	98 2f       	mov	r25, r24
    1610:	97 70       	andi	r25, 0x07	; 7
    1612:	86 95       	lsr	r24
    1614:	86 95       	lsr	r24
    1616:	86 95       	lsr	r24
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	21 f1       	breq	.+72     	; 0x1664 <DIO_WriteChannel+0x56>
    161c:	30 f0       	brcs	.+12     	; 0x162a <DIO_WriteChannel+0x1c>
    161e:	82 30       	cpi	r24, 0x02	; 2
    1620:	f1 f1       	breq	.+124    	; 0x169e <DIO_WriteChannel+0x90>
    1622:	83 30       	cpi	r24, 0x03	; 3
    1624:	09 f4       	brne	.+2      	; 0x1628 <DIO_WriteChannel+0x1a>
    1626:	58 c0       	rjmp	.+176    	; 0x16d8 <DIO_WriteChannel+0xca>
    1628:	08 95       	ret
    162a:	61 30       	cpi	r22, 0x01	; 1
    162c:	69 f4       	brne	.+26     	; 0x1648 <DIO_WriteChannel+0x3a>
    162e:	4b b3       	in	r20, 0x1b	; 27
    1630:	21 e0       	ldi	r18, 0x01	; 1
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	b9 01       	movw	r22, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <DIO_WriteChannel+0x2e>
    1638:	66 0f       	add	r22, r22
    163a:	77 1f       	adc	r23, r23
    163c:	9a 95       	dec	r25
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <DIO_WriteChannel+0x2a>
    1640:	cb 01       	movw	r24, r22
    1642:	84 2b       	or	r24, r20
    1644:	8b bb       	out	0x1b, r24	; 27
    1646:	08 95       	ret
    1648:	4b b3       	in	r20, 0x1b	; 27
    164a:	21 e0       	ldi	r18, 0x01	; 1
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	b9 01       	movw	r22, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_WriteChannel+0x48>
    1652:	66 0f       	add	r22, r22
    1654:	77 1f       	adc	r23, r23
    1656:	9a 95       	dec	r25
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_WriteChannel+0x44>
    165a:	cb 01       	movw	r24, r22
    165c:	80 95       	com	r24
    165e:	84 23       	and	r24, r20
    1660:	8b bb       	out	0x1b, r24	; 27
    1662:	08 95       	ret
    1664:	61 30       	cpi	r22, 0x01	; 1
    1666:	69 f4       	brne	.+26     	; 0x1682 <DIO_WriteChannel+0x74>
    1668:	48 b3       	in	r20, 0x18	; 24
    166a:	21 e0       	ldi	r18, 0x01	; 1
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	b9 01       	movw	r22, r18
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <DIO_WriteChannel+0x68>
    1672:	66 0f       	add	r22, r22
    1674:	77 1f       	adc	r23, r23
    1676:	9a 95       	dec	r25
    1678:	e2 f7       	brpl	.-8      	; 0x1672 <DIO_WriteChannel+0x64>
    167a:	cb 01       	movw	r24, r22
    167c:	84 2b       	or	r24, r20
    167e:	88 bb       	out	0x18, r24	; 24
    1680:	08 95       	ret
    1682:	48 b3       	in	r20, 0x18	; 24
    1684:	21 e0       	ldi	r18, 0x01	; 1
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	b9 01       	movw	r22, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <DIO_WriteChannel+0x82>
    168c:	66 0f       	add	r22, r22
    168e:	77 1f       	adc	r23, r23
    1690:	9a 95       	dec	r25
    1692:	e2 f7       	brpl	.-8      	; 0x168c <DIO_WriteChannel+0x7e>
    1694:	cb 01       	movw	r24, r22
    1696:	80 95       	com	r24
    1698:	84 23       	and	r24, r20
    169a:	88 bb       	out	0x18, r24	; 24
    169c:	08 95       	ret
    169e:	61 30       	cpi	r22, 0x01	; 1
    16a0:	69 f4       	brne	.+26     	; 0x16bc <DIO_WriteChannel+0xae>
    16a2:	45 b3       	in	r20, 0x15	; 21
    16a4:	21 e0       	ldi	r18, 0x01	; 1
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	b9 01       	movw	r22, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <DIO_WriteChannel+0xa2>
    16ac:	66 0f       	add	r22, r22
    16ae:	77 1f       	adc	r23, r23
    16b0:	9a 95       	dec	r25
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <DIO_WriteChannel+0x9e>
    16b4:	cb 01       	movw	r24, r22
    16b6:	84 2b       	or	r24, r20
    16b8:	85 bb       	out	0x15, r24	; 21
    16ba:	08 95       	ret
    16bc:	45 b3       	in	r20, 0x15	; 21
    16be:	21 e0       	ldi	r18, 0x01	; 1
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	b9 01       	movw	r22, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <DIO_WriteChannel+0xbc>
    16c6:	66 0f       	add	r22, r22
    16c8:	77 1f       	adc	r23, r23
    16ca:	9a 95       	dec	r25
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <DIO_WriteChannel+0xb8>
    16ce:	cb 01       	movw	r24, r22
    16d0:	80 95       	com	r24
    16d2:	84 23       	and	r24, r20
    16d4:	85 bb       	out	0x15, r24	; 21
    16d6:	08 95       	ret
    16d8:	61 30       	cpi	r22, 0x01	; 1
    16da:	69 f4       	brne	.+26     	; 0x16f6 <DIO_WriteChannel+0xe8>
    16dc:	42 b3       	in	r20, 0x12	; 18
    16de:	21 e0       	ldi	r18, 0x01	; 1
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	b9 01       	movw	r22, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <DIO_WriteChannel+0xdc>
    16e6:	66 0f       	add	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	9a 95       	dec	r25
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <DIO_WriteChannel+0xd8>
    16ee:	cb 01       	movw	r24, r22
    16f0:	84 2b       	or	r24, r20
    16f2:	82 bb       	out	0x12, r24	; 18
    16f4:	08 95       	ret
    16f6:	42 b3       	in	r20, 0x12	; 18
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	b9 01       	movw	r22, r18
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_WriteChannel+0xf6>
    1700:	66 0f       	add	r22, r22
    1702:	77 1f       	adc	r23, r23
    1704:	9a 95       	dec	r25
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_WriteChannel+0xf2>
    1708:	cb 01       	movw	r24, r22
    170a:	80 95       	com	r24
    170c:	84 23       	and	r24, r20
    170e:	82 bb       	out	0x12, r24	; 18
    1710:	08 95       	ret

00001712 <DIO_ReadChannel>:
    1712:	28 2f       	mov	r18, r24
    1714:	27 70       	andi	r18, 0x07	; 7
    1716:	86 95       	lsr	r24
    1718:	86 95       	lsr	r24
    171a:	86 95       	lsr	r24
    171c:	81 30       	cpi	r24, 0x01	; 1
    171e:	79 f0       	breq	.+30     	; 0x173e <DIO_ReadChannel+0x2c>
    1720:	28 f0       	brcs	.+10     	; 0x172c <DIO_ReadChannel+0x1a>
    1722:	82 30       	cpi	r24, 0x02	; 2
    1724:	a9 f0       	breq	.+42     	; 0x1750 <DIO_ReadChannel+0x3e>
    1726:	83 30       	cpi	r24, 0x03	; 3
    1728:	e1 f0       	breq	.+56     	; 0x1762 <DIO_ReadChannel+0x50>
    172a:	24 c0       	rjmp	.+72     	; 0x1774 <DIO_ReadChannel+0x62>
    172c:	89 b3       	in	r24, 0x19	; 25
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <DIO_ReadChannel+0x24>
    1732:	95 95       	asr	r25
    1734:	87 95       	ror	r24
    1736:	2a 95       	dec	r18
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <DIO_ReadChannel+0x20>
    173a:	81 70       	andi	r24, 0x01	; 1
    173c:	08 95       	ret
    173e:	86 b3       	in	r24, 0x16	; 22
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_ReadChannel+0x36>
    1744:	95 95       	asr	r25
    1746:	87 95       	ror	r24
    1748:	2a 95       	dec	r18
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_ReadChannel+0x32>
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	08 95       	ret
    1750:	83 b3       	in	r24, 0x13	; 19
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	02 c0       	rjmp	.+4      	; 0x175a <DIO_ReadChannel+0x48>
    1756:	95 95       	asr	r25
    1758:	87 95       	ror	r24
    175a:	2a 95       	dec	r18
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <DIO_ReadChannel+0x44>
    175e:	81 70       	andi	r24, 0x01	; 1
    1760:	08 95       	ret
    1762:	80 b3       	in	r24, 0x10	; 16
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	02 c0       	rjmp	.+4      	; 0x176c <DIO_ReadChannel+0x5a>
    1768:	95 95       	asr	r25
    176a:	87 95       	ror	r24
    176c:	2a 95       	dec	r18
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <DIO_ReadChannel+0x56>
    1770:	81 70       	andi	r24, 0x01	; 1
    1772:	08 95       	ret
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	08 95       	ret

00001778 <DIO_ConfigChannel>:
    1778:	98 2f       	mov	r25, r24
    177a:	97 70       	andi	r25, 0x07	; 7
    177c:	86 95       	lsr	r24
    177e:	86 95       	lsr	r24
    1780:	86 95       	lsr	r24
    1782:	81 30       	cpi	r24, 0x01	; 1
    1784:	21 f1       	breq	.+72     	; 0x17ce <DIO_ConfigChannel+0x56>
    1786:	30 f0       	brcs	.+12     	; 0x1794 <DIO_ConfigChannel+0x1c>
    1788:	82 30       	cpi	r24, 0x02	; 2
    178a:	f1 f1       	breq	.+124    	; 0x1808 <DIO_ConfigChannel+0x90>
    178c:	83 30       	cpi	r24, 0x03	; 3
    178e:	09 f4       	brne	.+2      	; 0x1792 <DIO_ConfigChannel+0x1a>
    1790:	58 c0       	rjmp	.+176    	; 0x1842 <DIO_ConfigChannel+0xca>
    1792:	08 95       	ret
    1794:	61 30       	cpi	r22, 0x01	; 1
    1796:	69 f4       	brne	.+26     	; 0x17b2 <DIO_ConfigChannel+0x3a>
    1798:	4a b3       	in	r20, 0x1a	; 26
    179a:	21 e0       	ldi	r18, 0x01	; 1
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	b9 01       	movw	r22, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_ConfigChannel+0x2e>
    17a2:	66 0f       	add	r22, r22
    17a4:	77 1f       	adc	r23, r23
    17a6:	9a 95       	dec	r25
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_ConfigChannel+0x2a>
    17aa:	cb 01       	movw	r24, r22
    17ac:	84 2b       	or	r24, r20
    17ae:	8a bb       	out	0x1a, r24	; 26
    17b0:	08 95       	ret
    17b2:	4a b3       	in	r20, 0x1a	; 26
    17b4:	21 e0       	ldi	r18, 0x01	; 1
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	b9 01       	movw	r22, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <DIO_ConfigChannel+0x48>
    17bc:	66 0f       	add	r22, r22
    17be:	77 1f       	adc	r23, r23
    17c0:	9a 95       	dec	r25
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <DIO_ConfigChannel+0x44>
    17c4:	cb 01       	movw	r24, r22
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8a bb       	out	0x1a, r24	; 26
    17cc:	08 95       	ret
    17ce:	61 30       	cpi	r22, 0x01	; 1
    17d0:	69 f4       	brne	.+26     	; 0x17ec <DIO_ConfigChannel+0x74>
    17d2:	47 b3       	in	r20, 0x17	; 23
    17d4:	21 e0       	ldi	r18, 0x01	; 1
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	b9 01       	movw	r22, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <DIO_ConfigChannel+0x68>
    17dc:	66 0f       	add	r22, r22
    17de:	77 1f       	adc	r23, r23
    17e0:	9a 95       	dec	r25
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <DIO_ConfigChannel+0x64>
    17e4:	cb 01       	movw	r24, r22
    17e6:	84 2b       	or	r24, r20
    17e8:	87 bb       	out	0x17, r24	; 23
    17ea:	08 95       	ret
    17ec:	47 b3       	in	r20, 0x17	; 23
    17ee:	21 e0       	ldi	r18, 0x01	; 1
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	b9 01       	movw	r22, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_ConfigChannel+0x82>
    17f6:	66 0f       	add	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	9a 95       	dec	r25
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_ConfigChannel+0x7e>
    17fe:	cb 01       	movw	r24, r22
    1800:	80 95       	com	r24
    1802:	84 23       	and	r24, r20
    1804:	87 bb       	out	0x17, r24	; 23
    1806:	08 95       	ret
    1808:	61 30       	cpi	r22, 0x01	; 1
    180a:	69 f4       	brne	.+26     	; 0x1826 <DIO_ConfigChannel+0xae>
    180c:	44 b3       	in	r20, 0x14	; 20
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	b9 01       	movw	r22, r18
    1814:	02 c0       	rjmp	.+4      	; 0x181a <DIO_ConfigChannel+0xa2>
    1816:	66 0f       	add	r22, r22
    1818:	77 1f       	adc	r23, r23
    181a:	9a 95       	dec	r25
    181c:	e2 f7       	brpl	.-8      	; 0x1816 <DIO_ConfigChannel+0x9e>
    181e:	cb 01       	movw	r24, r22
    1820:	84 2b       	or	r24, r20
    1822:	84 bb       	out	0x14, r24	; 20
    1824:	08 95       	ret
    1826:	44 b3       	in	r20, 0x14	; 20
    1828:	21 e0       	ldi	r18, 0x01	; 1
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	b9 01       	movw	r22, r18
    182e:	02 c0       	rjmp	.+4      	; 0x1834 <DIO_ConfigChannel+0xbc>
    1830:	66 0f       	add	r22, r22
    1832:	77 1f       	adc	r23, r23
    1834:	9a 95       	dec	r25
    1836:	e2 f7       	brpl	.-8      	; 0x1830 <DIO_ConfigChannel+0xb8>
    1838:	cb 01       	movw	r24, r22
    183a:	80 95       	com	r24
    183c:	84 23       	and	r24, r20
    183e:	84 bb       	out	0x14, r24	; 20
    1840:	08 95       	ret
    1842:	61 30       	cpi	r22, 0x01	; 1
    1844:	69 f4       	brne	.+26     	; 0x1860 <DIO_ConfigChannel+0xe8>
    1846:	41 b3       	in	r20, 0x11	; 17
    1848:	21 e0       	ldi	r18, 0x01	; 1
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	b9 01       	movw	r22, r18
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <DIO_ConfigChannel+0xdc>
    1850:	66 0f       	add	r22, r22
    1852:	77 1f       	adc	r23, r23
    1854:	9a 95       	dec	r25
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <DIO_ConfigChannel+0xd8>
    1858:	cb 01       	movw	r24, r22
    185a:	84 2b       	or	r24, r20
    185c:	81 bb       	out	0x11, r24	; 17
    185e:	08 95       	ret
    1860:	41 b3       	in	r20, 0x11	; 17
    1862:	21 e0       	ldi	r18, 0x01	; 1
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	b9 01       	movw	r22, r18
    1868:	02 c0       	rjmp	.+4      	; 0x186e <DIO_ConfigChannel+0xf6>
    186a:	66 0f       	add	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	9a 95       	dec	r25
    1870:	e2 f7       	brpl	.-8      	; 0x186a <DIO_ConfigChannel+0xf2>
    1872:	cb 01       	movw	r24, r22
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	81 bb       	out	0x11, r24	; 17
    187a:	08 95       	ret

0000187c <DIO_ReadPort>:
    187c:	81 30       	cpi	r24, 0x01	; 1
    187e:	41 f0       	breq	.+16     	; 0x1890 <DIO_ReadPort+0x14>
    1880:	28 f0       	brcs	.+10     	; 0x188c <DIO_ReadPort+0x10>
    1882:	82 30       	cpi	r24, 0x02	; 2
    1884:	39 f0       	breq	.+14     	; 0x1894 <DIO_ReadPort+0x18>
    1886:	83 30       	cpi	r24, 0x03	; 3
    1888:	39 f0       	breq	.+14     	; 0x1898 <DIO_ReadPort+0x1c>
    188a:	08 c0       	rjmp	.+16     	; 0x189c <DIO_ReadPort+0x20>
    188c:	8b b3       	in	r24, 0x1b	; 27
    188e:	08 95       	ret
    1890:	88 b3       	in	r24, 0x18	; 24
    1892:	08 95       	ret
    1894:	85 b3       	in	r24, 0x15	; 21
    1896:	08 95       	ret
    1898:	82 b3       	in	r24, 0x12	; 18
    189a:	08 95       	ret
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	08 95       	ret

000018a0 <DIO_WritePort>:
    18a0:	81 30       	cpi	r24, 0x01	; 1
    18a2:	41 f0       	breq	.+16     	; 0x18b4 <DIO_WritePort+0x14>
    18a4:	28 f0       	brcs	.+10     	; 0x18b0 <DIO_WritePort+0x10>
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	39 f0       	breq	.+14     	; 0x18b8 <DIO_WritePort+0x18>
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	39 f0       	breq	.+14     	; 0x18bc <DIO_WritePort+0x1c>
    18ae:	08 95       	ret
    18b0:	6b bb       	out	0x1b, r22	; 27
    18b2:	08 95       	ret
    18b4:	68 bb       	out	0x18, r22	; 24
    18b6:	08 95       	ret
    18b8:	65 bb       	out	0x15, r22	; 21
    18ba:	08 95       	ret
    18bc:	62 bb       	out	0x12, r22	; 18
    18be:	08 95       	ret

000018c0 <DIO_Init>:
    18c0:	e4 e8       	ldi	r30, 0x84	; 132
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	41 e0       	ldi	r20, 0x01	; 1
    18c8:	50 e0       	ldi	r21, 0x00	; 0
    18ca:	28 2f       	mov	r18, r24
    18cc:	27 70       	andi	r18, 0x07	; 7
    18ce:	98 2f       	mov	r25, r24
    18d0:	96 95       	lsr	r25
    18d2:	96 95       	lsr	r25
    18d4:	96 95       	lsr	r25
    18d6:	91 30       	cpi	r25, 0x01	; 1
    18d8:	09 f1       	breq	.+66     	; 0x191c <DIO_Init+0x5c>
    18da:	30 f0       	brcs	.+12     	; 0x18e8 <DIO_Init+0x28>
    18dc:	92 30       	cpi	r25, 0x02	; 2
    18de:	c1 f1       	breq	.+112    	; 0x1950 <DIO_Init+0x90>
    18e0:	93 30       	cpi	r25, 0x03	; 3
    18e2:	09 f4       	brne	.+2      	; 0x18e6 <DIO_Init+0x26>
    18e4:	4f c0       	rjmp	.+158    	; 0x1984 <DIO_Init+0xc4>
    18e6:	67 c0       	rjmp	.+206    	; 0x19b6 <DIO_Init+0xf6>
    18e8:	90 81       	ld	r25, Z
    18ea:	91 30       	cpi	r25, 0x01	; 1
    18ec:	59 f4       	brne	.+22     	; 0x1904 <DIO_Init+0x44>
    18ee:	9a b3       	in	r25, 0x1a	; 26
    18f0:	ba 01       	movw	r22, r20
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <DIO_Init+0x38>
    18f4:	66 0f       	add	r22, r22
    18f6:	77 1f       	adc	r23, r23
    18f8:	2a 95       	dec	r18
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <DIO_Init+0x34>
    18fc:	9b 01       	movw	r18, r22
    18fe:	29 2b       	or	r18, r25
    1900:	2a bb       	out	0x1a, r18	; 26
    1902:	59 c0       	rjmp	.+178    	; 0x19b6 <DIO_Init+0xf6>
    1904:	3a b3       	in	r19, 0x1a	; 26
    1906:	ba 01       	movw	r22, r20
    1908:	02 c0       	rjmp	.+4      	; 0x190e <DIO_Init+0x4e>
    190a:	66 0f       	add	r22, r22
    190c:	77 1f       	adc	r23, r23
    190e:	2a 95       	dec	r18
    1910:	e2 f7       	brpl	.-8      	; 0x190a <DIO_Init+0x4a>
    1912:	96 2f       	mov	r25, r22
    1914:	90 95       	com	r25
    1916:	93 23       	and	r25, r19
    1918:	9a bb       	out	0x1a, r25	; 26
    191a:	4d c0       	rjmp	.+154    	; 0x19b6 <DIO_Init+0xf6>
    191c:	90 81       	ld	r25, Z
    191e:	91 30       	cpi	r25, 0x01	; 1
    1920:	59 f4       	brne	.+22     	; 0x1938 <DIO_Init+0x78>
    1922:	97 b3       	in	r25, 0x17	; 23
    1924:	ba 01       	movw	r22, r20
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_Init+0x6c>
    1928:	66 0f       	add	r22, r22
    192a:	77 1f       	adc	r23, r23
    192c:	2a 95       	dec	r18
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_Init+0x68>
    1930:	9b 01       	movw	r18, r22
    1932:	29 2b       	or	r18, r25
    1934:	27 bb       	out	0x17, r18	; 23
    1936:	3f c0       	rjmp	.+126    	; 0x19b6 <DIO_Init+0xf6>
    1938:	37 b3       	in	r19, 0x17	; 23
    193a:	ba 01       	movw	r22, r20
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_Init+0x82>
    193e:	66 0f       	add	r22, r22
    1940:	77 1f       	adc	r23, r23
    1942:	2a 95       	dec	r18
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_Init+0x7e>
    1946:	96 2f       	mov	r25, r22
    1948:	90 95       	com	r25
    194a:	93 23       	and	r25, r19
    194c:	97 bb       	out	0x17, r25	; 23
    194e:	33 c0       	rjmp	.+102    	; 0x19b6 <DIO_Init+0xf6>
    1950:	90 81       	ld	r25, Z
    1952:	91 30       	cpi	r25, 0x01	; 1
    1954:	59 f4       	brne	.+22     	; 0x196c <DIO_Init+0xac>
    1956:	94 b3       	in	r25, 0x14	; 20
    1958:	ba 01       	movw	r22, r20
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_Init+0xa0>
    195c:	66 0f       	add	r22, r22
    195e:	77 1f       	adc	r23, r23
    1960:	2a 95       	dec	r18
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_Init+0x9c>
    1964:	9b 01       	movw	r18, r22
    1966:	29 2b       	or	r18, r25
    1968:	24 bb       	out	0x14, r18	; 20
    196a:	25 c0       	rjmp	.+74     	; 0x19b6 <DIO_Init+0xf6>
    196c:	34 b3       	in	r19, 0x14	; 20
    196e:	ba 01       	movw	r22, r20
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <DIO_Init+0xb6>
    1972:	66 0f       	add	r22, r22
    1974:	77 1f       	adc	r23, r23
    1976:	2a 95       	dec	r18
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <DIO_Init+0xb2>
    197a:	96 2f       	mov	r25, r22
    197c:	90 95       	com	r25
    197e:	93 23       	and	r25, r19
    1980:	94 bb       	out	0x14, r25	; 20
    1982:	19 c0       	rjmp	.+50     	; 0x19b6 <DIO_Init+0xf6>
    1984:	90 81       	ld	r25, Z
    1986:	91 30       	cpi	r25, 0x01	; 1
    1988:	59 f4       	brne	.+22     	; 0x19a0 <DIO_Init+0xe0>
    198a:	91 b3       	in	r25, 0x11	; 17
    198c:	ba 01       	movw	r22, r20
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_Init+0xd4>
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	2a 95       	dec	r18
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_Init+0xd0>
    1998:	9b 01       	movw	r18, r22
    199a:	29 2b       	or	r18, r25
    199c:	21 bb       	out	0x11, r18	; 17
    199e:	0b c0       	rjmp	.+22     	; 0x19b6 <DIO_Init+0xf6>
    19a0:	31 b3       	in	r19, 0x11	; 17
    19a2:	ba 01       	movw	r22, r20
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_Init+0xea>
    19a6:	66 0f       	add	r22, r22
    19a8:	77 1f       	adc	r23, r23
    19aa:	2a 95       	dec	r18
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_Init+0xe6>
    19ae:	96 2f       	mov	r25, r22
    19b0:	90 95       	com	r25
    19b2:	93 23       	and	r25, r19
    19b4:	91 bb       	out	0x11, r25	; 17
    19b6:	8f 5f       	subi	r24, 0xFF	; 255
    19b8:	32 96       	adiw	r30, 0x02	; 2
    19ba:	80 32       	cpi	r24, 0x20	; 32
    19bc:	09 f0       	breq	.+2      	; 0x19c0 <DIO_Init+0x100>
    19be:	85 cf       	rjmp	.-246    	; 0x18ca <DIO_Init+0xa>
    19c0:	08 95       	ret

000019c2 <Ext_Interrupt_Enable>:
    19c2:	81 30       	cpi	r24, 0x01	; 1
    19c4:	41 f0       	breq	.+16     	; 0x19d6 <Ext_Interrupt_Enable+0x14>
    19c6:	18 f0       	brcs	.+6      	; 0x19ce <Ext_Interrupt_Enable+0xc>
    19c8:	82 30       	cpi	r24, 0x02	; 2
    19ca:	49 f0       	breq	.+18     	; 0x19de <Ext_Interrupt_Enable+0x1c>
    19cc:	08 95       	ret
    19ce:	8b b7       	in	r24, 0x3b	; 59
    19d0:	80 64       	ori	r24, 0x40	; 64
    19d2:	8b bf       	out	0x3b, r24	; 59
    19d4:	08 95       	ret
    19d6:	8b b7       	in	r24, 0x3b	; 59
    19d8:	80 68       	ori	r24, 0x80	; 128
    19da:	8b bf       	out	0x3b, r24	; 59
    19dc:	08 95       	ret
    19de:	8b b7       	in	r24, 0x3b	; 59
    19e0:	80 62       	ori	r24, 0x20	; 32
    19e2:	8b bf       	out	0x3b, r24	; 59
    19e4:	08 95       	ret

000019e6 <Ext_Interrupt_Sncontrol>:
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	41 f0       	breq	.+16     	; 0x19fa <Ext_Interrupt_Sncontrol+0x14>
    19ea:	18 f0       	brcs	.+6      	; 0x19f2 <Ext_Interrupt_Sncontrol+0xc>
    19ec:	82 30       	cpi	r24, 0x02	; 2
    19ee:	59 f0       	breq	.+22     	; 0x1a06 <Ext_Interrupt_Sncontrol+0x20>
    19f0:	08 95       	ret
    19f2:	85 b7       	in	r24, 0x35	; 53
    19f4:	68 2b       	or	r22, r24
    19f6:	65 bf       	out	0x35, r22	; 53
    19f8:	08 95       	ret
    19fa:	85 b7       	in	r24, 0x35	; 53
    19fc:	66 0f       	add	r22, r22
    19fe:	66 0f       	add	r22, r22
    1a00:	68 2b       	or	r22, r24
    1a02:	65 bf       	out	0x35, r22	; 53
    1a04:	08 95       	ret
    1a06:	62 30       	cpi	r22, 0x02	; 2
    1a08:	21 f4       	brne	.+8      	; 0x1a12 <Ext_Interrupt_Sncontrol+0x2c>
    1a0a:	84 b7       	in	r24, 0x34	; 52
    1a0c:	8f 7b       	andi	r24, 0xBF	; 191
    1a0e:	84 bf       	out	0x34, r24	; 52
    1a10:	08 95       	ret
    1a12:	63 30       	cpi	r22, 0x03	; 3
    1a14:	19 f4       	brne	.+6      	; 0x1a1c <Ext_Interrupt_Sncontrol+0x36>
    1a16:	84 b7       	in	r24, 0x34	; 52
    1a18:	80 64       	ori	r24, 0x40	; 64
    1a1a:	84 bf       	out	0x34, r24	; 52
    1a1c:	08 95       	ret

00001a1e <Ext_Interrupt_SetCallBack>:
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	49 f0       	breq	.+18     	; 0x1a34 <Ext_Interrupt_SetCallBack+0x16>
    1a22:	18 f0       	brcs	.+6      	; 0x1a2a <Ext_Interrupt_SetCallBack+0xc>
    1a24:	82 30       	cpi	r24, 0x02	; 2
    1a26:	59 f0       	breq	.+22     	; 0x1a3e <Ext_Interrupt_SetCallBack+0x20>
    1a28:	08 95       	ret
    1a2a:	70 93 43 03 	sts	0x0343, r23	; 0x800343 <ExtInt0FunPtr+0x1>
    1a2e:	60 93 42 03 	sts	0x0342, r22	; 0x800342 <ExtInt0FunPtr>
    1a32:	08 95       	ret
    1a34:	70 93 41 03 	sts	0x0341, r23	; 0x800341 <ExtInt1FunPtr+0x1>
    1a38:	60 93 40 03 	sts	0x0340, r22	; 0x800340 <ExtInt1FunPtr>
    1a3c:	08 95       	ret
    1a3e:	70 93 3f 03 	sts	0x033F, r23	; 0x80033f <ExtInt2FunPtr+0x1>
    1a42:	60 93 3e 03 	sts	0x033E, r22	; 0x80033e <ExtInt2FunPtr>
    1a46:	08 95       	ret

00001a48 <__vector_1>:
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	2f 93       	push	r18
    1a54:	3f 93       	push	r19
    1a56:	4f 93       	push	r20
    1a58:	5f 93       	push	r21
    1a5a:	6f 93       	push	r22
    1a5c:	7f 93       	push	r23
    1a5e:	8f 93       	push	r24
    1a60:	9f 93       	push	r25
    1a62:	af 93       	push	r26
    1a64:	bf 93       	push	r27
    1a66:	ef 93       	push	r30
    1a68:	ff 93       	push	r31
    1a6a:	e0 91 42 03 	lds	r30, 0x0342	; 0x800342 <ExtInt0FunPtr>
    1a6e:	f0 91 43 03 	lds	r31, 0x0343	; 0x800343 <ExtInt0FunPtr+0x1>
    1a72:	09 95       	icall
    1a74:	ff 91       	pop	r31
    1a76:	ef 91       	pop	r30
    1a78:	bf 91       	pop	r27
    1a7a:	af 91       	pop	r26
    1a7c:	9f 91       	pop	r25
    1a7e:	8f 91       	pop	r24
    1a80:	7f 91       	pop	r23
    1a82:	6f 91       	pop	r22
    1a84:	5f 91       	pop	r21
    1a86:	4f 91       	pop	r20
    1a88:	3f 91       	pop	r19
    1a8a:	2f 91       	pop	r18
    1a8c:	0f 90       	pop	r0
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	0f 90       	pop	r0
    1a92:	1f 90       	pop	r1
    1a94:	18 95       	reti

00001a96 <__vector_2>:
    1a96:	1f 92       	push	r1
    1a98:	0f 92       	push	r0
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	0f 92       	push	r0
    1a9e:	11 24       	eor	r1, r1
    1aa0:	2f 93       	push	r18
    1aa2:	3f 93       	push	r19
    1aa4:	4f 93       	push	r20
    1aa6:	5f 93       	push	r21
    1aa8:	6f 93       	push	r22
    1aaa:	7f 93       	push	r23
    1aac:	8f 93       	push	r24
    1aae:	9f 93       	push	r25
    1ab0:	af 93       	push	r26
    1ab2:	bf 93       	push	r27
    1ab4:	ef 93       	push	r30
    1ab6:	ff 93       	push	r31
    1ab8:	e0 91 40 03 	lds	r30, 0x0340	; 0x800340 <ExtInt1FunPtr>
    1abc:	f0 91 41 03 	lds	r31, 0x0341	; 0x800341 <ExtInt1FunPtr+0x1>
    1ac0:	09 95       	icall
    1ac2:	ff 91       	pop	r31
    1ac4:	ef 91       	pop	r30
    1ac6:	bf 91       	pop	r27
    1ac8:	af 91       	pop	r26
    1aca:	9f 91       	pop	r25
    1acc:	8f 91       	pop	r24
    1ace:	7f 91       	pop	r23
    1ad0:	6f 91       	pop	r22
    1ad2:	5f 91       	pop	r21
    1ad4:	4f 91       	pop	r20
    1ad6:	3f 91       	pop	r19
    1ad8:	2f 91       	pop	r18
    1ada:	0f 90       	pop	r0
    1adc:	0f be       	out	0x3f, r0	; 63
    1ade:	0f 90       	pop	r0
    1ae0:	1f 90       	pop	r1
    1ae2:	18 95       	reti

00001ae4 <__vector_3>:
    1ae4:	1f 92       	push	r1
    1ae6:	0f 92       	push	r0
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	0f 92       	push	r0
    1aec:	11 24       	eor	r1, r1
    1aee:	2f 93       	push	r18
    1af0:	3f 93       	push	r19
    1af2:	4f 93       	push	r20
    1af4:	5f 93       	push	r21
    1af6:	6f 93       	push	r22
    1af8:	7f 93       	push	r23
    1afa:	8f 93       	push	r24
    1afc:	9f 93       	push	r25
    1afe:	af 93       	push	r26
    1b00:	bf 93       	push	r27
    1b02:	ef 93       	push	r30
    1b04:	ff 93       	push	r31
    1b06:	e0 91 3e 03 	lds	r30, 0x033E	; 0x80033e <ExtInt2FunPtr>
    1b0a:	f0 91 3f 03 	lds	r31, 0x033F	; 0x80033f <ExtInt2FunPtr+0x1>
    1b0e:	09 95       	icall
    1b10:	ff 91       	pop	r31
    1b12:	ef 91       	pop	r30
    1b14:	bf 91       	pop	r27
    1b16:	af 91       	pop	r26
    1b18:	9f 91       	pop	r25
    1b1a:	8f 91       	pop	r24
    1b1c:	7f 91       	pop	r23
    1b1e:	6f 91       	pop	r22
    1b20:	5f 91       	pop	r21
    1b22:	4f 91       	pop	r20
    1b24:	3f 91       	pop	r19
    1b26:	2f 91       	pop	r18
    1b28:	0f 90       	pop	r0
    1b2a:	0f be       	out	0x3f, r0	; 63
    1b2c:	0f 90       	pop	r0
    1b2e:	1f 90       	pop	r1
    1b30:	18 95       	reti

00001b32 <EnableAllInterrupts>:
    1b32:	8f b7       	in	r24, 0x3f	; 63
    1b34:	80 68       	ori	r24, 0x80	; 128
    1b36:	8f bf       	out	0x3f, r24	; 63
    1b38:	08 95       	ret

00001b3a <Timer1_Init>:
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	9f b5       	in	r25, 0x2f	; 47
    1b3e:	80 81       	ld	r24, Z
    1b40:	83 70       	andi	r24, 0x03	; 3
    1b42:	89 2b       	or	r24, r25
    1b44:	8f bd       	out	0x2f, r24	; 47
    1b46:	9e b5       	in	r25, 0x2e	; 46
    1b48:	80 81       	ld	r24, Z
    1b4a:	86 95       	lsr	r24
    1b4c:	86 95       	lsr	r24
    1b4e:	88 0f       	add	r24, r24
    1b50:	88 0f       	add	r24, r24
    1b52:	88 0f       	add	r24, r24
    1b54:	89 2b       	or	r24, r25
    1b56:	8e bd       	out	0x2e, r24	; 46
    1b58:	9e b5       	in	r25, 0x2e	; 46
    1b5a:	81 81       	ldd	r24, Z+1	; 0x01
    1b5c:	89 2b       	or	r24, r25
    1b5e:	8e bd       	out	0x2e, r24	; 46
    1b60:	2f b5       	in	r18, 0x2f	; 47
    1b62:	92 81       	ldd	r25, Z+2	; 0x02
    1b64:	30 e4       	ldi	r19, 0x40	; 64
    1b66:	93 9f       	mul	r25, r19
    1b68:	c0 01       	movw	r24, r0
    1b6a:	11 24       	eor	r1, r1
    1b6c:	82 2b       	or	r24, r18
    1b6e:	8f bd       	out	0x2f, r24	; 47
    1b70:	2f b5       	in	r18, 0x2f	; 47
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	30 e1       	ldi	r19, 0x10	; 16
    1b76:	93 9f       	mul	r25, r19
    1b78:	c0 01       	movw	r24, r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	82 2b       	or	r24, r18
    1b7e:	8f bd       	out	0x2f, r24	; 47
    1b80:	99 b7       	in	r25, 0x39	; 57
    1b82:	84 81       	ldd	r24, Z+4	; 0x04
    1b84:	88 0f       	add	r24, r24
    1b86:	88 0f       	add	r24, r24
    1b88:	89 2b       	or	r24, r25
    1b8a:	89 bf       	out	0x39, r24	; 57
    1b8c:	99 b7       	in	r25, 0x39	; 57
    1b8e:	86 81       	ldd	r24, Z+6	; 0x06
    1b90:	88 0f       	add	r24, r24
    1b92:	88 0f       	add	r24, r24
    1b94:	88 0f       	add	r24, r24
    1b96:	89 2b       	or	r24, r25
    1b98:	89 bf       	out	0x39, r24	; 57
    1b9a:	29 b7       	in	r18, 0x39	; 57
    1b9c:	95 81       	ldd	r25, Z+5	; 0x05
    1b9e:	30 e1       	ldi	r19, 0x10	; 16
    1ba0:	93 9f       	mul	r25, r19
    1ba2:	c0 01       	movw	r24, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	82 2b       	or	r24, r18
    1ba8:	89 bf       	out	0x39, r24	; 57
    1baa:	29 b7       	in	r18, 0x39	; 57
    1bac:	97 81       	ldd	r25, Z+7	; 0x07
    1bae:	30 e2       	ldi	r19, 0x20	; 32
    1bb0:	93 9f       	mul	r25, r19
    1bb2:	c0 01       	movw	r24, r0
    1bb4:	11 24       	eor	r1, r1
    1bb6:	82 2b       	or	r24, r18
    1bb8:	89 bf       	out	0x39, r24	; 57
    1bba:	08 95       	ret

00001bbc <Timer1_SetValue>:
    1bbc:	81 30       	cpi	r24, 0x01	; 1
    1bbe:	39 f0       	breq	.+14     	; 0x1bce <Timer1_SetValue+0x12>
    1bc0:	18 f0       	brcs	.+6      	; 0x1bc8 <Timer1_SetValue+0xc>
    1bc2:	82 30       	cpi	r24, 0x02	; 2
    1bc4:	39 f0       	breq	.+14     	; 0x1bd4 <Timer1_SetValue+0x18>
    1bc6:	08 95       	ret
    1bc8:	7b bd       	out	0x2b, r23	; 43
    1bca:	6a bd       	out	0x2a, r22	; 42
    1bcc:	08 95       	ret
    1bce:	79 bd       	out	0x29, r23	; 41
    1bd0:	68 bd       	out	0x28, r22	; 40
    1bd2:	08 95       	ret
    1bd4:	77 bd       	out	0x27, r23	; 39
    1bd6:	66 bd       	out	0x26, r22	; 38
    1bd8:	08 95       	ret

00001bda <__vector_9>:
    1bda:	1f 92       	push	r1
    1bdc:	0f 92       	push	r0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	2f 93       	push	r18
    1be6:	3f 93       	push	r19
    1be8:	4f 93       	push	r20
    1bea:	5f 93       	push	r21
    1bec:	6f 93       	push	r22
    1bee:	7f 93       	push	r23
    1bf0:	8f 93       	push	r24
    1bf2:	9f 93       	push	r25
    1bf4:	af 93       	push	r26
    1bf6:	bf 93       	push	r27
    1bf8:	ef 93       	push	r30
    1bfa:	ff 93       	push	r31
    1bfc:	e0 91 48 03 	lds	r30, 0x0348	; 0x800348 <TOVIntFunPtr>
    1c00:	f0 91 49 03 	lds	r31, 0x0349	; 0x800349 <TOVIntFunPtr+0x1>
    1c04:	09 95       	icall
    1c06:	ff 91       	pop	r31
    1c08:	ef 91       	pop	r30
    1c0a:	bf 91       	pop	r27
    1c0c:	af 91       	pop	r26
    1c0e:	9f 91       	pop	r25
    1c10:	8f 91       	pop	r24
    1c12:	7f 91       	pop	r23
    1c14:	6f 91       	pop	r22
    1c16:	5f 91       	pop	r21
    1c18:	4f 91       	pop	r20
    1c1a:	3f 91       	pop	r19
    1c1c:	2f 91       	pop	r18
    1c1e:	0f 90       	pop	r0
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	0f 90       	pop	r0
    1c24:	1f 90       	pop	r1
    1c26:	18 95       	reti

00001c28 <__vector_8>:
    1c28:	1f 92       	push	r1
    1c2a:	0f 92       	push	r0
    1c2c:	0f b6       	in	r0, 0x3f	; 63
    1c2e:	0f 92       	push	r0
    1c30:	11 24       	eor	r1, r1
    1c32:	2f 93       	push	r18
    1c34:	3f 93       	push	r19
    1c36:	4f 93       	push	r20
    1c38:	5f 93       	push	r21
    1c3a:	6f 93       	push	r22
    1c3c:	7f 93       	push	r23
    1c3e:	8f 93       	push	r24
    1c40:	9f 93       	push	r25
    1c42:	af 93       	push	r26
    1c44:	bf 93       	push	r27
    1c46:	ef 93       	push	r30
    1c48:	ff 93       	push	r31
    1c4a:	e0 91 46 03 	lds	r30, 0x0346	; 0x800346 <OC1BIntFunPtr>
    1c4e:	f0 91 47 03 	lds	r31, 0x0347	; 0x800347 <OC1BIntFunPtr+0x1>
    1c52:	09 95       	icall
    1c54:	ff 91       	pop	r31
    1c56:	ef 91       	pop	r30
    1c58:	bf 91       	pop	r27
    1c5a:	af 91       	pop	r26
    1c5c:	9f 91       	pop	r25
    1c5e:	8f 91       	pop	r24
    1c60:	7f 91       	pop	r23
    1c62:	6f 91       	pop	r22
    1c64:	5f 91       	pop	r21
    1c66:	4f 91       	pop	r20
    1c68:	3f 91       	pop	r19
    1c6a:	2f 91       	pop	r18
    1c6c:	0f 90       	pop	r0
    1c6e:	0f be       	out	0x3f, r0	; 63
    1c70:	0f 90       	pop	r0
    1c72:	1f 90       	pop	r1
    1c74:	18 95       	reti

00001c76 <__vector_6>:
    1c76:	1f 92       	push	r1
    1c78:	0f 92       	push	r0
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	0f 92       	push	r0
    1c7e:	11 24       	eor	r1, r1
    1c80:	2f 93       	push	r18
    1c82:	3f 93       	push	r19
    1c84:	4f 93       	push	r20
    1c86:	5f 93       	push	r21
    1c88:	6f 93       	push	r22
    1c8a:	7f 93       	push	r23
    1c8c:	8f 93       	push	r24
    1c8e:	9f 93       	push	r25
    1c90:	af 93       	push	r26
    1c92:	bf 93       	push	r27
    1c94:	ef 93       	push	r30
    1c96:	ff 93       	push	r31
    1c98:	e0 91 44 03 	lds	r30, 0x0344	; 0x800344 <ICIntFunPtr>
    1c9c:	f0 91 45 03 	lds	r31, 0x0345	; 0x800345 <ICIntFunPtr+0x1>
    1ca0:	09 95       	icall
    1ca2:	ff 91       	pop	r31
    1ca4:	ef 91       	pop	r30
    1ca6:	bf 91       	pop	r27
    1ca8:	af 91       	pop	r26
    1caa:	9f 91       	pop	r25
    1cac:	8f 91       	pop	r24
    1cae:	7f 91       	pop	r23
    1cb0:	6f 91       	pop	r22
    1cb2:	5f 91       	pop	r21
    1cb4:	4f 91       	pop	r20
    1cb6:	3f 91       	pop	r19
    1cb8:	2f 91       	pop	r18
    1cba:	0f 90       	pop	r0
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	0f 90       	pop	r0
    1cc0:	1f 90       	pop	r1
    1cc2:	18 95       	reti

00001cc4 <UART_Init>:
    1cc4:	cf 93       	push	r28
    1cc6:	df 93       	push	r29
    1cc8:	ec 01       	movw	r28, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	81 30       	cpi	r24, 0x01	; 1
    1cce:	e9 f4       	brne	.+58     	; 0x1d0a <UART_Init+0x46>
    1cd0:	59 9a       	sbi	0x0b, 1	; 11
    1cd2:	28 81       	ld	r18, Y
    1cd4:	39 81       	ldd	r19, Y+1	; 0x01
    1cd6:	c9 01       	movw	r24, r18
    1cd8:	a0 e0       	ldi	r26, 0x00	; 0
    1cda:	b0 e0       	ldi	r27, 0x00	; 0
    1cdc:	88 0f       	add	r24, r24
    1cde:	99 1f       	adc	r25, r25
    1ce0:	aa 1f       	adc	r26, r26
    1ce2:	bb 1f       	adc	r27, r27
    1ce4:	88 0f       	add	r24, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	aa 1f       	adc	r26, r26
    1cea:	bb 1f       	adc	r27, r27
    1cec:	9c 01       	movw	r18, r24
    1cee:	ad 01       	movw	r20, r26
    1cf0:	22 0f       	add	r18, r18
    1cf2:	33 1f       	adc	r19, r19
    1cf4:	44 1f       	adc	r20, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	74 e2       	ldi	r23, 0x24	; 36
    1cfc:	84 ef       	ldi	r24, 0xF4	; 244
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	0e 94 20 12 	call	0x2440	; 0x2440 <__udivmodsi4>
    1d04:	21 50       	subi	r18, 0x01	; 1
    1d06:	31 09       	sbc	r19, r1
    1d08:	20 c0       	rjmp	.+64     	; 0x1d4a <UART_Init+0x86>
    1d0a:	59 98       	cbi	0x0b, 1	; 11
    1d0c:	28 81       	ld	r18, Y
    1d0e:	39 81       	ldd	r19, Y+1	; 0x01
    1d10:	c9 01       	movw	r24, r18
    1d12:	a0 e0       	ldi	r26, 0x00	; 0
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	88 0f       	add	r24, r24
    1d18:	99 1f       	adc	r25, r25
    1d1a:	aa 1f       	adc	r26, r26
    1d1c:	bb 1f       	adc	r27, r27
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	aa 1f       	adc	r26, r26
    1d24:	bb 1f       	adc	r27, r27
    1d26:	9c 01       	movw	r18, r24
    1d28:	ad 01       	movw	r20, r26
    1d2a:	22 0f       	add	r18, r18
    1d2c:	33 1f       	adc	r19, r19
    1d2e:	44 1f       	adc	r20, r20
    1d30:	55 1f       	adc	r21, r21
    1d32:	22 0f       	add	r18, r18
    1d34:	33 1f       	adc	r19, r19
    1d36:	44 1f       	adc	r20, r20
    1d38:	55 1f       	adc	r21, r21
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	74 e2       	ldi	r23, 0x24	; 36
    1d3e:	84 ef       	ldi	r24, 0xF4	; 244
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	0e 94 20 12 	call	0x2440	; 0x2440 <__udivmodsi4>
    1d46:	21 50       	subi	r18, 0x01	; 1
    1d48:	31 09       	sbc	r19, r1
    1d4a:	29 b9       	out	0x09, r18	; 9
    1d4c:	30 bd       	out	0x20, r19	; 32
    1d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d50:	97 30       	cpi	r25, 0x07	; 7
    1d52:	29 f4       	brne	.+10     	; 0x1d5e <UART_Init+0x9a>
    1d54:	52 9a       	sbi	0x0a, 2	; 10
    1d56:	80 b5       	in	r24, 0x20	; 32
    1d58:	86 68       	ori	r24, 0x86	; 134
    1d5a:	80 bd       	out	0x20, r24	; 32
    1d5c:	05 c0       	rjmp	.+10     	; 0x1d68 <UART_Init+0xa4>
    1d5e:	80 b5       	in	r24, 0x20	; 32
    1d60:	99 0f       	add	r25, r25
    1d62:	80 68       	ori	r24, 0x80	; 128
    1d64:	89 2b       	or	r24, r25
    1d66:	80 bd       	out	0x20, r24	; 32
    1d68:	20 b5       	in	r18, 0x20	; 32
    1d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6c:	30 e1       	ldi	r19, 0x10	; 16
    1d6e:	93 9f       	mul	r25, r19
    1d70:	c0 01       	movw	r24, r0
    1d72:	11 24       	eor	r1, r1
    1d74:	92 2f       	mov	r25, r18
    1d76:	90 68       	ori	r25, 0x80	; 128
    1d78:	89 2b       	or	r24, r25
    1d7a:	80 bd       	out	0x20, r24	; 32
    1d7c:	80 b5       	in	r24, 0x20	; 32
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	99 0f       	add	r25, r25
    1d82:	99 0f       	add	r25, r25
    1d84:	99 0f       	add	r25, r25
    1d86:	80 68       	ori	r24, 0x80	; 128
    1d88:	89 2b       	or	r24, r25
    1d8a:	80 bd       	out	0x20, r24	; 32
    1d8c:	9a b1       	in	r25, 0x0a	; 10
    1d8e:	8e 81       	ldd	r24, Y+6	; 0x06
    1d90:	88 0f       	add	r24, r24
    1d92:	88 0f       	add	r24, r24
    1d94:	88 0f       	add	r24, r24
    1d96:	89 2b       	or	r24, r25
    1d98:	8a b9       	out	0x0a, r24	; 10
    1d9a:	2a b1       	in	r18, 0x0a	; 10
    1d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9e:	30 e1       	ldi	r19, 0x10	; 16
    1da0:	93 9f       	mul	r25, r19
    1da2:	c0 01       	movw	r24, r0
    1da4:	11 24       	eor	r1, r1
    1da6:	82 2b       	or	r24, r18
    1da8:	8a b9       	out	0x0a, r24	; 10
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	08 95       	ret

00001db0 <UART_TransmaitChar>:
    1db0:	5d 9b       	sbis	0x0b, 5	; 11
    1db2:	fe cf       	rjmp	.-4      	; 0x1db0 <UART_TransmaitChar>
    1db4:	8c b9       	out	0x0c, r24	; 12
    1db6:	08 95       	ret

00001db8 <UART_TransmaitString>:
    1db8:	0f 93       	push	r16
    1dba:	1f 93       	push	r17
    1dbc:	cf 93       	push	r28
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	80 81       	ld	r24, Z
    1dc2:	88 23       	and	r24, r24
    1dc4:	59 f0       	breq	.+22     	; 0x1ddc <UART_TransmaitString+0x24>
    1dc6:	8f 01       	movw	r16, r30
    1dc8:	c0 e0       	ldi	r28, 0x00	; 0
    1dca:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <UART_TransmaitChar>
    1dce:	cf 5f       	subi	r28, 0xFF	; 255
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	ec 0f       	add	r30, r28
    1dd4:	f1 1d       	adc	r31, r1
    1dd6:	80 81       	ld	r24, Z
    1dd8:	81 11       	cpse	r24, r1
    1dda:	f7 cf       	rjmp	.-18     	; 0x1dca <UART_TransmaitString+0x12>
    1ddc:	cf 91       	pop	r28
    1dde:	1f 91       	pop	r17
    1de0:	0f 91       	pop	r16
    1de2:	08 95       	ret

00001de4 <UART_Receive>:
    1de4:	5f 9b       	sbis	0x0b, 7	; 11
    1de6:	fe cf       	rjmp	.-4      	; 0x1de4 <UART_Receive>
    1de8:	8c b1       	in	r24, 0x0c	; 12
    1dea:	08 95       	ret

00001dec <prvResetNextTaskUnblockTime>:
    1dec:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <pxDelayedTaskList>
    1df0:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <pxDelayedTaskList+0x1>
    1df4:	80 81       	ld	r24, Z
    1df6:	81 11       	cpse	r24, r1
    1df8:	07 c0       	rjmp	.+14     	; 0x1e08 <prvResetNextTaskUnblockTime+0x1c>
    1dfa:	8f ef       	ldi	r24, 0xFF	; 255
    1dfc:	9f ef       	ldi	r25, 0xFF	; 255
    1dfe:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <xNextTaskUnblockTime+0x1>
    1e02:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <xNextTaskUnblockTime>
    1e06:	08 95       	ret
    1e08:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <pxDelayedTaskList>
    1e0c:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <pxDelayedTaskList+0x1>
    1e10:	05 80       	ldd	r0, Z+5	; 0x05
    1e12:	f6 81       	ldd	r31, Z+6	; 0x06
    1e14:	e0 2d       	mov	r30, r0
    1e16:	80 81       	ld	r24, Z
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <xNextTaskUnblockTime+0x1>
    1e1e:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <xNextTaskUnblockTime>
    1e22:	08 95       	ret

00001e24 <xTaskIncrementTick>:
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <uxSchedulerSuspended>
    1e34:	81 11       	cpse	r24, r1
    1e36:	04 c1       	rjmp	.+520    	; 0x2040 <xTaskIncrementTick+0x21c>
    1e38:	c0 91 52 03 	lds	r28, 0x0352	; 0x800352 <xTickCount>
    1e3c:	d0 91 53 03 	lds	r29, 0x0353	; 0x800353 <xTickCount+0x1>
    1e40:	7e 01       	movw	r14, r28
    1e42:	8f ef       	ldi	r24, 0xFF	; 255
    1e44:	e8 1a       	sub	r14, r24
    1e46:	f8 0a       	sbc	r15, r24
    1e48:	f0 92 53 03 	sts	0x0353, r15	; 0x800353 <xTickCount+0x1>
    1e4c:	e0 92 52 03 	sts	0x0352, r14	; 0x800352 <xTickCount>
    1e50:	e1 14       	cp	r14, r1
    1e52:	f1 04       	cpc	r15, r1
    1e54:	b9 f4       	brne	.+46     	; 0x1e84 <xTaskIncrementTick+0x60>
    1e56:	80 91 56 03 	lds	r24, 0x0356	; 0x800356 <pxDelayedTaskList>
    1e5a:	90 91 57 03 	lds	r25, 0x0357	; 0x800357 <pxDelayedTaskList+0x1>
    1e5e:	20 91 54 03 	lds	r18, 0x0354	; 0x800354 <pxOverflowDelayedTaskList>
    1e62:	30 91 55 03 	lds	r19, 0x0355	; 0x800355 <pxOverflowDelayedTaskList+0x1>
    1e66:	30 93 57 03 	sts	0x0357, r19	; 0x800357 <pxDelayedTaskList+0x1>
    1e6a:	20 93 56 03 	sts	0x0356, r18	; 0x800356 <pxDelayedTaskList>
    1e6e:	90 93 55 03 	sts	0x0355, r25	; 0x800355 <pxOverflowDelayedTaskList+0x1>
    1e72:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <pxOverflowDelayedTaskList>
    1e76:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <xNumOfOverflows>
    1e7a:	8f 5f       	subi	r24, 0xFF	; 255
    1e7c:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <xNumOfOverflows>
    1e80:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <prvResetNextTaskUnblockTime>
    1e84:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <xNextTaskUnblockTime>
    1e88:	90 91 4c 03 	lds	r25, 0x034C	; 0x80034c <xNextTaskUnblockTime+0x1>
    1e8c:	e8 16       	cp	r14, r24
    1e8e:	f9 06       	cpc	r15, r25
    1e90:	10 f4       	brcc	.+4      	; 0x1e96 <xTaskIncrementTick+0x72>
    1e92:	80 e0       	ldi	r24, 0x00	; 0
    1e94:	b9 c0       	rjmp	.+370    	; 0x2008 <xTaskIncrementTick+0x1e4>
    1e96:	80 e0       	ldi	r24, 0x00	; 0
    1e98:	61 e0       	ldi	r22, 0x01	; 1
    1e9a:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <pxDelayedTaskList>
    1e9e:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <pxDelayedTaskList+0x1>
    1ea2:	90 81       	ld	r25, Z
    1ea4:	91 11       	cpse	r25, r1
    1ea6:	07 c0       	rjmp	.+14     	; 0x1eb6 <xTaskIncrementTick+0x92>
    1ea8:	2f ef       	ldi	r18, 0xFF	; 255
    1eaa:	3f ef       	ldi	r19, 0xFF	; 255
    1eac:	30 93 4c 03 	sts	0x034C, r19	; 0x80034c <xNextTaskUnblockTime+0x1>
    1eb0:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <xNextTaskUnblockTime>
    1eb4:	a9 c0       	rjmp	.+338    	; 0x2008 <xTaskIncrementTick+0x1e4>
    1eb6:	e0 91 56 03 	lds	r30, 0x0356	; 0x800356 <pxDelayedTaskList>
    1eba:	f0 91 57 03 	lds	r31, 0x0357	; 0x800357 <pxDelayedTaskList+0x1>
    1ebe:	05 80       	ldd	r0, Z+5	; 0x05
    1ec0:	f6 81       	ldd	r31, Z+6	; 0x06
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	06 80       	ldd	r0, Z+6	; 0x06
    1ec6:	f7 81       	ldd	r31, Z+7	; 0x07
    1ec8:	e0 2d       	mov	r30, r0
    1eca:	22 81       	ldd	r18, Z+2	; 0x02
    1ecc:	33 81       	ldd	r19, Z+3	; 0x03
    1ece:	e2 16       	cp	r14, r18
    1ed0:	f3 06       	cpc	r15, r19
    1ed2:	28 f4       	brcc	.+10     	; 0x1ede <xTaskIncrementTick+0xba>
    1ed4:	30 93 4c 03 	sts	0x034C, r19	; 0x80034c <xNextTaskUnblockTime+0x1>
    1ed8:	20 93 4b 03 	sts	0x034B, r18	; 0x80034b <xNextTaskUnblockTime>
    1edc:	95 c0       	rjmp	.+298    	; 0x2008 <xTaskIncrementTick+0x1e4>
    1ede:	a2 85       	ldd	r26, Z+10	; 0x0a
    1ee0:	b3 85       	ldd	r27, Z+11	; 0x0b
    1ee2:	24 81       	ldd	r18, Z+4	; 0x04
    1ee4:	35 81       	ldd	r19, Z+5	; 0x05
    1ee6:	46 81       	ldd	r20, Z+6	; 0x06
    1ee8:	57 81       	ldd	r21, Z+7	; 0x07
    1eea:	e9 01       	movw	r28, r18
    1eec:	5d 83       	std	Y+5, r21	; 0x05
    1eee:	4c 83       	std	Y+4, r20	; 0x04
    1ef0:	26 81       	ldd	r18, Z+6	; 0x06
    1ef2:	37 81       	ldd	r19, Z+7	; 0x07
    1ef4:	44 81       	ldd	r20, Z+4	; 0x04
    1ef6:	55 81       	ldd	r21, Z+5	; 0x05
    1ef8:	e9 01       	movw	r28, r18
    1efa:	5b 83       	std	Y+3, r21	; 0x03
    1efc:	4a 83       	std	Y+2, r20	; 0x02
    1efe:	af 01       	movw	r20, r30
    1f00:	4e 5f       	subi	r20, 0xFE	; 254
    1f02:	5f 4f       	sbci	r21, 0xFF	; 255
    1f04:	11 96       	adiw	r26, 0x01	; 1
    1f06:	2d 91       	ld	r18, X+
    1f08:	3c 91       	ld	r19, X
    1f0a:	12 97       	sbiw	r26, 0x02	; 2
    1f0c:	24 17       	cp	r18, r20
    1f0e:	35 07       	cpc	r19, r21
    1f10:	31 f4       	brne	.+12     	; 0x1f1e <xTaskIncrementTick+0xfa>
    1f12:	26 81       	ldd	r18, Z+6	; 0x06
    1f14:	37 81       	ldd	r19, Z+7	; 0x07
    1f16:	12 96       	adiw	r26, 0x02	; 2
    1f18:	3c 93       	st	X, r19
    1f1a:	2e 93       	st	-X, r18
    1f1c:	11 97       	sbiw	r26, 0x01	; 1
    1f1e:	13 86       	std	Z+11, r1	; 0x0b
    1f20:	12 86       	std	Z+10, r1	; 0x0a
    1f22:	9c 91       	ld	r25, X
    1f24:	91 50       	subi	r25, 0x01	; 1
    1f26:	9c 93       	st	X, r25
    1f28:	a4 89       	ldd	r26, Z+20	; 0x14
    1f2a:	b5 89       	ldd	r27, Z+21	; 0x15
    1f2c:	10 97       	sbiw	r26, 0x00	; 0
    1f2e:	19 f1       	breq	.+70     	; 0x1f76 <xTaskIncrementTick+0x152>
    1f30:	26 85       	ldd	r18, Z+14	; 0x0e
    1f32:	37 85       	ldd	r19, Z+15	; 0x0f
    1f34:	00 89       	ldd	r16, Z+16	; 0x10
    1f36:	11 89       	ldd	r17, Z+17	; 0x11
    1f38:	e9 01       	movw	r28, r18
    1f3a:	1d 83       	std	Y+5, r17	; 0x05
    1f3c:	0c 83       	std	Y+4, r16	; 0x04
    1f3e:	20 89       	ldd	r18, Z+16	; 0x10
    1f40:	31 89       	ldd	r19, Z+17	; 0x11
    1f42:	06 85       	ldd	r16, Z+14	; 0x0e
    1f44:	17 85       	ldd	r17, Z+15	; 0x0f
    1f46:	e9 01       	movw	r28, r18
    1f48:	1b 83       	std	Y+3, r17	; 0x03
    1f4a:	0a 83       	std	Y+2, r16	; 0x02
    1f4c:	11 96       	adiw	r26, 0x01	; 1
    1f4e:	0d 91       	ld	r16, X+
    1f50:	1c 91       	ld	r17, X
    1f52:	12 97       	sbiw	r26, 0x02	; 2
    1f54:	9f 01       	movw	r18, r30
    1f56:	24 5f       	subi	r18, 0xF4	; 244
    1f58:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5a:	02 17       	cp	r16, r18
    1f5c:	13 07       	cpc	r17, r19
    1f5e:	31 f4       	brne	.+12     	; 0x1f6c <xTaskIncrementTick+0x148>
    1f60:	20 89       	ldd	r18, Z+16	; 0x10
    1f62:	31 89       	ldd	r19, Z+17	; 0x11
    1f64:	12 96       	adiw	r26, 0x02	; 2
    1f66:	3c 93       	st	X, r19
    1f68:	2e 93       	st	-X, r18
    1f6a:	11 97       	sbiw	r26, 0x01	; 1
    1f6c:	15 8a       	std	Z+21, r1	; 0x15
    1f6e:	14 8a       	std	Z+20, r1	; 0x14
    1f70:	9c 91       	ld	r25, X
    1f72:	91 50       	subi	r25, 0x01	; 1
    1f74:	9c 93       	st	X, r25
    1f76:	26 89       	ldd	r18, Z+22	; 0x16
    1f78:	90 91 51 03 	lds	r25, 0x0351	; 0x800351 <uxTopReadyPriority>
    1f7c:	92 17       	cp	r25, r18
    1f7e:	10 f4       	brcc	.+4      	; 0x1f84 <xTaskIncrementTick+0x160>
    1f80:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <uxTopReadyPriority>
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	d9 01       	movw	r26, r18
    1f88:	aa 0f       	add	r26, r26
    1f8a:	bb 1f       	adc	r27, r27
    1f8c:	aa 0f       	add	r26, r26
    1f8e:	bb 1f       	adc	r27, r27
    1f90:	aa 0f       	add	r26, r26
    1f92:	bb 1f       	adc	r27, r27
    1f94:	2a 0f       	add	r18, r26
    1f96:	3b 1f       	adc	r19, r27
    1f98:	d9 01       	movw	r26, r18
    1f9a:	a8 5a       	subi	r26, 0xA8	; 168
    1f9c:	bc 4f       	sbci	r27, 0xFC	; 252
    1f9e:	11 96       	adiw	r26, 0x01	; 1
    1fa0:	0d 90       	ld	r0, X+
    1fa2:	bc 91       	ld	r27, X
    1fa4:	a0 2d       	mov	r26, r0
    1fa6:	b5 83       	std	Z+5, r27	; 0x05
    1fa8:	a4 83       	std	Z+4, r26	; 0x04
    1faa:	14 96       	adiw	r26, 0x04	; 4
    1fac:	2d 91       	ld	r18, X+
    1fae:	3c 91       	ld	r19, X
    1fb0:	15 97       	sbiw	r26, 0x05	; 5
    1fb2:	37 83       	std	Z+7, r19	; 0x07
    1fb4:	26 83       	std	Z+6, r18	; 0x06
    1fb6:	14 96       	adiw	r26, 0x04	; 4
    1fb8:	2d 91       	ld	r18, X+
    1fba:	3c 91       	ld	r19, X
    1fbc:	15 97       	sbiw	r26, 0x05	; 5
    1fbe:	e9 01       	movw	r28, r18
    1fc0:	5b 83       	std	Y+3, r21	; 0x03
    1fc2:	4a 83       	std	Y+2, r20	; 0x02
    1fc4:	15 96       	adiw	r26, 0x05	; 5
    1fc6:	5c 93       	st	X, r21
    1fc8:	4e 93       	st	-X, r20
    1fca:	14 97       	sbiw	r26, 0x04	; 4
    1fcc:	a6 89       	ldd	r26, Z+22	; 0x16
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	9d 01       	movw	r18, r26
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	22 0f       	add	r18, r18
    1fd8:	33 1f       	adc	r19, r19
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	a2 0f       	add	r26, r18
    1fe0:	b3 1f       	adc	r27, r19
    1fe2:	a8 5a       	subi	r26, 0xA8	; 168
    1fe4:	bc 4f       	sbci	r27, 0xFC	; 252
    1fe6:	b3 87       	std	Z+11, r27	; 0x0b
    1fe8:	a2 87       	std	Z+10, r26	; 0x0a
    1fea:	9c 91       	ld	r25, X
    1fec:	9f 5f       	subi	r25, 0xFF	; 255
    1fee:	9c 93       	st	X, r25
    1ff0:	a0 91 7c 03 	lds	r26, 0x037C	; 0x80037c <pxCurrentTCB>
    1ff4:	b0 91 7d 03 	lds	r27, 0x037D	; 0x80037d <pxCurrentTCB+0x1>
    1ff8:	26 89       	ldd	r18, Z+22	; 0x16
    1ffa:	56 96       	adiw	r26, 0x16	; 22
    1ffc:	9c 91       	ld	r25, X
    1ffe:	92 17       	cp	r25, r18
    2000:	08 f0       	brcs	.+2      	; 0x2004 <xTaskIncrementTick+0x1e0>
    2002:	4b cf       	rjmp	.-362    	; 0x1e9a <xTaskIncrementTick+0x76>
    2004:	86 2f       	mov	r24, r22
    2006:	49 cf       	rjmp	.-366    	; 0x1e9a <xTaskIncrementTick+0x76>
    2008:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <pxCurrentTCB>
    200c:	f0 91 7d 03 	lds	r31, 0x037D	; 0x80037d <pxCurrentTCB+0x1>
    2010:	26 89       	ldd	r18, Z+22	; 0x16
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	f9 01       	movw	r30, r18
    2016:	ee 0f       	add	r30, r30
    2018:	ff 1f       	adc	r31, r31
    201a:	ee 0f       	add	r30, r30
    201c:	ff 1f       	adc	r31, r31
    201e:	ee 0f       	add	r30, r30
    2020:	ff 1f       	adc	r31, r31
    2022:	2e 0f       	add	r18, r30
    2024:	3f 1f       	adc	r19, r31
    2026:	f9 01       	movw	r30, r18
    2028:	e8 5a       	subi	r30, 0xA8	; 168
    202a:	fc 4f       	sbci	r31, 0xFC	; 252
    202c:	90 81       	ld	r25, Z
    202e:	92 30       	cpi	r25, 0x02	; 2
    2030:	08 f0       	brcs	.+2      	; 0x2034 <xTaskIncrementTick+0x210>
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	90 91 4e 03 	lds	r25, 0x034E	; 0x80034e <xYieldPending>
    2038:	99 23       	and	r25, r25
    203a:	61 f0       	breq	.+24     	; 0x2054 <xTaskIncrementTick+0x230>
    203c:	81 e0       	ldi	r24, 0x01	; 1
    203e:	0a c0       	rjmp	.+20     	; 0x2054 <xTaskIncrementTick+0x230>
    2040:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <xPendedTicks>
    2044:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <xPendedTicks+0x1>
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	90 93 50 03 	sts	0x0350, r25	; 0x800350 <xPendedTicks+0x1>
    204e:	80 93 4f 03 	sts	0x034F, r24	; 0x80034f <xPendedTicks>
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	df 91       	pop	r29
    2056:	cf 91       	pop	r28
    2058:	1f 91       	pop	r17
    205a:	0f 91       	pop	r16
    205c:	ff 90       	pop	r15
    205e:	ef 90       	pop	r14
    2060:	08 95       	ret

00002062 <vTaskSwitchContext>:
    2062:	80 91 4a 03 	lds	r24, 0x034A	; 0x80034a <uxSchedulerSuspended>
    2066:	88 23       	and	r24, r24
    2068:	21 f0       	breq	.+8      	; 0x2072 <vTaskSwitchContext+0x10>
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <xYieldPending>
    2070:	08 95       	ret
    2072:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <xYieldPending>
    2076:	20 91 51 03 	lds	r18, 0x0351	; 0x800351 <uxTopReadyPriority>
    207a:	82 2f       	mov	r24, r18
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	fc 01       	movw	r30, r24
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	ee 0f       	add	r30, r30
    2086:	ff 1f       	adc	r31, r31
    2088:	ee 0f       	add	r30, r30
    208a:	ff 1f       	adc	r31, r31
    208c:	e8 0f       	add	r30, r24
    208e:	f9 1f       	adc	r31, r25
    2090:	e8 5a       	subi	r30, 0xA8	; 168
    2092:	fc 4f       	sbci	r31, 0xFC	; 252
    2094:	30 81       	ld	r19, Z
    2096:	31 11       	cpse	r19, r1
    2098:	11 c0       	rjmp	.+34     	; 0x20bc <vTaskSwitchContext+0x5a>
    209a:	21 50       	subi	r18, 0x01	; 1
    209c:	82 2f       	mov	r24, r18
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	fc 01       	movw	r30, r24
    20a2:	ee 0f       	add	r30, r30
    20a4:	ff 1f       	adc	r31, r31
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	ee 0f       	add	r30, r30
    20ac:	ff 1f       	adc	r31, r31
    20ae:	e8 0f       	add	r30, r24
    20b0:	f9 1f       	adc	r31, r25
    20b2:	e8 5a       	subi	r30, 0xA8	; 168
    20b4:	fc 4f       	sbci	r31, 0xFC	; 252
    20b6:	30 81       	ld	r19, Z
    20b8:	33 23       	and	r19, r19
    20ba:	79 f3       	breq	.-34     	; 0x209a <vTaskSwitchContext+0x38>
    20bc:	ac 01       	movw	r20, r24
    20be:	44 0f       	add	r20, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	44 0f       	add	r20, r20
    20c4:	55 1f       	adc	r21, r21
    20c6:	44 0f       	add	r20, r20
    20c8:	55 1f       	adc	r21, r21
    20ca:	48 0f       	add	r20, r24
    20cc:	59 1f       	adc	r21, r25
    20ce:	da 01       	movw	r26, r20
    20d0:	a8 5a       	subi	r26, 0xA8	; 168
    20d2:	bc 4f       	sbci	r27, 0xFC	; 252
    20d4:	11 96       	adiw	r26, 0x01	; 1
    20d6:	ed 91       	ld	r30, X+
    20d8:	fc 91       	ld	r31, X
    20da:	12 97       	sbiw	r26, 0x02	; 2
    20dc:	02 80       	ldd	r0, Z+2	; 0x02
    20de:	f3 81       	ldd	r31, Z+3	; 0x03
    20e0:	e0 2d       	mov	r30, r0
    20e2:	12 96       	adiw	r26, 0x02	; 2
    20e4:	fc 93       	st	X, r31
    20e6:	ee 93       	st	-X, r30
    20e8:	11 97       	sbiw	r26, 0x01	; 1
    20ea:	45 5a       	subi	r20, 0xA5	; 165
    20ec:	5c 4f       	sbci	r21, 0xFC	; 252
    20ee:	e4 17       	cp	r30, r20
    20f0:	f5 07       	cpc	r31, r21
    20f2:	29 f4       	brne	.+10     	; 0x20fe <vTaskSwitchContext+0x9c>
    20f4:	42 81       	ldd	r20, Z+2	; 0x02
    20f6:	53 81       	ldd	r21, Z+3	; 0x03
    20f8:	fd 01       	movw	r30, r26
    20fa:	52 83       	std	Z+2, r21	; 0x02
    20fc:	41 83       	std	Z+1, r20	; 0x01
    20fe:	fc 01       	movw	r30, r24
    2100:	ee 0f       	add	r30, r30
    2102:	ff 1f       	adc	r31, r31
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	ee 0f       	add	r30, r30
    210a:	ff 1f       	adc	r31, r31
    210c:	8e 0f       	add	r24, r30
    210e:	9f 1f       	adc	r25, r31
    2110:	fc 01       	movw	r30, r24
    2112:	e8 5a       	subi	r30, 0xA8	; 168
    2114:	fc 4f       	sbci	r31, 0xFC	; 252
    2116:	01 80       	ldd	r0, Z+1	; 0x01
    2118:	f2 81       	ldd	r31, Z+2	; 0x02
    211a:	e0 2d       	mov	r30, r0
    211c:	86 81       	ldd	r24, Z+6	; 0x06
    211e:	97 81       	ldd	r25, Z+7	; 0x07
    2120:	90 93 7d 03 	sts	0x037D, r25	; 0x80037d <pxCurrentTCB+0x1>
    2124:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <pxCurrentTCB>
    2128:	20 93 51 03 	sts	0x0351, r18	; 0x800351 <uxTopReadyPriority>
    212c:	08 95       	ret

0000212e <vPortYieldFromTick>:
    212e:	0f 92       	push	r0
    2130:	0f b6       	in	r0, 0x3f	; 63
    2132:	f8 94       	cli
    2134:	0f 92       	push	r0
    2136:	1f 92       	push	r1
    2138:	11 24       	eor	r1, r1
    213a:	2f 92       	push	r2
    213c:	3f 92       	push	r3
    213e:	4f 92       	push	r4
    2140:	5f 92       	push	r5
    2142:	6f 92       	push	r6
    2144:	7f 92       	push	r7
    2146:	8f 92       	push	r8
    2148:	9f 92       	push	r9
    214a:	af 92       	push	r10
    214c:	bf 92       	push	r11
    214e:	cf 92       	push	r12
    2150:	df 92       	push	r13
    2152:	ef 92       	push	r14
    2154:	ff 92       	push	r15
    2156:	0f 93       	push	r16
    2158:	1f 93       	push	r17
    215a:	2f 93       	push	r18
    215c:	3f 93       	push	r19
    215e:	4f 93       	push	r20
    2160:	5f 93       	push	r21
    2162:	6f 93       	push	r22
    2164:	7f 93       	push	r23
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	ef 93       	push	r30
    2174:	ff 93       	push	r31
    2176:	a0 91 7c 03 	lds	r26, 0x037C	; 0x80037c <pxCurrentTCB>
    217a:	b0 91 7d 03 	lds	r27, 0x037D	; 0x80037d <pxCurrentTCB+0x1>
    217e:	0d b6       	in	r0, 0x3d	; 61
    2180:	0d 92       	st	X+, r0
    2182:	0e b6       	in	r0, 0x3e	; 62
    2184:	0d 92       	st	X+, r0
    2186:	0e 94 12 0f 	call	0x1e24	; 0x1e24 <xTaskIncrementTick>
    218a:	81 11       	cpse	r24, r1
    218c:	0e 94 31 10 	call	0x2062	; 0x2062 <vTaskSwitchContext>
    2190:	a0 91 7c 03 	lds	r26, 0x037C	; 0x80037c <pxCurrentTCB>
    2194:	b0 91 7d 03 	lds	r27, 0x037D	; 0x80037d <pxCurrentTCB+0x1>
    2198:	cd 91       	ld	r28, X+
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	dd 91       	ld	r29, X+
    219e:	de bf       	out	0x3e, r29	; 62
    21a0:	ff 91       	pop	r31
    21a2:	ef 91       	pop	r30
    21a4:	df 91       	pop	r29
    21a6:	cf 91       	pop	r28
    21a8:	bf 91       	pop	r27
    21aa:	af 91       	pop	r26
    21ac:	9f 91       	pop	r25
    21ae:	8f 91       	pop	r24
    21b0:	7f 91       	pop	r23
    21b2:	6f 91       	pop	r22
    21b4:	5f 91       	pop	r21
    21b6:	4f 91       	pop	r20
    21b8:	3f 91       	pop	r19
    21ba:	2f 91       	pop	r18
    21bc:	1f 91       	pop	r17
    21be:	0f 91       	pop	r16
    21c0:	ff 90       	pop	r15
    21c2:	ef 90       	pop	r14
    21c4:	df 90       	pop	r13
    21c6:	cf 90       	pop	r12
    21c8:	bf 90       	pop	r11
    21ca:	af 90       	pop	r10
    21cc:	9f 90       	pop	r9
    21ce:	8f 90       	pop	r8
    21d0:	7f 90       	pop	r7
    21d2:	6f 90       	pop	r6
    21d4:	5f 90       	pop	r5
    21d6:	4f 90       	pop	r4
    21d8:	3f 90       	pop	r3
    21da:	2f 90       	pop	r2
    21dc:	1f 90       	pop	r1
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	0f 90       	pop	r0
    21e4:	08 95       	ret

000021e6 <__vector_7>:
    21e6:	0e 94 97 10 	call	0x212e	; 0x212e <vPortYieldFromTick>
    21ea:	18 95       	reti

000021ec <__fixunssfsi>:
    21ec:	0e 94 92 11 	call	0x2324	; 0x2324 <__fp_splitA>
    21f0:	88 f0       	brcs	.+34     	; 0x2214 <__fixunssfsi+0x28>
    21f2:	9f 57       	subi	r25, 0x7F	; 127
    21f4:	98 f0       	brcs	.+38     	; 0x221c <__fixunssfsi+0x30>
    21f6:	b9 2f       	mov	r27, r25
    21f8:	99 27       	eor	r25, r25
    21fa:	b7 51       	subi	r27, 0x17	; 23
    21fc:	b0 f0       	brcs	.+44     	; 0x222a <__fixunssfsi+0x3e>
    21fe:	e1 f0       	breq	.+56     	; 0x2238 <__fixunssfsi+0x4c>
    2200:	66 0f       	add	r22, r22
    2202:	77 1f       	adc	r23, r23
    2204:	88 1f       	adc	r24, r24
    2206:	99 1f       	adc	r25, r25
    2208:	1a f0       	brmi	.+6      	; 0x2210 <__fixunssfsi+0x24>
    220a:	ba 95       	dec	r27
    220c:	c9 f7       	brne	.-14     	; 0x2200 <__fixunssfsi+0x14>
    220e:	14 c0       	rjmp	.+40     	; 0x2238 <__fixunssfsi+0x4c>
    2210:	b1 30       	cpi	r27, 0x01	; 1
    2212:	91 f0       	breq	.+36     	; 0x2238 <__fixunssfsi+0x4c>
    2214:	0e 94 ac 11 	call	0x2358	; 0x2358 <__fp_zero>
    2218:	b1 e0       	ldi	r27, 0x01	; 1
    221a:	08 95       	ret
    221c:	0c 94 ac 11 	jmp	0x2358	; 0x2358 <__fp_zero>
    2220:	67 2f       	mov	r22, r23
    2222:	78 2f       	mov	r23, r24
    2224:	88 27       	eor	r24, r24
    2226:	b8 5f       	subi	r27, 0xF8	; 248
    2228:	39 f0       	breq	.+14     	; 0x2238 <__fixunssfsi+0x4c>
    222a:	b9 3f       	cpi	r27, 0xF9	; 249
    222c:	cc f3       	brlt	.-14     	; 0x2220 <__fixunssfsi+0x34>
    222e:	86 95       	lsr	r24
    2230:	77 95       	ror	r23
    2232:	67 95       	ror	r22
    2234:	b3 95       	inc	r27
    2236:	d9 f7       	brne	.-10     	; 0x222e <__fixunssfsi+0x42>
    2238:	3e f4       	brtc	.+14     	; 0x2248 <__fixunssfsi+0x5c>
    223a:	90 95       	com	r25
    223c:	80 95       	com	r24
    223e:	70 95       	com	r23
    2240:	61 95       	neg	r22
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8f 4f       	sbci	r24, 0xFF	; 255
    2246:	9f 4f       	sbci	r25, 0xFF	; 255
    2248:	08 95       	ret

0000224a <__floatunsisf>:
    224a:	e8 94       	clt
    224c:	09 c0       	rjmp	.+18     	; 0x2260 <__floatsisf+0x12>

0000224e <__floatsisf>:
    224e:	97 fb       	bst	r25, 7
    2250:	3e f4       	brtc	.+14     	; 0x2260 <__floatsisf+0x12>
    2252:	90 95       	com	r25
    2254:	80 95       	com	r24
    2256:	70 95       	com	r23
    2258:	61 95       	neg	r22
    225a:	7f 4f       	sbci	r23, 0xFF	; 255
    225c:	8f 4f       	sbci	r24, 0xFF	; 255
    225e:	9f 4f       	sbci	r25, 0xFF	; 255
    2260:	99 23       	and	r25, r25
    2262:	a9 f0       	breq	.+42     	; 0x228e <__floatsisf+0x40>
    2264:	f9 2f       	mov	r31, r25
    2266:	96 e9       	ldi	r25, 0x96	; 150
    2268:	bb 27       	eor	r27, r27
    226a:	93 95       	inc	r25
    226c:	f6 95       	lsr	r31
    226e:	87 95       	ror	r24
    2270:	77 95       	ror	r23
    2272:	67 95       	ror	r22
    2274:	b7 95       	ror	r27
    2276:	f1 11       	cpse	r31, r1
    2278:	f8 cf       	rjmp	.-16     	; 0x226a <__floatsisf+0x1c>
    227a:	fa f4       	brpl	.+62     	; 0x22ba <__floatsisf+0x6c>
    227c:	bb 0f       	add	r27, r27
    227e:	11 f4       	brne	.+4      	; 0x2284 <__floatsisf+0x36>
    2280:	60 ff       	sbrs	r22, 0
    2282:	1b c0       	rjmp	.+54     	; 0x22ba <__floatsisf+0x6c>
    2284:	6f 5f       	subi	r22, 0xFF	; 255
    2286:	7f 4f       	sbci	r23, 0xFF	; 255
    2288:	8f 4f       	sbci	r24, 0xFF	; 255
    228a:	9f 4f       	sbci	r25, 0xFF	; 255
    228c:	16 c0       	rjmp	.+44     	; 0x22ba <__floatsisf+0x6c>
    228e:	88 23       	and	r24, r24
    2290:	11 f0       	breq	.+4      	; 0x2296 <__floatsisf+0x48>
    2292:	96 e9       	ldi	r25, 0x96	; 150
    2294:	11 c0       	rjmp	.+34     	; 0x22b8 <__floatsisf+0x6a>
    2296:	77 23       	and	r23, r23
    2298:	21 f0       	breq	.+8      	; 0x22a2 <__floatsisf+0x54>
    229a:	9e e8       	ldi	r25, 0x8E	; 142
    229c:	87 2f       	mov	r24, r23
    229e:	76 2f       	mov	r23, r22
    22a0:	05 c0       	rjmp	.+10     	; 0x22ac <__floatsisf+0x5e>
    22a2:	66 23       	and	r22, r22
    22a4:	71 f0       	breq	.+28     	; 0x22c2 <__floatsisf+0x74>
    22a6:	96 e8       	ldi	r25, 0x86	; 134
    22a8:	86 2f       	mov	r24, r22
    22aa:	70 e0       	ldi	r23, 0x00	; 0
    22ac:	60 e0       	ldi	r22, 0x00	; 0
    22ae:	2a f0       	brmi	.+10     	; 0x22ba <__floatsisf+0x6c>
    22b0:	9a 95       	dec	r25
    22b2:	66 0f       	add	r22, r22
    22b4:	77 1f       	adc	r23, r23
    22b6:	88 1f       	adc	r24, r24
    22b8:	da f7       	brpl	.-10     	; 0x22b0 <__floatsisf+0x62>
    22ba:	88 0f       	add	r24, r24
    22bc:	96 95       	lsr	r25
    22be:	87 95       	ror	r24
    22c0:	97 f9       	bld	r25, 7
    22c2:	08 95       	ret

000022c4 <__fp_inf>:
    22c4:	97 f9       	bld	r25, 7
    22c6:	9f 67       	ori	r25, 0x7F	; 127
    22c8:	80 e8       	ldi	r24, 0x80	; 128
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	08 95       	ret

000022d0 <__fp_nan>:
    22d0:	9f ef       	ldi	r25, 0xFF	; 255
    22d2:	80 ec       	ldi	r24, 0xC0	; 192
    22d4:	08 95       	ret

000022d6 <__fp_pscA>:
    22d6:	00 24       	eor	r0, r0
    22d8:	0a 94       	dec	r0
    22da:	16 16       	cp	r1, r22
    22dc:	17 06       	cpc	r1, r23
    22de:	18 06       	cpc	r1, r24
    22e0:	09 06       	cpc	r0, r25
    22e2:	08 95       	ret

000022e4 <__fp_pscB>:
    22e4:	00 24       	eor	r0, r0
    22e6:	0a 94       	dec	r0
    22e8:	12 16       	cp	r1, r18
    22ea:	13 06       	cpc	r1, r19
    22ec:	14 06       	cpc	r1, r20
    22ee:	05 06       	cpc	r0, r21
    22f0:	08 95       	ret

000022f2 <__fp_round>:
    22f2:	09 2e       	mov	r0, r25
    22f4:	03 94       	inc	r0
    22f6:	00 0c       	add	r0, r0
    22f8:	11 f4       	brne	.+4      	; 0x22fe <__fp_round+0xc>
    22fa:	88 23       	and	r24, r24
    22fc:	52 f0       	brmi	.+20     	; 0x2312 <__fp_round+0x20>
    22fe:	bb 0f       	add	r27, r27
    2300:	40 f4       	brcc	.+16     	; 0x2312 <__fp_round+0x20>
    2302:	bf 2b       	or	r27, r31
    2304:	11 f4       	brne	.+4      	; 0x230a <__fp_round+0x18>
    2306:	60 ff       	sbrs	r22, 0
    2308:	04 c0       	rjmp	.+8      	; 0x2312 <__fp_round+0x20>
    230a:	6f 5f       	subi	r22, 0xFF	; 255
    230c:	7f 4f       	sbci	r23, 0xFF	; 255
    230e:	8f 4f       	sbci	r24, 0xFF	; 255
    2310:	9f 4f       	sbci	r25, 0xFF	; 255
    2312:	08 95       	ret

00002314 <__fp_split3>:
    2314:	57 fd       	sbrc	r21, 7
    2316:	90 58       	subi	r25, 0x80	; 128
    2318:	44 0f       	add	r20, r20
    231a:	55 1f       	adc	r21, r21
    231c:	59 f0       	breq	.+22     	; 0x2334 <__fp_splitA+0x10>
    231e:	5f 3f       	cpi	r21, 0xFF	; 255
    2320:	71 f0       	breq	.+28     	; 0x233e <__fp_splitA+0x1a>
    2322:	47 95       	ror	r20

00002324 <__fp_splitA>:
    2324:	88 0f       	add	r24, r24
    2326:	97 fb       	bst	r25, 7
    2328:	99 1f       	adc	r25, r25
    232a:	61 f0       	breq	.+24     	; 0x2344 <__fp_splitA+0x20>
    232c:	9f 3f       	cpi	r25, 0xFF	; 255
    232e:	79 f0       	breq	.+30     	; 0x234e <__fp_splitA+0x2a>
    2330:	87 95       	ror	r24
    2332:	08 95       	ret
    2334:	12 16       	cp	r1, r18
    2336:	13 06       	cpc	r1, r19
    2338:	14 06       	cpc	r1, r20
    233a:	55 1f       	adc	r21, r21
    233c:	f2 cf       	rjmp	.-28     	; 0x2322 <__fp_split3+0xe>
    233e:	46 95       	lsr	r20
    2340:	f1 df       	rcall	.-30     	; 0x2324 <__fp_splitA>
    2342:	08 c0       	rjmp	.+16     	; 0x2354 <__fp_splitA+0x30>
    2344:	16 16       	cp	r1, r22
    2346:	17 06       	cpc	r1, r23
    2348:	18 06       	cpc	r1, r24
    234a:	99 1f       	adc	r25, r25
    234c:	f1 cf       	rjmp	.-30     	; 0x2330 <__fp_splitA+0xc>
    234e:	86 95       	lsr	r24
    2350:	71 05       	cpc	r23, r1
    2352:	61 05       	cpc	r22, r1
    2354:	08 94       	sec
    2356:	08 95       	ret

00002358 <__fp_zero>:
    2358:	e8 94       	clt

0000235a <__fp_szero>:
    235a:	bb 27       	eor	r27, r27
    235c:	66 27       	eor	r22, r22
    235e:	77 27       	eor	r23, r23
    2360:	cb 01       	movw	r24, r22
    2362:	97 f9       	bld	r25, 7
    2364:	08 95       	ret

00002366 <__mulsf3>:
    2366:	0e 94 c6 11 	call	0x238c	; 0x238c <__mulsf3x>
    236a:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__fp_round>
    236e:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <__fp_pscA>
    2372:	38 f0       	brcs	.+14     	; 0x2382 <__mulsf3+0x1c>
    2374:	0e 94 72 11 	call	0x22e4	; 0x22e4 <__fp_pscB>
    2378:	20 f0       	brcs	.+8      	; 0x2382 <__mulsf3+0x1c>
    237a:	95 23       	and	r25, r21
    237c:	11 f0       	breq	.+4      	; 0x2382 <__mulsf3+0x1c>
    237e:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__fp_inf>
    2382:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__fp_nan>
    2386:	11 24       	eor	r1, r1
    2388:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__fp_szero>

0000238c <__mulsf3x>:
    238c:	0e 94 8a 11 	call	0x2314	; 0x2314 <__fp_split3>
    2390:	70 f3       	brcs	.-36     	; 0x236e <__mulsf3+0x8>

00002392 <__mulsf3_pse>:
    2392:	95 9f       	mul	r25, r21
    2394:	c1 f3       	breq	.-16     	; 0x2386 <__mulsf3+0x20>
    2396:	95 0f       	add	r25, r21
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	55 1f       	adc	r21, r21
    239c:	62 9f       	mul	r22, r18
    239e:	f0 01       	movw	r30, r0
    23a0:	72 9f       	mul	r23, r18
    23a2:	bb 27       	eor	r27, r27
    23a4:	f0 0d       	add	r31, r0
    23a6:	b1 1d       	adc	r27, r1
    23a8:	63 9f       	mul	r22, r19
    23aa:	aa 27       	eor	r26, r26
    23ac:	f0 0d       	add	r31, r0
    23ae:	b1 1d       	adc	r27, r1
    23b0:	aa 1f       	adc	r26, r26
    23b2:	64 9f       	mul	r22, r20
    23b4:	66 27       	eor	r22, r22
    23b6:	b0 0d       	add	r27, r0
    23b8:	a1 1d       	adc	r26, r1
    23ba:	66 1f       	adc	r22, r22
    23bc:	82 9f       	mul	r24, r18
    23be:	22 27       	eor	r18, r18
    23c0:	b0 0d       	add	r27, r0
    23c2:	a1 1d       	adc	r26, r1
    23c4:	62 1f       	adc	r22, r18
    23c6:	73 9f       	mul	r23, r19
    23c8:	b0 0d       	add	r27, r0
    23ca:	a1 1d       	adc	r26, r1
    23cc:	62 1f       	adc	r22, r18
    23ce:	83 9f       	mul	r24, r19
    23d0:	a0 0d       	add	r26, r0
    23d2:	61 1d       	adc	r22, r1
    23d4:	22 1f       	adc	r18, r18
    23d6:	74 9f       	mul	r23, r20
    23d8:	33 27       	eor	r19, r19
    23da:	a0 0d       	add	r26, r0
    23dc:	61 1d       	adc	r22, r1
    23de:	23 1f       	adc	r18, r19
    23e0:	84 9f       	mul	r24, r20
    23e2:	60 0d       	add	r22, r0
    23e4:	21 1d       	adc	r18, r1
    23e6:	82 2f       	mov	r24, r18
    23e8:	76 2f       	mov	r23, r22
    23ea:	6a 2f       	mov	r22, r26
    23ec:	11 24       	eor	r1, r1
    23ee:	9f 57       	subi	r25, 0x7F	; 127
    23f0:	50 40       	sbci	r21, 0x00	; 0
    23f2:	9a f0       	brmi	.+38     	; 0x241a <__mulsf3_pse+0x88>
    23f4:	f1 f0       	breq	.+60     	; 0x2432 <__mulsf3_pse+0xa0>
    23f6:	88 23       	and	r24, r24
    23f8:	4a f0       	brmi	.+18     	; 0x240c <__mulsf3_pse+0x7a>
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	bb 1f       	adc	r27, r27
    2400:	66 1f       	adc	r22, r22
    2402:	77 1f       	adc	r23, r23
    2404:	88 1f       	adc	r24, r24
    2406:	91 50       	subi	r25, 0x01	; 1
    2408:	50 40       	sbci	r21, 0x00	; 0
    240a:	a9 f7       	brne	.-22     	; 0x23f6 <__mulsf3_pse+0x64>
    240c:	9e 3f       	cpi	r25, 0xFE	; 254
    240e:	51 05       	cpc	r21, r1
    2410:	80 f0       	brcs	.+32     	; 0x2432 <__mulsf3_pse+0xa0>
    2412:	0c 94 62 11 	jmp	0x22c4	; 0x22c4 <__fp_inf>
    2416:	0c 94 ad 11 	jmp	0x235a	; 0x235a <__fp_szero>
    241a:	5f 3f       	cpi	r21, 0xFF	; 255
    241c:	e4 f3       	brlt	.-8      	; 0x2416 <__mulsf3_pse+0x84>
    241e:	98 3e       	cpi	r25, 0xE8	; 232
    2420:	d4 f3       	brlt	.-12     	; 0x2416 <__mulsf3_pse+0x84>
    2422:	86 95       	lsr	r24
    2424:	77 95       	ror	r23
    2426:	67 95       	ror	r22
    2428:	b7 95       	ror	r27
    242a:	f7 95       	ror	r31
    242c:	e7 95       	ror	r30
    242e:	9f 5f       	subi	r25, 0xFF	; 255
    2430:	c1 f7       	brne	.-16     	; 0x2422 <__mulsf3_pse+0x90>
    2432:	fe 2b       	or	r31, r30
    2434:	88 0f       	add	r24, r24
    2436:	91 1d       	adc	r25, r1
    2438:	96 95       	lsr	r25
    243a:	87 95       	ror	r24
    243c:	97 f9       	bld	r25, 7
    243e:	08 95       	ret

00002440 <__udivmodsi4>:
    2440:	a1 e2       	ldi	r26, 0x21	; 33
    2442:	1a 2e       	mov	r1, r26
    2444:	aa 1b       	sub	r26, r26
    2446:	bb 1b       	sub	r27, r27
    2448:	fd 01       	movw	r30, r26
    244a:	0d c0       	rjmp	.+26     	; 0x2466 <__udivmodsi4_ep>

0000244c <__udivmodsi4_loop>:
    244c:	aa 1f       	adc	r26, r26
    244e:	bb 1f       	adc	r27, r27
    2450:	ee 1f       	adc	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	a2 17       	cp	r26, r18
    2456:	b3 07       	cpc	r27, r19
    2458:	e4 07       	cpc	r30, r20
    245a:	f5 07       	cpc	r31, r21
    245c:	20 f0       	brcs	.+8      	; 0x2466 <__udivmodsi4_ep>
    245e:	a2 1b       	sub	r26, r18
    2460:	b3 0b       	sbc	r27, r19
    2462:	e4 0b       	sbc	r30, r20
    2464:	f5 0b       	sbc	r31, r21

00002466 <__udivmodsi4_ep>:
    2466:	66 1f       	adc	r22, r22
    2468:	77 1f       	adc	r23, r23
    246a:	88 1f       	adc	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	1a 94       	dec	r1
    2470:	69 f7       	brne	.-38     	; 0x244c <__udivmodsi4_loop>
    2472:	60 95       	com	r22
    2474:	70 95       	com	r23
    2476:	80 95       	com	r24
    2478:	90 95       	com	r25
    247a:	9b 01       	movw	r18, r22
    247c:	ac 01       	movw	r20, r24
    247e:	bd 01       	movw	r22, r26
    2480:	cf 01       	movw	r24, r30
    2482:	08 95       	ret

00002484 <__tablejump2__>:
    2484:	ee 0f       	add	r30, r30
    2486:	ff 1f       	adc	r31, r31
    2488:	05 90       	lpm	r0, Z+
    248a:	f4 91       	lpm	r31, Z
    248c:	e0 2d       	mov	r30, r0
    248e:	09 94       	ijmp

00002490 <memcmp>:
    2490:	fb 01       	movw	r30, r22
    2492:	dc 01       	movw	r26, r24
    2494:	04 c0       	rjmp	.+8      	; 0x249e <memcmp+0xe>
    2496:	8d 91       	ld	r24, X+
    2498:	01 90       	ld	r0, Z+
    249a:	80 19       	sub	r24, r0
    249c:	21 f4       	brne	.+8      	; 0x24a6 <memcmp+0x16>
    249e:	41 50       	subi	r20, 0x01	; 1
    24a0:	50 40       	sbci	r21, 0x00	; 0
    24a2:	c8 f7       	brcc	.-14     	; 0x2496 <memcmp+0x6>
    24a4:	88 1b       	sub	r24, r24
    24a6:	99 0b       	sbc	r25, r25
    24a8:	08 95       	ret

000024aa <__itoa_ncheck>:
    24aa:	bb 27       	eor	r27, r27
    24ac:	4a 30       	cpi	r20, 0x0A	; 10
    24ae:	31 f4       	brne	.+12     	; 0x24bc <__itoa_ncheck+0x12>
    24b0:	99 23       	and	r25, r25
    24b2:	22 f4       	brpl	.+8      	; 0x24bc <__itoa_ncheck+0x12>
    24b4:	bd e2       	ldi	r27, 0x2D	; 45
    24b6:	90 95       	com	r25
    24b8:	81 95       	neg	r24
    24ba:	9f 4f       	sbci	r25, 0xFF	; 255
    24bc:	0c 94 61 12 	jmp	0x24c2	; 0x24c2 <__utoa_common>

000024c0 <__utoa_ncheck>:
    24c0:	bb 27       	eor	r27, r27

000024c2 <__utoa_common>:
    24c2:	fb 01       	movw	r30, r22
    24c4:	55 27       	eor	r21, r21
    24c6:	aa 27       	eor	r26, r26
    24c8:	88 0f       	add	r24, r24
    24ca:	99 1f       	adc	r25, r25
    24cc:	aa 1f       	adc	r26, r26
    24ce:	a4 17       	cp	r26, r20
    24d0:	10 f0       	brcs	.+4      	; 0x24d6 <__utoa_common+0x14>
    24d2:	a4 1b       	sub	r26, r20
    24d4:	83 95       	inc	r24
    24d6:	50 51       	subi	r21, 0x10	; 16
    24d8:	b9 f7       	brne	.-18     	; 0x24c8 <__utoa_common+0x6>
    24da:	a0 5d       	subi	r26, 0xD0	; 208
    24dc:	aa 33       	cpi	r26, 0x3A	; 58
    24de:	08 f0       	brcs	.+2      	; 0x24e2 <__utoa_common+0x20>
    24e0:	a9 5d       	subi	r26, 0xD9	; 217
    24e2:	a1 93       	st	Z+, r26
    24e4:	00 97       	sbiw	r24, 0x00	; 0
    24e6:	79 f7       	brne	.-34     	; 0x24c6 <__utoa_common+0x4>
    24e8:	b1 11       	cpse	r27, r1
    24ea:	b1 93       	st	Z+, r27
    24ec:	11 92       	st	Z+, r1
    24ee:	cb 01       	movw	r24, r22
    24f0:	0c 94 7a 12 	jmp	0x24f4	; 0x24f4 <strrev>

000024f4 <strrev>:
    24f4:	dc 01       	movw	r26, r24
    24f6:	fc 01       	movw	r30, r24
    24f8:	67 2f       	mov	r22, r23
    24fa:	71 91       	ld	r23, Z+
    24fc:	77 23       	and	r23, r23
    24fe:	e1 f7       	brne	.-8      	; 0x24f8 <strrev+0x4>
    2500:	32 97       	sbiw	r30, 0x02	; 2
    2502:	04 c0       	rjmp	.+8      	; 0x250c <strrev+0x18>
    2504:	7c 91       	ld	r23, X
    2506:	6d 93       	st	X+, r22
    2508:	70 83       	st	Z, r23
    250a:	62 91       	ld	r22, -Z
    250c:	ae 17       	cp	r26, r30
    250e:	bf 07       	cpc	r27, r31
    2510:	c8 f3       	brcs	.-14     	; 0x2504 <strrev+0x10>
    2512:	08 95       	ret

00002514 <_exit>:
    2514:	f8 94       	cli

00002516 <__stop_program>:
    2516:	ff cf       	rjmp	.-2      	; 0x2516 <__stop_program>
