
Mohandseen_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000048e  00800060  000026f2  00002786  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  008004ee  008004ee  00002c14  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002c44  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004c0  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000086e6  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ad5  00000000  00000000  0000b826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000391d  00000000  00000000  0000d2fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c74  00000000  00000000  00010c18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023fa  00000000  00000000  0001188c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005764  00000000  00000000  00013c86  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000580  00000000  00000000  000193ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 75 00 	jmp	0xea	; 0xea <__ctors_end>
       4:	0c 94 e1 0d 	jmp	0x1bc2	; 0x1bc2 <__vector_1>
       8:	0c 94 08 0e 	jmp	0x1c10	; 0x1c10 <__vector_2>
       c:	0c 94 2f 0e 	jmp	0x1c5e	; 0x1c5e <__vector_3>
      10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      18:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <__vector_6>
      1c:	0c 94 b0 11 	jmp	0x2360	; 0x2360 <__vector_7>
      20:	0c 94 d1 0e 	jmp	0x1da2	; 0x1da2 <__vector_8>
      24:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__vector_9>
      28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      2c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      30:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
      54:	ad 04       	cpc	r10, r13
      56:	3a 05       	cpc	r19, r10
      58:	f8 05       	cpc	r31, r8
      5a:	01 06       	cpc	r0, r17
      5c:	0a 06       	cpc	r0, r26
      5e:	13 06       	cpc	r1, r19
      60:	1d 07       	cpc	r17, r29
      62:	bd 05       	cpc	r27, r13
      64:	26 07       	cpc	r18, r22
      66:	2f 07       	cpc	r18, r31
      68:	21 06       	cpc	r2, r17
      6a:	82 05       	cpc	r24, r2
      6c:	ab 06       	cpc	r10, r27
      6e:	9b 08       	sbc	r9, r11
      70:	ac 08       	sbc	r10, r12
      72:	bd 08       	sbc	r11, r13
      74:	ce 08       	sbc	r12, r14
      76:	df 08       	sbc	r13, r15
      78:	08 09       	sbc	r16, r8
      7a:	f0 08       	sbc	r15, r0
      7c:	08 09       	sbc	r16, r8
      7e:	08 09       	sbc	r16, r8
      80:	08 09       	sbc	r16, r8
      82:	08 09       	sbc	r16, r8
      84:	08 09       	sbc	r16, r8
      86:	08 09       	sbc	r16, r8
      88:	08 09       	sbc	r16, r8
      8a:	08 09       	sbc	r16, r8
      8c:	08 09       	sbc	r16, r8
      8e:	08 09       	sbc	r16, r8
      90:	08 09       	sbc	r16, r8
      92:	08 09       	sbc	r16, r8
      94:	08 09       	sbc	r16, r8
      96:	08 09       	sbc	r16, r8
      98:	08 09       	sbc	r16, r8
      9a:	08 09       	sbc	r16, r8
      9c:	08 09       	sbc	r16, r8
      9e:	08 09       	sbc	r16, r8
      a0:	08 09       	sbc	r16, r8
      a2:	08 09       	sbc	r16, r8
      a4:	08 09       	sbc	r16, r8
      a6:	08 09       	sbc	r16, r8
      a8:	08 09       	sbc	r16, r8
      aa:	08 09       	sbc	r16, r8
      ac:	08 09       	sbc	r16, r8
      ae:	08 09       	sbc	r16, r8
      b0:	08 09       	sbc	r16, r8
      b2:	08 09       	sbc	r16, r8
      b4:	08 09       	sbc	r16, r8
      b6:	08 09       	sbc	r16, r8
      b8:	08 09       	sbc	r16, r8
      ba:	08 09       	sbc	r16, r8
      bc:	08 09       	sbc	r16, r8
      be:	08 09       	sbc	r16, r8
      c0:	08 09       	sbc	r16, r8
      c2:	08 09       	sbc	r16, r8
      c4:	08 09       	sbc	r16, r8
      c6:	08 09       	sbc	r16, r8
      c8:	08 09       	sbc	r16, r8
      ca:	08 09       	sbc	r16, r8
      cc:	08 09       	sbc	r16, r8
      ce:	08 09       	sbc	r16, r8
      d0:	08 09       	sbc	r16, r8
      d2:	08 09       	sbc	r16, r8
      d4:	08 09       	sbc	r16, r8
      d6:	08 09       	sbc	r16, r8
      d8:	08 09       	sbc	r16, r8
      da:	08 09       	sbc	r16, r8
      dc:	08 09       	sbc	r16, r8
      de:	08 09       	sbc	r16, r8
      e0:	08 09       	sbc	r16, r8
      e2:	08 09       	sbc	r16, r8
      e4:	08 09       	sbc	r16, r8
      e6:	08 09       	sbc	r16, r8
      e8:	01 09       	sbc	r16, r1

000000ea <__ctors_end>:
      ea:	11 24       	eor	r1, r1
      ec:	1f be       	out	0x3f, r1	; 63
      ee:	cf e5       	ldi	r28, 0x5F	; 95
      f0:	d8 e0       	ldi	r29, 0x08	; 8
      f2:	de bf       	out	0x3e, r29	; 62
      f4:	cd bf       	out	0x3d, r28	; 61

000000f6 <__do_copy_data>:
      f6:	14 e0       	ldi	r17, 0x04	; 4
      f8:	a0 e6       	ldi	r26, 0x60	; 96
      fa:	b0 e0       	ldi	r27, 0x00	; 0
      fc:	e2 ef       	ldi	r30, 0xF2	; 242
      fe:	f6 e2       	ldi	r31, 0x26	; 38
     100:	02 c0       	rjmp	.+4      	; 0x106 <__do_copy_data+0x10>
     102:	05 90       	lpm	r0, Z+
     104:	0d 92       	st	X+, r0
     106:	ae 3e       	cpi	r26, 0xEE	; 238
     108:	b1 07       	cpc	r27, r17
     10a:	d9 f7       	brne	.-10     	; 0x102 <__do_copy_data+0xc>

0000010c <__do_clear_bss>:
     10c:	25 e0       	ldi	r18, 0x05	; 5
     10e:	ae ee       	ldi	r26, 0xEE	; 238
     110:	b4 e0       	ldi	r27, 0x04	; 4
     112:	01 c0       	rjmp	.+2      	; 0x116 <.do_clear_bss_start>

00000114 <.do_clear_bss_loop>:
     114:	1d 92       	st	X+, r1

00000116 <.do_clear_bss_start>:
     116:	af 33       	cpi	r26, 0x3F	; 63
     118:	b2 07       	cpc	r27, r18
     11a:	e1 f7       	brne	.-8      	; 0x114 <.do_clear_bss_loop>
     11c:	0e 94 b1 00 	call	0x162	; 0x162 <main>
     120:	0c 94 77 13 	jmp	0x26ee	; 0x26ee <_exit>

00000124 <__bad_interrupt>:
     124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <ExtInt0Fun>:
		}//End of while that repeats the menu after each successful action till session timeout
	}// end of the main while(1)
}//end of main function

void ExtInt0Fun(void) {//INterupt function to handle Temp when system on 
	advvalue = LM35_Read(ADC_Channel0);
     128:	80 e0       	ldi	r24, 0x00	; 0
     12a:	0e 94 56 0b 	call	0x16ac	; 0x16ac <LM35_Read>
     12e:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <__data_end+0x1>
     132:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <__data_end>
	if (advvalue >= required_temperature ) {
     136:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     13a:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     13e:	82 17       	cp	r24, r18
     140:	93 07       	cpc	r25, r19
     142:	40 f0       	brcs	.+16     	; 0x154 <ExtInt0Fun+0x2c>
		DIO_WriteChannel(DIO_ChannelB7, STD_High);
     144:	61 e0       	ldi	r22, 0x01	; 1
     146:	8f e0       	ldi	r24, 0x0F	; 15
     148:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
		last_air_conditioning_value = AIR_CONDTIONING_ON;
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <last_air_conditioning_value>
     152:	08 95       	ret
	} else if(advvalue <= required_temperature)
	{
		DIO_WriteChannel(DIO_ChannelB7, STD_Low);
     154:	60 e0       	ldi	r22, 0x00	; 0
     156:	8f e0       	ldi	r24, 0x0F	; 15
     158:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
		last_air_conditioning_value = AIR_CONDTIONING_OFF;
     15c:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <last_air_conditioning_value>
     160:	08 95       	ret

00000162 <main>:
u16 required_temperature=24;



int main(void)
{
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	2b 97       	sbiw	r28, 0x0b	; 11
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
	u8 block_mode_flag = FALSE;
	u8 key_pressed  = NOT_PRESSED;
	u8 rxdata = 0;
	
	/*****************  INITIALIZE  **********************************************/
	Bluetooth_Init(&option);
     176:	84 e6       	ldi	r24, 0x64	; 100
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	0e 94 8d 09 	call	0x131a	; 0x131a <Bluetooth_Init>
	DIO_ConfigChannel(DIO_ChannelB3,Output);
     17e:	61 e0       	ldi	r22, 0x01	; 1
     180:	8b e0       	ldi	r24, 0x0B	; 11
     182:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelD2,Input);
     186:	60 e0       	ldi	r22, 0x00	; 0
     188:	8a e1       	ldi	r24, 0x1A	; 26
     18a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_ConfigChannel>
	LM35_Init(&options);
     18e:	82 e6       	ldi	r24, 0x62	; 98
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <LM35_Init>
	DIO_Init();
     196:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <DIO_Init>
	Keypad_Init();
     19a:	0e 94 de 09 	call	0x13bc	; 0x13bc <Keypad_Init>
	LCD_Init();
     19e:	0e 94 b9 0a 	call	0x1572	; 0x1572 <LCD_Init>
	
	Ext_Interrupt_SetCallBack(Ext_INT0,ExtInt0Fun);
     1a2:	64 e9       	ldi	r22, 0x94	; 148
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <Ext_Interrupt_SetCallBack>
	Ext_Interrupt_Sncontrol(Ext_INT0,Rising_Edge);
     1ac:	63 e0       	ldi	r22, 0x03	; 3
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <Ext_Interrupt_Sncontrol>
	Ext_Interrupt_Enable(Ext_INT0);
     1b4:	80 e0       	ldi	r24, 0x00	; 0
     1b6:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <Ext_Interrupt_Enable>
	// 	Ext_Interrupt_SetCallBack(Ext_INT1,ExtInt1Fun);
	// 	Ext_Interrupt_Sncontrol(Ext_INT1,Rising_Edge);
	// 	Ext_Interrupt_Enable(Ext_INT1);
	
	
	EnableAllInterrupts();
     1ba:	0e 94 56 0e 	call	0x1cac	; 0x1cac <EnableAllInterrupts>
	//Timer0_Init();
	/*****************************************************************************/
	/* Printing Welcome screen */
	LCD_SetPos(1, 0);
     1be:	60 e0       	ldi	r22, 0x00	; 0
     1c0:	81 e0       	ldi	r24, 0x01	; 1
     1c2:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
	LCD_String("Welcome to smart");
     1c6:	8c ec       	ldi	r24, 0xCC	; 204
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
	Bluetooth_TransmaitString("Welcome to smart\n\r");
     1ce:	8d ed       	ldi	r24, 0xDD	; 221
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
	LCD_SetPos(2, 0);
     1d6:	60 e0       	ldi	r22, 0x00	; 0
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
	LCD_String("home system");
     1de:	80 ef       	ldi	r24, 0xF0	; 240
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
	Bluetooth_TransmaitString("home system\n\r");
     1e6:	8c ef       	ldi	r24, 0xFC	; 252
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ee:	2f ef       	ldi	r18, 0xFF	; 255
     1f0:	33 ed       	ldi	r19, 0xD3	; 211
     1f2:	80 e3       	ldi	r24, 0x30	; 48
     1f4:	21 50       	subi	r18, 0x01	; 1
     1f6:	30 40       	sbci	r19, 0x00	; 0
     1f8:	80 40       	sbci	r24, 0x00	; 0
     1fa:	e1 f7       	brne	.-8      	; 0x1f4 <main+0x92>
     1fc:	00 c0       	rjmp	.+0      	; 0x1fe <main+0x9c>
     1fe:	00 00       	nop
	_delay_ms(1000);
	LCD_Clear();
     200:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
	
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	advvalue = LM35_Read(ADC_Channel0);
     204:	80 e0       	ldi	r24, 0x00	; 0
     206:	0e 94 56 0b 	call	0x16ac	; 0x16ac <LM35_Read>
     20a:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <__data_end+0x1>
     20e:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <__data_end>
	if (advvalue >required_temperature)
     212:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     216:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
     21a:	28 17       	cp	r18, r24
     21c:	39 07       	cpc	r19, r25
     21e:	20 f4       	brcc	.+8      	; 0x228 <main+0xc6>
	{
		DIO_WriteChannel(DIO_ChannelB7,STD_High);
     220:	61 e0       	ldi	r22, 0x01	; 1
     222:	8f e0       	ldi	r24, 0x0F	; 15
     224:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	}
	
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
     228:	80 e5       	ldi	r24, 0x50	; 80
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 cb 09 	call	0x1396	; 0x1396 <EEPROM_ui8ReadByteFromAddress>
     230:	81 30       	cpi	r24, 0x01	; 1
     232:	39 f4       	brne	.+14     	; 0x242 <main+0xe0>
     234:	84 e6       	ldi	r24, 0x64	; 100
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	0e 94 cb 09 	call	0x1396	; 0x1396 <EEPROM_ui8ReadByteFromAddress>
     23c:	81 30       	cpi	r24, 0x01	; 1
     23e:	09 f4       	brne	.+2      	; 0x242 <main+0xe0>
     240:	dc c0       	rjmp	.+440    	; 0x3fa <main+0x298>
	{
		LCD_String("Login for");//printing login menu
     242:	8a e0       	ldi	r24, 0x0A	; 10
     244:	91 e0       	ldi	r25, 0x01	; 1
     246:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
		LCD_SetPos(2,1);//move the cursor to the second line
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	82 e0       	ldi	r24, 0x02	; 2
     24e:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
		LCD_String("first time");
     252:	84 e1       	ldi	r24, 0x14	; 20
     254:	91 e0       	ldi	r25, 0x01	; 1
     256:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	e3 ed       	ldi	r30, 0xD3	; 211
     25e:	f0 e3       	ldi	r31, 0x30	; 48
     260:	91 50       	subi	r25, 0x01	; 1
     262:	e0 40       	sbci	r30, 0x00	; 0
     264:	f0 40       	sbci	r31, 0x00	; 0
     266:	e1 f7       	brne	.-8      	; 0x260 <main+0xfe>
     268:	00 c0       	rjmp	.+0      	; 0x26a <main+0x108>
     26a:	00 00       	nop
		_delay_ms(1000);//Halt the system for the given time in (ms)
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     26c:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
		LCD_String("Set Admin pass");//printing the set admin password menu
     270:	8f e1       	ldi	r24, 0x1F	; 31
     272:	91 e0       	ldi	r25, 0x01	; 1
     274:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
		LCD_SetPos(2,1);
     278:	61 e0       	ldi	r22, 0x01	; 1
     27a:	82 e0       	ldi	r24, 0x02	; 2
     27c:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
		LCD_String("Admin pass:");
     280:	8e e2       	ldi	r24, 0x2E	; 46
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
		
		/********************************* setting Admin password **********************************************/
		u8 pass_counter = 0;  // the counter of the characters of the password
		u8 pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};  // the array where it stored the password
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	89 83       	std	Y+1, r24	; 0x01
     28c:	8a 83       	std	Y+2, r24	; 0x02
     28e:	8b 83       	std	Y+3, r24	; 0x03
     290:	8c 83       	std	Y+4, r24	; 0x04
     292:	9e 01       	movw	r18, r28
     294:	2f 5f       	subi	r18, 0xFF	; 255
     296:	3f 4f       	sbci	r19, 0xFF	; 255
     298:	79 01       	movw	r14, r18
     29a:	69 01       	movw	r12, r18
     29c:	1c e0       	ldi	r17, 0x0C	; 12
		while (pass_counter < PASS_SIZE) {  // loop till the user finishes inserting the pass
			key_pressed = 0;  // return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0) {  // repeat till the user presses any key
				key_pressed = GetKey();  // if the user pressed any button on the keypad, save the value in GetKey
     29e:	0e 94 15 0a 	call	0x142a	; 0x142a <GetKey>
     2a2:	3f ef       	ldi	r19, 0xFF	; 255
     2a4:	99 ef       	ldi	r25, 0xF9	; 249
     2a6:	e0 e0       	ldi	r30, 0x00	; 0
     2a8:	31 50       	subi	r19, 0x01	; 1
     2aa:	90 40       	sbci	r25, 0x00	; 0
     2ac:	e0 40       	sbci	r30, 0x00	; 0
     2ae:	e1 f7       	brne	.-8      	; 0x2a8 <main+0x146>
     2b0:	00 c0       	rjmp	.+0      	; 0x2b2 <main+0x150>
     2b2:	00 00       	nop
		/********************************* setting Admin password **********************************************/
		u8 pass_counter = 0;  // the counter of the characters of the password
		u8 pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};  // the array where it stored the password
		while (pass_counter < PASS_SIZE) {  // loop till the user finishes inserting the pass
			key_pressed = 0;  // return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0) {  // repeat till the user presses any key
     2b4:	88 23       	and	r24, r24
     2b6:	99 f3       	breq	.-26     	; 0x29e <main+0x13c>
				key_pressed = GetKey();  // if the user pressed any button on the keypad, save the value in GetKey
				_delay_ms(20);
			}

			pass[pass_counter] = key_pressed;  // add the entered character to the pass array
     2b8:	f6 01       	movw	r30, r12
     2ba:	81 93       	st	Z+, r24
     2bc:	6f 01       	movw	r12, r30
			LCD_Char(key_pressed);  // print the entered character
     2be:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     2c2:	ff ef       	ldi	r31, 0xFF	; 255
     2c4:	25 ea       	ldi	r18, 0xA5	; 165
     2c6:	3e e0       	ldi	r19, 0x0E	; 14
     2c8:	f1 50       	subi	r31, 0x01	; 1
     2ca:	20 40       	sbci	r18, 0x00	; 0
     2cc:	30 40       	sbci	r19, 0x00	; 0
     2ce:	e1 f7       	brne	.-8      	; 0x2c8 <main+0x166>
     2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <main+0x170>
     2d2:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);  // Halt the system for the given time in (ms)
			LCD_SetPos(2, 12 + pass_counter);  // move the LCD cursor to the previous location to write the password symbol over the character
     2d4:	61 2f       	mov	r22, r17
     2d6:	82 e0       	ldi	r24, 0x02	; 2
     2d8:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
			LCD_Char(PASSWORD_SYMBOL);  // to display (Password sign *)
     2dc:	8a e2       	ldi	r24, 0x2A	; 42
     2de:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     2e2:	8f ef       	ldi	r24, 0xFF	; 255
     2e4:	91 ee       	ldi	r25, 0xE1	; 225
     2e6:	e4 e0       	ldi	r30, 0x04	; 4
     2e8:	81 50       	subi	r24, 0x01	; 1
     2ea:	90 40       	sbci	r25, 0x00	; 0
     2ec:	e0 40       	sbci	r30, 0x00	; 0
     2ee:	e1 f7       	brne	.-8      	; 0x2e8 <main+0x186>
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0x190>
     2f2:	00 00       	nop
     2f4:	1f 5f       	subi	r17, 0xFF	; 255
		LCD_String("Admin pass:");
		
		/********************************* setting Admin password **********************************************/
		u8 pass_counter = 0;  // the counter of the characters of the password
		u8 pass[PASS_SIZE] = {NOT_STORED, NOT_STORED, NOT_STORED, NOT_STORED};  // the array where it stored the password
		while (pass_counter < PASS_SIZE) {  // loop till the user finishes inserting the pass
     2f6:	10 31       	cpi	r17, 0x10	; 16
     2f8:	91 f6       	brne	.-92     	; 0x29e <main+0x13c>
			LCD_Char(PASSWORD_SYMBOL);  // to display (Password sign *)
			_delay_ms(100);  // Halt the system for the given time in (ms)
			pass_counter++;  // increase the characters count
		}

		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     2fa:	44 e0       	ldi	r20, 0x04	; 4
     2fc:	50 e0       	ldi	r21, 0x00	; 0
     2fe:	be 01       	movw	r22, r28
     300:	6f 5f       	subi	r22, 0xFF	; 255
     302:	7f 4f       	sbci	r23, 0xFF	; 255
     304:	84 e1       	ldi	r24, 0x14	; 20
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	0e 94 ae 09 	call	0x135c	; 0x135c <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     30c:	61 e0       	ldi	r22, 0x01	; 1
     30e:	80 e5       	ldi	r24, 0x50	; 80
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <EEPROM_vWriteByteToAddress>
		
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     316:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
		LCD_String("Pass Saved");// show pass saved message
     31a:	8a e3       	ldi	r24, 0x3A	; 58
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     322:	ff ef       	ldi	r31, 0xFF	; 255
     324:	29 e6       	ldi	r18, 0x69	; 105
     326:	38 e1       	ldi	r19, 0x18	; 24
     328:	f1 50       	subi	r31, 0x01	; 1
     32a:	20 40       	sbci	r18, 0x00	; 0
     32c:	30 40       	sbci	r19, 0x00	; 0
     32e:	e1 f7       	brne	.-8      	; 0x328 <main+0x1c6>
     330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x1d0>
     332:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     334:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
		
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_String("Set Guest Pass");//printing the set admin password menu
     338:	85 e4       	ldi	r24, 0x45	; 69
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
		LCD_SetPos(2,1);
     340:	61 e0       	ldi	r22, 0x01	; 1
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
		LCD_String("Guest Pass:");
     348:	84 e5       	ldi	r24, 0x54	; 84
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     350:	1c e0       	ldi	r17, 0x0C	; 12
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0)//repeat till the user press any key
			{
				key_pressed = GetKey();//if the user pressed any button in keypad save the value in key_pressed
     352:	0e 94 15 0a 	call	0x142a	; 0x142a <GetKey>
     356:	9f ef       	ldi	r25, 0xFF	; 255
     358:	e9 ef       	ldi	r30, 0xF9	; 249
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	91 50       	subi	r25, 0x01	; 1
     35e:	e0 40       	sbci	r30, 0x00	; 0
     360:	f0 40       	sbci	r31, 0x00	; 0
     362:	e1 f7       	brne	.-8      	; 0x35c <main+0x1fa>
     364:	00 c0       	rjmp	.+0      	; 0x366 <main+0x204>
     366:	00 00       	nop
		LCD_SetPos(2,1);
		LCD_String("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == 0)//repeat till the user press any key
     368:	88 23       	and	r24, r24
     36a:	99 f3       	breq	.-26     	; 0x352 <main+0x1f0>
			{
				key_pressed = GetKey();//if the user pressed any button in keypad save the value in key_pressed
				_delay_ms(20);
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     36c:	f7 01       	movw	r30, r14
     36e:	81 93       	st	Z+, r24
     370:	7f 01       	movw	r14, r30
			LCD_Char(key_pressed);//print the entered character
     372:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     376:	ff ef       	ldi	r31, 0xFF	; 255
     378:	25 ea       	ldi	r18, 0xA5	; 165
     37a:	3e e0       	ldi	r19, 0x0E	; 14
     37c:	f1 50       	subi	r31, 0x01	; 1
     37e:	20 40       	sbci	r18, 0x00	; 0
     380:	30 40       	sbci	r19, 0x00	; 0
     382:	e1 f7       	brne	.-8      	; 0x37c <main+0x21a>
     384:	00 c0       	rjmp	.+0      	; 0x386 <main+0x224>
     386:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_SetPos(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     388:	61 2f       	mov	r22, r17
     38a:	82 e0       	ldi	r24, 0x02	; 2
     38c:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
			LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
     390:	8a e2       	ldi	r24, 0x2A	; 42
     392:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     396:	8f ef       	ldi	r24, 0xFF	; 255
     398:	91 ee       	ldi	r25, 0xE1	; 225
     39a:	e4 e0       	ldi	r30, 0x04	; 4
     39c:	81 50       	subi	r24, 0x01	; 1
     39e:	90 40       	sbci	r25, 0x00	; 0
     3a0:	e0 40       	sbci	r30, 0x00	; 0
     3a2:	e1 f7       	brne	.-8      	; 0x39c <main+0x23a>
     3a4:	00 c0       	rjmp	.+0      	; 0x3a6 <main+0x244>
     3a6:	00 00       	nop
     3a8:	1f 5f       	subi	r17, 0xFF	; 255
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_String("Set Guest Pass");//printing the set admin password menu
		LCD_SetPos(2,1);
		LCD_String("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     3aa:	10 31       	cpi	r17, 0x10	; 16
     3ac:	91 f6       	brne	.-92     	; 0x352 <main+0x1f0>
			LCD_SetPos(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     3ae:	44 e0       	ldi	r20, 0x04	; 4
     3b0:	50 e0       	ldi	r21, 0x00	; 0
     3b2:	be 01       	movw	r22, r28
     3b4:	6f 5f       	subi	r22, 0xFF	; 255
     3b6:	7f 4f       	sbci	r23, 0xFF	; 255
     3b8:	88 e2       	ldi	r24, 0x28	; 40
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 ae 09 	call	0x135c	; 0x135c <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     3c0:	61 e0       	ldi	r22, 0x01	; 1
     3c2:	84 e6       	ldi	r24, 0x64	; 100
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <EEPROM_vWriteByteToAddress>
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     3ca:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
		LCD_String("Pass Saved");//move the lcd cursor to the previous location
     3ce:	8a e3       	ldi	r24, 0x3A	; 58
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     3d6:	ff ef       	ldi	r31, 0xFF	; 255
     3d8:	29 e6       	ldi	r18, 0x69	; 105
     3da:	38 e1       	ldi	r19, 0x18	; 24
     3dc:	f1 50       	subi	r31, 0x01	; 1
     3de:	20 40       	sbci	r18, 0x00	; 0
     3e0:	30 40       	sbci	r19, 0x00	; 0
     3e2:	e1 f7       	brne	.-8      	; 0x3dc <main+0x27a>
     3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0x284>
     3e6:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     3e8:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	8a e0       	ldi	r24, 0x0A	; 10
     3f0:	91 e0       	ldi	r25, 0x01	; 1
     3f2:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <EEPROM_vWriteByteToAddress>
	u8 temp_ones = NOT_SELECTED;
	u8 temp_tens = NOT_SELECTED;
	u8 Dimmer_ones = NOT_SELECTED;
	u8 Dimmer_tens = NOT_SELECTED;
	u8 Dimmer_hundreds = NOT_SELECTED;
	u8 block_mode_flag = FALSE;
     3f6:	1b 86       	std	Y+11, r1	; 0x0b
	{
		DIO_WriteChannel(DIO_ChannelB7,STD_High);
	}
	
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
	{
     3f8:	05 c0       	rjmp	.+10     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
		
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		block_mode_flag = EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
     3fa:	8a e0       	ldi	r24, 0x0A	; 10
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	0e 94 cb 09 	call	0x1396	; 0x1396 <EEPROM_ui8ReadByteFromAddress>
     402:	8b 87       	std	Y+11, r24	; 0x0b
	u8 temp_ones = NOT_SELECTED;
	u8 temp_tens = NOT_SELECTED;
	u8 Dimmer_ones = NOT_SELECTED;
	u8 Dimmer_tens = NOT_SELECTED;
	u8 Dimmer_hundreds = NOT_SELECTED;
	u8 block_mode_flag = FALSE;
     404:	10 e0       	ldi	r17, 0x00	; 0
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						LCD_String("Wrong pass");
						LCD_SetPos(2,1);
						LCD_String("Tries left:");
						LCD_Char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     406:	0f 2e       	mov	r0, r31
     408:	f3 e3       	ldi	r31, 0x33	; 51
     40a:	af 2e       	mov	r10, r31
     40c:	f0 2d       	mov	r31, r0
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE) 
			}

			u8 pass_counter=0;//counts the entered key of the password from the keypad
			u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     40e:	cc 24       	eor	r12, r12
     410:	ca 94       	dec	r12
						LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	1c 01       	movw	r2, r24
					/*compare passwords*/
					if (ui8ComparePass2(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     418:	fe 01       	movw	r30, r28
     41a:	35 96       	adiw	r30, 0x05	; 5
     41c:	fa 87       	std	Y+10, r31	; 0x0a
     41e:	e9 87       	std	Y+9, r30	; 0x09
						LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
     420:	d8 2e       	mov	r13, r24
     422:	e3 2c       	mov	r14, r3
					/*compare passwords*/
					if (ui8ComparePass2(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     424:	59 84       	ldd	r5, Y+9	; 0x09
     426:	ba 84       	ldd	r11, Y+10	; 0x0a
	{
		
		key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
		u8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		if ( pass_tries_count!=3 ){
			login_mode=NO_MODE;//log the user out
     428:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <login_mode>
			key_pressed = 0;//clear the key_pressed to avoid unwanted selection in the menu switch
			DIO_WriteChannel(DIO_ChannelD6,STD_Low);//turnoff the led of the admin
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	8e e1       	ldi	r24, 0x1E	; 30
     430:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
			DIO_WriteChannel(DIO_ChannelD3,STD_Low);//turnoff the led of the guest
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	8b e1       	ldi	r24, 0x1B	; 27
     438:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
     43c:	ff ef       	ldi	r31, 0xFF	; 255
     43e:	23 ed       	ldi	r18, 0xD3	; 211
     440:	30 e3       	ldi	r19, 0x30	; 48
     442:	f1 50       	subi	r31, 0x01	; 1
     444:	20 40       	sbci	r18, 0x00	; 0
     446:	30 40       	sbci	r19, 0x00	; 0
     448:	e1 f7       	brne	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     44a:	00 c0       	rjmp	.+0      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     44c:	00 00       	nop
	
	while (1)//The start of the periodic code
	{
		
		key_pressed = 0;//return the variable that holds the pressed key from keypad to its initial value
		u8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
     44e:	00 e0       	ldi	r16, 0x00	; 0
		if ( pass_tries_count!=3 ){
			login_mode=NO_MODE;//log the user out
			key_pressed = 0;//clear the key_pressed to avoid unwanted selection in the menu switch
     450:	91 2c       	mov	r9, r1
				LCD_String("wait 20 seconds");
				Bluetooth_TransmaitString("wait 20 seconds\n\r");
				DIO_WriteChannel(DIO_ChannelD4,STD_High);//Turn on the led of Blocked
				DIO_WriteChannel(DIO_ChannelA3,STD_High);//turn on alarm 
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				DIO_WriteChannel(DIO_ChannelA3,STD_Low);//turn off alarm 
     452:	61 2c       	mov	r6, r1
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_SetPos(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
						LCD_Char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						rxdata = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     454:	f6 2c       	mov	r15, r6
     456:	5a c2       	rjmp	.+1204   	; 0x90c <__stack+0xad>
		
		
		
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
     458:	8b 85       	ldd	r24, Y+11	; 0x0b
     45a:	81 30       	cpi	r24, 0x01	; 1
     45c:	c9 f5       	brne	.+114    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
			{
				LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     45e:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
				LCD_String("Login blocked");
     462:	80 e6       	ldi	r24, 0x60	; 96
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Bluetooth_TransmaitString("Login blocked\n\r");
     46a:	8e e6       	ldi	r24, 0x6E	; 110
     46c:	91 e0       	ldi	r25, 0x01	; 1
     46e:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
				LCD_SetPos(2,1);
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
				LCD_String("wait 20 seconds");
     47a:	8e e7       	ldi	r24, 0x7E	; 126
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Bluetooth_TransmaitString("wait 20 seconds\n\r");
     482:	8e e8       	ldi	r24, 0x8E	; 142
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
				DIO_WriteChannel(DIO_ChannelD4,STD_High);//Turn on the led of Blocked
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	8c e1       	ldi	r24, 0x1C	; 28
     48e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
				DIO_WriteChannel(DIO_ChannelA3,STD_High);//turn on alarm 
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
     49a:	94 e5       	ldi	r25, 0x54	; 84
     49c:	ed ec       	ldi	r30, 0xCD	; 205
     49e:	fd e2       	ldi	r31, 0x2D	; 45
     4a0:	23 e0       	ldi	r18, 0x03	; 3
     4a2:	91 50       	subi	r25, 0x01	; 1
     4a4:	e0 40       	sbci	r30, 0x00	; 0
     4a6:	f0 40       	sbci	r31, 0x00	; 0
     4a8:	20 40       	sbci	r18, 0x00	; 0
     4aa:	d9 f7       	brne	.-10     	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4ac:	00 c0       	rjmp	.+0      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b0:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				DIO_WriteChannel(DIO_ChannelA3,STD_Low);//turn off alarm 
     4b2:	66 2d       	mov	r22, r6
     4b4:	83 e0       	ldi	r24, 0x03	; 3
     4b6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode_flag = FALSE;//Disable block of runtime
				DIO_WriteChannel(DIO_ChannelD4,STD_Low);//Turn off the led of Blocked
     4ba:	66 2d       	mov	r22, r6
     4bc:	8c e1       	ldi	r24, 0x1C	; 28
     4be:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     4c2:	66 2d       	mov	r22, r6
     4c4:	8a e0       	ldi	r24, 0x0A	; 10
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <EEPROM_vWriteByteToAddress>
				Bluetooth_TransmaitString("wait 20 seconds\n\r");
				DIO_WriteChannel(DIO_ChannelD4,STD_High);//Turn on the led of Blocked
				DIO_WriteChannel(DIO_ChannelA3,STD_High);//turn on alarm 
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				DIO_WriteChannel(DIO_ChannelA3,STD_Low);//turn off alarm 
				pass_tries_count = 0; //Clear the count on number of wrong tries
     4cc:	00 e0       	ldi	r16, 0x00	; 0
				block_mode_flag = FALSE;//Disable block of runtime
     4ce:	6b 86       	std	Y+11, r6	; 0x0b
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}
			
			
			
			L:LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     4d0:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
			LCD_String("Select mode :\n\r");
     4d4:	80 ea       	ldi	r24, 0xA0	; 160
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
			LCD_SetPos(2,1);
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	82 e0       	ldi	r24, 0x02	; 2
     4e0:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
			LCD_String("0:Admin 1:Guest\n\r");
     4e4:	80 eb       	ldi	r24, 0xB0	; 176
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
			/*Bluetooth_TransmaitString("Select mode : 0:Admin 1:Guest");*/
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     4ec:	91 10       	cpse	r9, r1
     4ee:	0e c0       	rjmp	.+28     	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
			{
				key_pressed = GetKey();
     4f0:	0e 94 15 0a 	call	0x142a	; 0x142a <GetKey>
     4f4:	98 2e       	mov	r9, r24
     4f6:	3f ef       	ldi	r19, 0xFF	; 255
     4f8:	89 ef       	ldi	r24, 0xF9	; 249
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	31 50       	subi	r19, 0x01	; 1
     4fe:	80 40       	sbci	r24, 0x00	; 0
     500:	90 40       	sbci	r25, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <__LOCK_REGION_LENGTH__+0xfc>
     504:	00 c0       	rjmp	.+0      	; 0x506 <__LOCK_REGION_LENGTH__+0x106>
     506:	00 00       	nop
			L:LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_String("Select mode :\n\r");
			LCD_SetPos(2,1);
			LCD_String("0:Admin 1:Guest\n\r");
			/*Bluetooth_TransmaitString("Select mode : 0:Admin 1:Guest");*/
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     508:	99 20       	and	r9, r9
     50a:	91 f3       	breq	.-28     	; 0x4f0 <__LOCK_REGION_LENGTH__+0xf0>
			{
				key_pressed = GetKey();
				_delay_ms(20);//if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
     50c:	80 ed       	ldi	r24, 0xD0	; 208
     50e:	89 0d       	add	r24, r9
     510:	82 30       	cpi	r24, 0x02	; 2
     512:	88 f0       	brcs	.+34     	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
			{
				LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     514:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
				LCD_String("Wrong input.");//Prints error message on the LCD
     518:	82 ec       	ldi	r24, 0xC2	; 194
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     520:	ef ef       	ldi	r30, 0xFF	; 255
     522:	f3 ed       	ldi	r31, 0xD3	; 211
     524:	20 e3       	ldi	r18, 0x30	; 48
     526:	e1 50       	subi	r30, 0x01	; 1
     528:	f0 40       	sbci	r31, 0x00	; 0
     52a:	20 40       	sbci	r18, 0x00	; 0
     52c:	e1 f7       	brne	.-8      	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     530:	00 00       	nop
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     532:	96 2c       	mov	r9, r6
     534:	eb c1       	rjmp	.+982    	; 0x90c <__stack+0xad>
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE) 
			}

			u8 pass_counter=0;//counts the entered key of the password from the keypad
			u8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     536:	cd 82       	std	Y+5, r12	; 0x05
     538:	ce 82       	std	Y+6, r12	; 0x06
     53a:	cf 82       	std	Y+7, r12	; 0x07
     53c:	c8 86       	std	Y+8, r12	; 0x08
			u8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
     53e:	c9 82       	std	Y+1, r12	; 0x01
     540:	ca 82       	std	Y+2, r12	; 0x02
     542:	cb 82       	std	Y+3, r12	; 0x03
     544:	cc 82       	std	Y+4, r12	; 0x04
			
			switch(key_pressed)
     546:	30 e3       	ldi	r19, 0x30	; 48
     548:	93 16       	cp	r9, r19
     54a:	09 f4       	brne	.+2      	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
     54c:	ee c0       	rjmp	.+476    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
     54e:	81 e3       	ldi	r24, 0x31	; 49
     550:	98 16       	cp	r9, r24
     552:	09 f4       	brne	.+2      	; 0x556 <__LOCK_REGION_LENGTH__+0x156>
     554:	d6 c1       	rjmp	.+940    	; 0x902 <__stack+0xa3>
     556:	da c1       	rjmp	.+948    	; 0x90c <__stack+0xad>
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     558:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					LCD_String("Admin mode");
     55c:	8f ec       	ldi	r24, 0xCF	; 207
     55e:	91 e0       	ldi	r25, 0x01	; 1
     560:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					Bluetooth_TransmaitString("Admin mode\n\r");//print meesage in terminal for login
     564:	8a ed       	ldi	r24, 0xDA	; 218
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					LCD_SetPos(2,1);
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	82 e0       	ldi	r24, 0x02	; 2
     570:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					LCD_String("Enter Pass:");
     574:	87 ee       	ldi	r24, 0xE7	; 231
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					Bluetooth_TransmaitString("Enter Pass:\n\r");
     57c:	83 ef       	ldi	r24, 0xF3	; 243
     57e:	91 e0       	ldi	r25, 0x01	; 1
     580:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     584:	9f ef       	ldi	r25, 0xFF	; 255
     586:	e3 ec       	ldi	r30, 0xC3	; 195
     588:	f9 e0       	ldi	r31, 0x09	; 9
     58a:	91 50       	subi	r25, 0x01	; 1
     58c:	e0 40       	sbci	r30, 0x00	; 0
     58e:	f0 40       	sbci	r31, 0x00	; 0
     590:	e1 f7       	brne	.-8      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     592:	00 c0       	rjmp	.+0      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     594:	00 00       	nop
     596:	4e 01       	movw	r8, r28
     598:	25 e0       	ldi	r18, 0x05	; 5
     59a:	82 0e       	add	r8, r18
     59c:	91 1c       	adc	r9, r1
     59e:	0f 2e       	mov	r0, r31
     5a0:	fc e0       	ldi	r31, 0x0C	; 12
     5a2:	7f 2e       	mov	r7, r31
     5a4:	f0 2d       	mov	r31, r0
     5a6:	32 c0       	rjmp	.+100    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (rxdata == NOT_PRESSED)//repeat till the user press any key
						{
							rxdata = u8GetTX();//if the user pressed any button in keypad save the value in key_pressed
     5a8:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     5ac:	18 2f       	mov	r17, r24
     5ae:	3f ef       	ldi	r19, 0xFF	; 255
     5b0:	89 ef       	ldi	r24, 0xF9	; 249
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	31 50       	subi	r19, 0x01	; 1
     5b6:	80 40       	sbci	r24, 0x00	; 0
     5b8:	90 40       	sbci	r25, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <__LOCK_REGION_LENGTH__+0x1b4>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5be:	00 00       	nop
					Bluetooth_TransmaitString("Enter Pass:\n\r");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (rxdata == NOT_PRESSED)//repeat till the user press any key
     5c0:	11 23       	and	r17, r17
     5c2:	91 f3       	breq	.-28     	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
						{
							rxdata = u8GetTX();//if the user pressed any button in keypad save the value in key_pressed
							_delay_ms(20);
						}
						pass[pass_counter]=rxdata;//add the entered character to the pass array
     5c4:	f4 01       	movw	r30, r8
     5c6:	11 93       	st	Z+, r17
     5c8:	4f 01       	movw	r8, r30
						LCD_Char(rxdata);//print the entered character
     5ca:	81 2f       	mov	r24, r17
     5cc:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     5d0:	ff ef       	ldi	r31, 0xFF	; 255
     5d2:	25 ea       	ldi	r18, 0xA5	; 165
     5d4:	3e e0       	ldi	r19, 0x0E	; 14
     5d6:	f1 50       	subi	r31, 0x01	; 1
     5d8:	20 40       	sbci	r18, 0x00	; 0
     5da:	30 40       	sbci	r19, 0x00	; 0
     5dc:	e1 f7       	brne	.-8      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5de:	00 c0       	rjmp	.+0      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5e0:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_SetPos(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
     5e2:	67 2d       	mov	r22, r7
     5e4:	82 e0       	ldi	r24, 0x02	; 2
     5e6:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_Char(PASSWORD_SYMBOL);// to display (Password sign *)
     5ea:	8a e2       	ldi	r24, 0x2A	; 42
     5ec:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     5f0:	8f ef       	ldi	r24, 0xFF	; 255
     5f2:	91 ee       	ldi	r25, 0xE1	; 225
     5f4:	e4 e0       	ldi	r30, 0x04	; 4
     5f6:	81 50       	subi	r24, 0x01	; 1
     5f8:	90 40       	sbci	r25, 0x00	; 0
     5fa:	e0 40       	sbci	r30, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     600:	00 00       	nop
     602:	73 94       	inc	r7
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						rxdata = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     604:	1f 2d       	mov	r17, r15
					LCD_SetPos(2,1);
					LCD_String("Enter Pass:");
					Bluetooth_TransmaitString("Enter Pass:\n\r");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     606:	f0 e1       	ldi	r31, 0x10	; 16
     608:	7f 16       	cp	r7, r31
     60a:	19 f0       	breq	.+6      	; 0x612 <__LOCK_REGION_LENGTH__+0x212>
					{
						while (rxdata == NOT_PRESSED)//repeat till the user press any key
     60c:	11 23       	and	r17, r17
     60e:	61 f2       	breq	.-104    	; 0x5a8 <__LOCK_REGION_LENGTH__+0x1a8>
     610:	d9 cf       	rjmp	.-78     	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
						LCD_Char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						rxdata = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
     612:	44 e0       	ldi	r20, 0x04	; 4
     614:	50 e0       	ldi	r21, 0x00	; 0
     616:	b1 01       	movw	r22, r2
     618:	84 e1       	ldi	r24, 0x14	; 20
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if ((ui8ComparePass2(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
     620:	44 e0       	ldi	r20, 0x04	; 4
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	b1 01       	movw	r22, r2
     626:	ce 01       	movw	r24, r28
     628:	05 96       	adiw	r24, 0x05	; 5
     62a:	0e 94 30 08 	call	0x1060	; 0x1060 <ui8ComparePass2>
     62e:	01 97       	sbiw	r24, 0x01	; 1
     630:	09 f0       	breq	.+2      	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     632:	45 c0       	rjmp	.+138    	; 0x6be <__LOCK_REGION_LENGTH__+0x2be>
					{
						login_mode = ADMIN;//set the login mode to admin mode
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <login_mode>
						pass_tries_count=0;//clear the counter of wrong tries
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     63a:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Right pass");
     63e:	81 e0       	ldi	r24, 0x01	; 1
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						Bluetooth_TransmaitString("Right pass\n\r");
     646:	8c e0       	ldi	r24, 0x0C	; 12
     648:	92 e0       	ldi	r25, 0x02	; 2
     64a:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
						LCD_SetPos(2,1);
     64e:	61 e0       	ldi	r22, 0x01	; 1
     650:	82 e0       	ldi	r24, 0x02	; 2
     652:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_String("Admin mode");
     656:	8f ec       	ldi	r24, 0xCF	; 207
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						Bluetooth_TransmaitString("Admin mode\n\r");
     65e:	8a ed       	ldi	r24, 0xDA	; 218
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     666:	2f ef       	ldi	r18, 0xFF	; 255
     668:	39 e6       	ldi	r19, 0x69	; 105
     66a:	88 e1       	ldi	r24, 0x18	; 24
     66c:	21 50       	subi	r18, 0x01	; 1
     66e:	30 40       	sbci	r19, 0x00	; 0
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	e1 f7       	brne	.-8      	; 0x66c <__LOCK_REGION_LENGTH__+0x26c>
     674:	00 c0       	rjmp	.+0      	; 0x676 <__LOCK_REGION_LENGTH__+0x276>
     676:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						DIO_WriteChannel(DIO_ChannelD6,STD_High);//turn on the led of admin
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	8e e1       	ldi	r24, 0x1E	; 30
     67c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
						LCD_SetPos(1,0);
     680:	6f 2d       	mov	r22, r15
     682:	81 e0       	ldi	r24, 0x01	; 1
     684:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_String("Door opening");
     688:	89 e1       	ldi	r24, 0x19	; 25
     68a:	92 e0       	ldi	r25, 0x02	; 2
     68c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						Bluetooth_TransmaitString("Door opening\n\r");
     690:	86 e2       	ldi	r24, 0x26	; 38
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
						
						ServoMotor(90);//door open 			
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	84 eb       	ldi	r24, 0xB4	; 180
     69e:	92 e4       	ldi	r25, 0x42	; 66
     6a0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <ServoMotor>
     6a4:	9f ef       	ldi	r25, 0xFF	; 255
     6a6:	e9 e6       	ldi	r30, 0x69	; 105
     6a8:	f8 e1       	ldi	r31, 0x18	; 24
     6aa:	91 50       	subi	r25, 0x01	; 1
     6ac:	e0 40       	sbci	r30, 0x00	; 0
     6ae:	f0 40       	sbci	r31, 0x00	; 0
     6b0:	e1 f7       	brne	.-8      	; 0x6aa <__LOCK_REGION_LENGTH__+0x2aa>
     6b2:	00 c0       	rjmp	.+0      	; 0x6b4 <__LOCK_REGION_LENGTH__+0x2b4>
     6b4:	00 00       	nop
						_delay_ms(500);
						
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6b6:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>

					/*compare passwords*/
					if ((ui8ComparePass2(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
     6ba:	00 e0       	ldi	r16, 0x00	; 0
     6bc:	34 c0       	rjmp	.+104    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     6be:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;//set the mode as not logged in
     6c0:	f0 92 f2 04 	sts	0x04F2, r15	; 0x8004f2 <login_mode>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6c4:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong Pass");
     6c8:	85 e3       	ldi	r24, 0x35	; 53
     6ca:	92 e0       	ldi	r25, 0x02	; 2
     6cc:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						Bluetooth_TransmaitString("Wrong Pass\n\r");
     6d0:	80 e4       	ldi	r24, 0x40	; 64
     6d2:	92 e0       	ldi	r25, 0x02	; 2
     6d4:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
						LCD_SetPos(2,1);
     6d8:	61 e0       	ldi	r22, 0x01	; 1
     6da:	82 e0       	ldi	r24, 0x02	; 2
     6dc:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_String("Tries left:");
     6e0:	8d e4       	ldi	r24, 0x4D	; 77
     6e2:	92 e0       	ldi	r25, 0x02	; 2
     6e4:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						Bluetooth_TransmaitString("Tries left:\n\r");
     6e8:	89 e5       	ldi	r24, 0x59	; 89
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
						LCD_Char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     6f0:	8a 2d       	mov	r24, r10
     6f2:	80 1b       	sub	r24, r16
     6f4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     6f8:	2f ef       	ldi	r18, 0xFF	; 255
     6fa:	33 ed       	ldi	r19, 0xD3	; 211
     6fc:	80 e3       	ldi	r24, 0x30	; 48
     6fe:	21 50       	subi	r18, 0x01	; 1
     700:	30 40       	sbci	r19, 0x00	; 0
     702:	80 40       	sbci	r24, 0x00	; 0
     704:	e1 f7       	brne	.-8      	; 0x6fe <__LOCK_REGION_LENGTH__+0x2fe>
     706:	00 c0       	rjmp	.+0      	; 0x708 <__LOCK_REGION_LENGTH__+0x308>
     708:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     70a:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     70e:	03 30       	cpi	r16, 0x03	; 3
     710:	50 f0       	brcs	.+20     	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     712:	61 e0       	ldi	r22, 0x01	; 1
     714:	8a e0       	ldi	r24, 0x0A	; 10
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     71c:	16 2d       	mov	r17, r6
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     71e:	96 2c       	mov	r9, r6
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     720:	91 e0       	ldi	r25, 0x01	; 1
     722:	9b 87       	std	Y+11, r25	; 0x0b
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     724:	f3 c0       	rjmp	.+486    	; 0x90c <__stack+0xad>
     726:	9f 2c       	mov	r9, r15
     728:	1f 2d       	mov	r17, r15
			
			switch(key_pressed)
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
     72a:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	09 f0       	breq	.+2      	; 0x734 <__LOCK_REGION_LENGTH__+0x334>
     732:	12 cf       	rjmp	.-476    	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     734:	eb c0       	rjmp	.+470    	; 0x90c <__stack+0xad>
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     736:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					LCD_String("Guest mode");
     73a:	87 e6       	ldi	r24, 0x67	; 103
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_SetPos(2,1);
     742:	61 e0       	ldi	r22, 0x01	; 1
     744:	82 e0       	ldi	r24, 0x02	; 2
     746:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					LCD_String("Enter pass:");
     74a:	82 e7       	ldi	r24, 0x72	; 114
     74c:	92 e0       	ldi	r25, 0x02	; 2
     74e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     752:	ef ef       	ldi	r30, 0xFF	; 255
     754:	f3 ec       	ldi	r31, 0xC3	; 195
     756:	29 e0       	ldi	r18, 0x09	; 9
     758:	e1 50       	subi	r30, 0x01	; 1
     75a:	f0 40       	sbci	r31, 0x00	; 0
     75c:	20 40       	sbci	r18, 0x00	; 0
     75e:	e1 f7       	brne	.-8      	; 0x758 <__LOCK_REGION_LENGTH__+0x358>
     760:	00 c0       	rjmp	.+0      	; 0x762 <__LOCK_REGION_LENGTH__+0x362>
     762:	00 00       	nop
     764:	4e 01       	movw	r8, r28
     766:	35 e0       	ldi	r19, 0x05	; 5
     768:	83 0e       	add	r8, r19
     76a:	91 1c       	adc	r9, r1
     76c:	0f 2e       	mov	r0, r31
     76e:	fc e0       	ldi	r31, 0x0C	; 12
     770:	7f 2e       	mov	r7, r31
     772:	f0 2d       	mov	r31, r0
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = GetKey();
     774:	0e 94 15 0a 	call	0x142a	; 0x142a <GetKey>
     778:	9f ef       	ldi	r25, 0xFF	; 255
     77a:	e9 ef       	ldi	r30, 0xF9	; 249
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	91 50       	subi	r25, 0x01	; 1
     780:	e0 40       	sbci	r30, 0x00	; 0
     782:	f0 40       	sbci	r31, 0x00	; 0
     784:	e1 f7       	brne	.-8      	; 0x77e <__LOCK_REGION_LENGTH__+0x37e>
     786:	00 c0       	rjmp	.+0      	; 0x788 <__LOCK_REGION_LENGTH__+0x388>
     788:	00 00       	nop
					LCD_String("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     78a:	88 23       	and	r24, r24
     78c:	99 f3       	breq	.-26     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
						{
							key_pressed = GetKey();
							_delay_ms(20);//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
     78e:	f4 01       	movw	r30, r8
     790:	81 93       	st	Z+, r24
     792:	4f 01       	movw	r8, r30
						LCD_Char(key_pressed);//print the entered character
     794:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     798:	ff ef       	ldi	r31, 0xFF	; 255
     79a:	25 ea       	ldi	r18, 0xA5	; 165
     79c:	3e e0       	ldi	r19, 0x0E	; 14
     79e:	f1 50       	subi	r31, 0x01	; 1
     7a0:	20 40       	sbci	r18, 0x00	; 0
     7a2:	30 40       	sbci	r19, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <__LOCK_REGION_LENGTH__+0x39e>
     7a6:	00 c0       	rjmp	.+0      	; 0x7a8 <__LOCK_REGION_LENGTH__+0x3a8>
     7a8:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_SetPos(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
     7aa:	67 2d       	mov	r22, r7
     7ac:	82 e0       	ldi	r24, 0x02	; 2
     7ae:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
     7b2:	8a e2       	ldi	r24, 0x2A	; 42
     7b4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     7b8:	8f ef       	ldi	r24, 0xFF	; 255
     7ba:	91 ee       	ldi	r25, 0xE1	; 225
     7bc:	e4 e0       	ldi	r30, 0x04	; 4
     7be:	81 50       	subi	r24, 0x01	; 1
     7c0:	90 40       	sbci	r25, 0x00	; 0
     7c2:	e0 40       	sbci	r30, 0x00	; 0
     7c4:	e1 f7       	brne	.-8      	; 0x7be <__LOCK_REGION_LENGTH__+0x3be>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
     7c8:	00 00       	nop
     7ca:	73 94       	inc	r7
					LCD_String("Guest mode");
					LCD_SetPos(2,1);
					LCD_String("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     7cc:	f0 e1       	ldi	r31, 0x10	; 16
     7ce:	7f 12       	cpse	r7, r31
     7d0:	d1 cf       	rjmp	.-94     	; 0x774 <__LOCK_REGION_LENGTH__+0x374>
						LCD_Char(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
     7d2:	44 e0       	ldi	r20, 0x04	; 4
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	6d 2d       	mov	r22, r13
     7d8:	7e 2d       	mov	r23, r14
     7da:	88 e2       	ldi	r24, 0x28	; 40
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 96 09 	call	0x132c	; 0x132c <EEPROM_vReadBlockFromAddress>
					/*compare passwords*/
					if (ui8ComparePass2(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     7e2:	44 e0       	ldi	r20, 0x04	; 4
     7e4:	50 e0       	ldi	r21, 0x00	; 0
     7e6:	6d 2d       	mov	r22, r13
     7e8:	7e 2d       	mov	r23, r14
     7ea:	85 2d       	mov	r24, r5
     7ec:	9b 2d       	mov	r25, r11
     7ee:	0e 94 30 08 	call	0x1060	; 0x1060 <ui8ComparePass2>
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <__LOCK_REGION_LENGTH__+0x3f8>
     7f6:	59 c0       	rjmp	.+178    	; 0x8aa <__stack+0x4b>
					{
						login_mode = GUEST;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <login_mode>
						LCD_Clear();
     7fe:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wait for approve");//wait for approve from admin 
     802:	8e e7       	ldi	r24, 0x7E	; 126
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						LCD_SetPos(1,0);
     80a:	6f 2d       	mov	r22, r15
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						Bluetooth_TransmaitString("Req from guest: 1.OPEN 2.CLOSED\n\r");
     812:	8f e8       	ldi	r24, 0x8F	; 143
     814:	92 e0       	ldi	r25, 0x02	; 2
     816:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     81a:	2f ef       	ldi	r18, 0xFF	; 255
     81c:	33 ec       	ldi	r19, 0xC3	; 195
     81e:	89 e0       	ldi	r24, 0x09	; 9
     820:	21 50       	subi	r18, 0x01	; 1
     822:	30 40       	sbci	r19, 0x00	; 0
     824:	80 40       	sbci	r24, 0x00	; 0
     826:	e1 f7       	brne	.-8      	; 0x820 <__LOCK_REGION_LENGTH__+0x420>
     828:	00 c0       	rjmp	.+0      	; 0x82a <__LOCK_REGION_LENGTH__+0x42a>
     82a:	00 00       	nop
						_delay_ms(200);
						
						rxdata = u8GetTX();//wait untill admin approv or reject 
     82c:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     830:	18 2f       	mov	r17, r24
						if (rxdata == '1')
     832:	81 33       	cpi	r24, 0x31	; 49
     834:	29 f5       	brne	.+74     	; 0x880 <__stack+0x21>
						{
							pass_tries_count=0;//clear the counter of wrong tries
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     836:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Right pass");
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	92 e0       	ldi	r25, 0x02	; 2
     83e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						LCD_SetPos(2,1);
     842:	61 e0       	ldi	r22, 0x01	; 1
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_String("Guest mode");
     84a:	87 e6       	ldi	r24, 0x67	; 103
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						ServoMotor(90);//door open
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	84 eb       	ldi	r24, 0xB4	; 180
     858:	92 e4       	ldi	r25, 0x42	; 66
     85a:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <ServoMotor>
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	e9 e6       	ldi	r30, 0x69	; 105
     862:	f8 e1       	ldi	r31, 0x18	; 24
     864:	91 50       	subi	r25, 0x01	; 1
     866:	e0 40       	sbci	r30, 0x00	; 0
     868:	f0 40       	sbci	r31, 0x00	; 0
     86a:	e1 f7       	brne	.-8      	; 0x864 <__stack+0x5>
     86c:	00 c0       	rjmp	.+0      	; 0x86e <__stack+0xf>
     86e:	00 00       	nop
						
						
						_delay_ms(500);//Halt the system for the given time in (ms)
						DIO_WriteChannel(DIO_ChannelD3,STD_High);//turn the led of gust mode that is connected to the master micro controller on
     870:	61 e0       	ldi	r22, 0x01	; 1
     872:	8b e1       	ldi	r24, 0x1B	; 27
     874:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     878:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						_delay_ms(200);
						
						rxdata = u8GetTX();//wait untill admin approv or reject 
						if (rxdata == '1')
						{
							pass_tries_count=0;//clear the counter of wrong tries
     87c:	00 e0       	ldi	r16, 0x00	; 0
     87e:	40 c0       	rjmp	.+128    	; 0x900 <__stack+0xa1>
						
						
						_delay_ms(500);//Halt the system for the given time in (ms)
						DIO_WriteChannel(DIO_ChannelD3,STD_High);//turn the led of gust mode that is connected to the master micro controller on
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						}else if (rxdata =='2')
     880:	82 33       	cpi	r24, 0x32	; 50
     882:	f1 f5       	brne	.+124    	; 0x900 <__stack+0xa1>
						{
							LCD_String("req has been rejected");
     884:	81 eb       	ldi	r24, 0xB1	; 177
     886:	92 e0       	ldi	r25, 0x02	; 2
     888:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     88c:	2f ef       	ldi	r18, 0xFF	; 255
     88e:	39 e6       	ldi	r19, 0x69	; 105
     890:	88 e1       	ldi	r24, 0x18	; 24
     892:	21 50       	subi	r18, 0x01	; 1
     894:	30 40       	sbci	r19, 0x00	; 0
     896:	80 40       	sbci	r24, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <__stack+0x33>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <__stack+0x3d>
     89c:	00 00       	nop
							_delay_ms(500);
							pass[pass_counter]=0;//reast all inputs to try again 
     89e:	19 86       	std	Y+9, r1	; 0x09
							pass_counter=0;
							rxdata = NOT_PRESSED;
							key_pressed = NOT_PRESSED;
							login_mode =NO_MODE;//reset login mode flag 
     8a0:	f0 92 f2 04 	sts	0x04F2, r15	; 0x8004f2 <login_mode>
							LCD_String("req has been rejected");
							_delay_ms(500);
							pass[pass_counter]=0;//reast all inputs to try again 
							pass_counter=0;
							rxdata = NOT_PRESSED;
							key_pressed = NOT_PRESSED;
     8a4:	9f 2c       	mov	r9, r15
						{
							LCD_String("req has been rejected");
							_delay_ms(500);
							pass[pass_counter]=0;//reast all inputs to try again 
							pass_counter=0;
							rxdata = NOT_PRESSED;
     8a6:	1f 2d       	mov	r17, r15
							key_pressed = NOT_PRESSED;
							login_mode =NO_MODE;//reset login mode flag 
							goto L;
     8a8:	13 ce       	rjmp	.-986    	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
						}
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     8aa:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;//set the mode as not logged in
     8ac:	f0 92 f2 04 	sts	0x04F2, r15	; 0x8004f2 <login_mode>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     8b0:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong pass");
     8b4:	87 ec       	ldi	r24, 0xC7	; 199
     8b6:	92 e0       	ldi	r25, 0x02	; 2
     8b8:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						LCD_SetPos(2,1);
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_String("Tries left:");
     8c4:	8d e4       	ldi	r24, 0x4D	; 77
     8c6:	92 e0       	ldi	r25, 0x02	; 2
     8c8:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						LCD_Char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     8cc:	8a 2d       	mov	r24, r10
     8ce:	80 1b       	sub	r24, r16
     8d0:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
     8d4:	9f ef       	ldi	r25, 0xFF	; 255
     8d6:	e3 ed       	ldi	r30, 0xD3	; 211
     8d8:	f0 e3       	ldi	r31, 0x30	; 48
     8da:	91 50       	subi	r25, 0x01	; 1
     8dc:	e0 40       	sbci	r30, 0x00	; 0
     8de:	f0 40       	sbci	r31, 0x00	; 0
     8e0:	e1 f7       	brne	.-8      	; 0x8da <__stack+0x7b>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <__stack+0x85>
     8e4:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     8e6:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     8ea:	03 30       	cpi	r16, 0x03	; 3
     8ec:	48 f0       	brcs	.+18     	; 0x900 <__stack+0xa1>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     8ee:	61 e0       	ldi	r22, 0x01	; 1
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     8f8:	96 2c       	mov	r9, r6
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
							block_mode_flag = TRUE;//turn on block mode
     8fa:	21 e0       	ldi	r18, 0x01	; 1
     8fc:	2b 87       	std	Y+11, r18	; 0x0b
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     8fe:	06 c0       	rjmp	.+12     	; 0x90c <__stack+0xad>
     900:	9f 2c       	mov	r9, r15
				
				
				
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
     902:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     906:	82 30       	cpi	r24, 0x02	; 2
     908:	09 f0       	breq	.+2      	; 0x90c <__stack+0xad>
     90a:	15 cf       	rjmp	.-470    	; 0x736 <__LOCK_REGION_LENGTH__+0x336>
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		
		
		
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     90c:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     910:	88 23       	and	r24, r24
     912:	09 f4       	brne	.+2      	; 0x916 <__stack+0xb7>
     914:	a1 cd       	rjmp	.-1214   	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     916:	ff 24       	eor	r15, r15
     918:	f3 94       	inc	r15
					LCD_String("3:DOOR ");
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_DIMMERLED)//If key pressed is 1
					{
						show_menu = DimmerLED_MENU;//Set the next menu to be shown to Air conditioning menu
     91a:	0f 2e       	mov	r0, r31
     91c:	fb e0       	ldi	r31, 0x0B	; 11
     91e:	7f 2e       	mov	r7, r31
     920:	f0 2d       	mov	r31, r0
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (rxdata == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     922:	0f 2e       	mov	r0, r31
     924:	f9 e0       	ldi	r31, 0x09	; 9
     926:	6f 2e       	mov	r6, r31
     928:	f0 2d       	mov	r31, r0
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     92a:	0f 2e       	mov	r0, r31
     92c:	fa e0       	ldi	r31, 0x0A	; 10
     92e:	8f 2e       	mov	r8, r31
     930:	f0 2d       	mov	r31, r0
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (rxdata == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     932:	68 94       	set
     934:	99 24       	eor	r9, r9
     936:	93 f8       	bld	r9, 3
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     938:	0f 2e       	mov	r0, r31
     93a:	f6 e0       	ldi	r31, 0x06	; 6
     93c:	4f 2e       	mov	r4, r31
     93e:	f0 2d       	mov	r31, r0
     940:	0f 2d       	mov	r16, r15
     942:	62 c3       	rjmp	.+1732   	; 0x1008 <__stack+0x7a9>
		
		while(block_mode_flag!=TRUE)
		{
			key_pressed = 0;//Set the key pressed by the user to its default value
			u8 Value = 0;//save value on another value to connect admin and guest mode together
			switch (show_menu)
     944:	80 2f       	mov	r24, r16
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	fc 01       	movw	r30, r24
     94a:	31 97       	sbiw	r30, 0x01	; 1
     94c:	ed 30       	cpi	r30, 0x0D	; 13
     94e:	f1 05       	cpc	r31, r1
     950:	d8 f7       	brcc	.-10     	; 0x948 <__stack+0xe9>
     952:	e6 5d       	subi	r30, 0xD6	; 214
     954:	ff 4f       	sbci	r31, 0xFF	; 255
     956:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__tablejump2__>
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_Clear();
     95a:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					LCD_String("1:Room1 2:Room2");
     95e:	82 ed       	ldi	r24, 0xD2	; 210
     960:	92 e0       	ldi	r25, 0x02	; 2
     962:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					if(login_mode==ADMIN)//check login mode
     966:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     96a:	81 30       	cpi	r24, 0x01	; 1
     96c:	d1 f4       	brne	.+52     	; 0x9a2 <__stack+0x143>
					{
						Bluetooth_TransmaitString("1:Room1 2:Room2\n\r");
     96e:	82 ee       	ldi	r24, 0xE2	; 226
     970:	92 e0       	ldi	r25, 0x02	; 2
     972:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     976:	3f ef       	ldi	r19, 0xFF	; 255
     978:	81 ee       	ldi	r24, 0xE1	; 225
     97a:	94 e0       	ldi	r25, 0x04	; 4
     97c:	31 50       	subi	r19, 0x01	; 1
     97e:	80 40       	sbci	r24, 0x00	; 0
     980:	90 40       	sbci	r25, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <__stack+0x11d>
     984:	00 c0       	rjmp	.+0      	; 0x986 <__stack+0x127>
     986:	00 00       	nop
						_delay_ms(100);
						Bluetooth_TransmaitString("3:Room3 4:More\n\r");
     988:	84 ef       	ldi	r24, 0xF4	; 244
     98a:	92 e0       	ldi	r25, 0x02	; 2
     98c:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
						LCD_SetPos(2,1);
     990:	61 e0       	ldi	r22, 0x01	; 1
     992:	82 e0       	ldi	r24, 0x02	; 2
     994:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_String("3:Room3 4:More");//this menu options only printed if the logged in user is an admin
     998:	85 e0       	ldi	r24, 0x05	; 5
     99a:	93 e0       	ldi	r25, 0x03	; 3
     99c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     9a0:	09 c0       	rjmp	.+18     	; 0x9b4 <__stack+0x155>
					}
					else if(login_mode==GUEST)//check login mode
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	d1 f6       	brne	.-76     	; 0x95a <__stack+0xfb>
					{
						LCD_SetPos(2,1);
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
						LCD_String("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     9ac:	84 e1       	ldi	r24, 0x14	; 20
     9ae:	93 e0       	ldi	r25, 0x03	; 3
     9b0:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					}
					/*******************************************************/
					
					if (login_mode == GUEST)
     9b4:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     9b8:	82 30       	cpi	r24, 0x02	; 2
     9ba:	61 f5       	brne	.+88     	; 0xa14 <__stack+0x1b5>
					{
						key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	0e 94 39 08 	call	0x1072	; 0x1072 <u8GetKeyPressed>
     9c4:	ef ef       	ldi	r30, 0xFF	; 255
     9c6:	f1 ee       	ldi	r31, 0xE1	; 225
     9c8:	24 e0       	ldi	r18, 0x04	; 4
     9ca:	e1 50       	subi	r30, 0x01	; 1
     9cc:	f0 40       	sbci	r31, 0x00	; 0
     9ce:	20 40       	sbci	r18, 0x00	; 0
     9d0:	e1 f7       	brne	.-8      	; 0x9ca <__stack+0x16b>
     9d2:	00 c0       	rjmp	.+0      	; 0x9d4 <__stack+0x175>
     9d4:	00 00       	nop
						_delay_ms(100);//to avoid the duplication of the pressed key(deboncy)
						if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     9d6:	81 33       	cpi	r24, 0x31	; 49
     9d8:	09 f4       	brne	.+2      	; 0x9dc <__stack+0x17d>
     9da:	1b c3       	rjmp	.+1590   	; 0x1012 <__stack+0x7b3>
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     9dc:	82 33       	cpi	r24, 0x32	; 50
     9de:	09 f4       	brne	.+2      	; 0x9e2 <__stack+0x183>
     9e0:	1a c3       	rjmp	.+1588   	; 0x1016 <__stack+0x7b7>
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     9e2:	83 33       	cpi	r24, 0x33	; 51
     9e4:	09 f4       	brne	.+2      	; 0x9e8 <__stack+0x189>
     9e6:	19 c3       	rjmp	.+1586   	; 0x101a <__stack+0x7bb>
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM4)//If key pressed is 4 and the logged in user is guest
     9e8:	84 33       	cpi	r24, 0x34	; 52
     9ea:	09 f4       	brne	.+2      	; 0x9ee <__stack+0x18f>
     9ec:	18 c3       	rjmp	.+1584   	; 0x101e <__stack+0x7bf>
						{
							show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
							Value = key_pressed;
						}
						else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     9ee:	88 23       	and	r24, r24
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <__stack+0x195>
     9f2:	b3 cf       	rjmp	.-154    	; 0x95a <__stack+0xfb>
						{
							LCD_Clear();//remove all previously printed characters on the LCD 
     9f4:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
							LCD_String("Wrong input");//print error message
     9f8:	84 e2       	ldi	r24, 0x24	; 36
     9fa:	93 e0       	ldi	r25, 0x03	; 3
     9fc:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     a00:	3f ef       	ldi	r19, 0xFF	; 255
     a02:	89 e6       	ldi	r24, 0x69	; 105
     a04:	98 e1       	ldi	r25, 0x18	; 24
     a06:	31 50       	subi	r19, 0x01	; 1
     a08:	80 40       	sbci	r24, 0x00	; 0
     a0a:	90 40       	sbci	r25, 0x00	; 0
     a0c:	e1 f7       	brne	.-8      	; 0xa06 <__stack+0x1a7>
     a0e:	00 c0       	rjmp	.+0      	; 0xa10 <__stack+0x1b1>
     a10:	00 00       	nop
     a12:	a3 cf       	rjmp	.-186    	; 0x95a <__stack+0xfb>
							_delay_ms(500);//Halt the system for the given time in (ms)
							Value = 0;
						}
					}
					else if (login_mode == ADMIN)
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	09 f0       	breq	.+2      	; 0xa1a <__stack+0x1bb>
     a18:	a0 cf       	rjmp	.-192    	; 0x95a <__stack+0xfb>
					{
						rxdata = u8GetTX(login_mode);//wait till receive value from bluetooth 
     a1a:	81 e0       	ldi	r24, 0x01	; 1
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     a22:	18 2f       	mov	r17, r24
     a24:	ef ef       	ldi	r30, 0xFF	; 255
     a26:	f9 ef       	ldi	r31, 0xF9	; 249
     a28:	20 e0       	ldi	r18, 0x00	; 0
     a2a:	e1 50       	subi	r30, 0x01	; 1
     a2c:	f0 40       	sbci	r31, 0x00	; 0
     a2e:	20 40       	sbci	r18, 0x00	; 0
     a30:	e1 f7       	brne	.-8      	; 0xa2a <__stack+0x1cb>
     a32:	00 c0       	rjmp	.+0      	; 0xa34 <__stack+0x1d5>
     a34:	00 00       	nop
						_delay_ms(20);
						if (rxdata == SELECT_ROOM1)//If key pressed is 1
     a36:	81 33       	cpi	r24, 0x31	; 49
     a38:	09 f4       	brne	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	f3 c2       	rjmp	.+1510   	; 0x1022 <__stack+0x7c3>
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM2)//If key pressed is 2
     a3c:	82 33       	cpi	r24, 0x32	; 50
     a3e:	09 f4       	brne	.+2      	; 0xa42 <__stack+0x1e3>
     a40:	f2 c2       	rjmp	.+1508   	; 0x1026 <__stack+0x7c7>
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM3)//If key pressed is 3
     a42:	83 33       	cpi	r24, 0x33	; 51
     a44:	09 f4       	brne	.+2      	; 0xa48 <__stack+0x1e9>
     a46:	f1 c2       	rjmp	.+1506   	; 0x102a <__stack+0x7cb>
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
							Value = rxdata;
						}
						else if (rxdata == ADMIN_MORE_OPTION)//If key pressed is 4 and the logged in user is admin
     a48:	84 33       	cpi	r24, 0x34	; 52
     a4a:	09 f4       	brne	.+2      	; 0xa4e <__stack+0x1ef>
     a4c:	f0 c2       	rjmp	.+1504   	; 0x102e <__stack+0x7cf>
						{
							show_menu = MORE_MENU;//Set the next menu to be shown to more menu
							Value = rxdata;
						}
						else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     a4e:	88 23       	and	r24, r24
     a50:	09 f4       	brne	.+2      	; 0xa54 <__stack+0x1f5>
     a52:	83 cf       	rjmp	.-250    	; 0x95a <__stack+0xfb>
						{
							LCD_Clear();//remove all previously printed characters on the LCD 
     a54:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
							LCD_String("Wrong input");//print error message
     a58:	84 e2       	ldi	r24, 0x24	; 36
     a5a:	93 e0       	ldi	r25, 0x03	; 3
     a5c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     a60:	3f ef       	ldi	r19, 0xFF	; 255
     a62:	89 e6       	ldi	r24, 0x69	; 105
     a64:	98 e1       	ldi	r25, 0x18	; 24
     a66:	31 50       	subi	r19, 0x01	; 1
     a68:	80 40       	sbci	r24, 0x00	; 0
     a6a:	90 40       	sbci	r25, 0x00	; 0
     a6c:	e1 f7       	brne	.-8      	; 0xa66 <__stack+0x207>
     a6e:	00 c0       	rjmp	.+0      	; 0xa70 <__stack+0x211>
     a70:	00 00       	nop
     a72:	73 cf       	rjmp	.-282    	; 0x95a <__stack+0xfb>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_Clear();//remove all previously printed characters on the LCD 
     a74:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					Bluetooth_TransmaitString("1:Room4    2:TV\n\r");
     a78:	80 e3       	ldi	r24, 0x30	; 48
     a7a:	93 e0       	ldi	r25, 0x03	; 3
     a7c:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     a80:	ef ef       	ldi	r30, 0xFF	; 255
     a82:	f9 ef       	ldi	r31, 0xF9	; 249
     a84:	20 e0       	ldi	r18, 0x00	; 0
     a86:	e1 50       	subi	r30, 0x01	; 1
     a88:	f0 40       	sbci	r31, 0x00	; 0
     a8a:	20 40       	sbci	r18, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <__stack+0x227>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <__stack+0x231>
     a90:	00 00       	nop
					_delay_ms(20);
					Bluetooth_TransmaitString("3:AirCond 4:MORE\n\r");
     a92:	82 e4       	ldi	r24, 0x42	; 66
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					LCD_String("1:Room4    2:TV ");
     a9a:	85 e5       	ldi	r24, 0x55	; 85
     a9c:	93 e0       	ldi	r25, 0x03	; 3
     a9e:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_SetPos(2,1);
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	82 e0       	ldi	r24, 0x02	; 2
     aa6:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					LCD_String("3:AirCond.4:MORE");
     aaa:	86 e6       	ldi	r24, 0x66	; 102
     aac:	93 e0       	ldi	r25, 0x03	; 3
     aae:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
     ab2:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     abc:	18 2f       	mov	r17, r24
					
					if (rxdata == SELECT_ROOM4_ADMIN)//If key pressed is 1
     abe:	81 33       	cpi	r24, 0x31	; 49
     ac0:	09 f4       	brne	.+2      	; 0xac4 <__stack+0x265>
     ac2:	b7 c2       	rjmp	.+1390   	; 0x1032 <__stack+0x7d3>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (rxdata == SELECT_TV)//If key pressed is 2
     ac4:	82 33       	cpi	r24, 0x32	; 50
     ac6:	09 f4       	brne	.+2      	; 0xaca <__stack+0x26b>
     ac8:	b6 c2       	rjmp	.+1388   	; 0x1036 <__stack+0x7d7>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (rxdata == SELECT_AIR_CONDITIONING)//If key pressed is 3
     aca:	83 33       	cpi	r24, 0x33	; 51
     acc:	09 f4       	brne	.+2      	; 0xad0 <__stack+0x271>
     ace:	b5 c2       	rjmp	.+1386   	; 0x103a <__stack+0x7db>
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (rxdata == ADMIN_LAST_OPTION)//If key pressed is 4 (RET)
     ad0:	84 33       	cpi	r24, 0x34	; 52
     ad2:	09 f4       	brne	.+2      	; 0xad6 <__stack+0x277>
     ad4:	b4 c2       	rjmp	.+1384   	; 0x103e <__stack+0x7df>
					{
						show_menu = LAST_MENU;//Set the next menu to be shown to main menu
					}

					else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     ad6:	88 23       	and	r24, r24
     ad8:	69 f2       	breq	.-102    	; 0xa74 <__stack+0x215>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     ada:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     ade:	84 e2       	ldi	r24, 0x24	; 36
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     ae6:	3f ef       	ldi	r19, 0xFF	; 255
     ae8:	89 e6       	ldi	r24, 0x69	; 105
     aea:	98 e1       	ldi	r25, 0x18	; 24
     aec:	31 50       	subi	r19, 0x01	; 1
     aee:	80 40       	sbci	r24, 0x00	; 0
     af0:	90 40       	sbci	r25, 0x00	; 0
     af2:	e1 f7       	brne	.-8      	; 0xaec <__stack+0x28d>
     af4:	00 c0       	rjmp	.+0      	; 0xaf6 <__stack+0x297>
     af6:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (rxdata < '1') || (rxdata > '4') ));//break the loop in case of valid key or time is out
     af8:	8f ec       	ldi	r24, 0xCF	; 207
     afa:	81 0f       	add	r24, r17
     afc:	84 30       	cpi	r24, 0x04	; 4
     afe:	08 f0       	brcs	.+2      	; 0xb02 <__stack+0x2a3>
     b00:	b9 cf       	rjmp	.-142    	; 0xa74 <__stack+0x215>
     b02:	82 c2       	rjmp	.+1284   	; 0x1008 <__stack+0x7a9>
				
				case LAST_MENU:
				do
				{
					/******************** print more Menu ******************/
					Bluetooth_TransmaitString("1:DimLED 2:RET\n\r");
     b04:	87 e7       	ldi	r24, 0x77	; 119
     b06:	93 e0       	ldi	r25, 0x03	; 3
     b08:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					Bluetooth_TransmaitString("3:DOOR\n\r");
     b0c:	88 e8       	ldi	r24, 0x88	; 136
     b0e:	93 e0       	ldi	r25, 0x03	; 3
     b10:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					LCD_Clear();//remove all previously printed characters on the LCD 
     b14:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					LCD_String("1:DimLED 2:RET");
     b18:	81 e9       	ldi	r24, 0x91	; 145
     b1a:	93 e0       	ldi	r25, 0x03	; 3
     b1c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_SetPos(2,1);
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					LCD_String("3:DOOR ");
     b28:	80 ea       	ldi	r24, 0xA0	; 160
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					rxdata = u8GetTX(login_mode);
     b30:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     b3a:	18 2f       	mov	r17, r24
					
					if (rxdata == SELECT_DIMMERLED)//If key pressed is 1
     b3c:	81 33       	cpi	r24, 0x31	; 49
     b3e:	09 f4       	brne	.+2      	; 0xb42 <__stack+0x2e3>
     b40:	80 c2       	rjmp	.+1280   	; 0x1042 <__stack+0x7e3>
					{
						show_menu = DimmerLED_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (rxdata == DOOR_OPT)//If key pressed is 3
     b42:	83 33       	cpi	r24, 0x33	; 51
     b44:	09 f4       	brne	.+2      	; 0xb48 <__stack+0x2e9>
     b46:	7f c2       	rjmp	.+1278   	; 0x1046 <__stack+0x7e7>
					{
						show_menu=DOOR_MENU;//Set the next menu to be shown to DOOR_MENU
					}
					else if (rxdata == ADMIN_RET_OPTION)//If key pressed is 2(RET)
     b48:	82 33       	cpi	r24, 0x32	; 50
     b4a:	09 f4       	brne	.+2      	; 0xb4e <__stack+0x2ef>
     b4c:	7e c2       	rjmp	.+1276   	; 0x104a <__stack+0x7eb>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
					}
					else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     b4e:	88 23       	and	r24, r24
     b50:	c9 f2       	breq	.-78     	; 0xb04 <__stack+0x2a5>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     b52:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     b56:	84 e2       	ldi	r24, 0x24	; 36
     b58:	93 e0       	ldi	r25, 0x03	; 3
     b5a:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     b5e:	ef ef       	ldi	r30, 0xFF	; 255
     b60:	f9 e6       	ldi	r31, 0x69	; 105
     b62:	28 e1       	ldi	r18, 0x18	; 24
     b64:	e1 50       	subi	r30, 0x01	; 1
     b66:	f0 40       	sbci	r31, 0x00	; 0
     b68:	20 40       	sbci	r18, 0x00	; 0
     b6a:	e1 f7       	brne	.-8      	; 0xb64 <__stack+0x305>
     b6c:	00 c0       	rjmp	.+0      	; 0xb6e <__stack+0x30f>
     b6e:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (rxdata < '1') || (rxdata > '3') ));//break the loop in case of valid key
     b70:	8f ec       	ldi	r24, 0xCF	; 207
     b72:	81 0f       	add	r24, r17
     b74:	83 30       	cpi	r24, 0x03	; 3
     b76:	30 f6       	brcc	.-116    	; 0xb04 <__stack+0x2a5>
     b78:	47 c2       	rjmp	.+1166   	; 0x1008 <__stack+0x7a9>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_Clear();//remove all previously printed characters on the LCD 
     b7a:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					Bluetooth_TransmaitString("1:Set temperature\n\r");
     b7e:	88 ea       	ldi	r24, 0xA8	; 168
     b80:	93 e0       	ldi	r25, 0x03	; 3
     b82:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					Bluetooth_TransmaitString("2:Control  3:RET\n\r");
     b86:	8c eb       	ldi	r24, 0xBC	; 188
     b88:	93 e0       	ldi	r25, 0x03	; 3
     b8a:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					LCD_String("1:Set temperature ");
     b8e:	8f ec       	ldi	r24, 0xCF	; 207
     b90:	93 e0       	ldi	r25, 0x03	; 3
     b92:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_SetPos(2,1);
     b96:	61 e0       	ldi	r22, 0x01	; 1
     b98:	82 e0       	ldi	r24, 0x02	; 2
     b9a:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					LCD_String("2:Control  3:RET");
     b9e:	82 ee       	ldi	r24, 0xE2	; 226
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
     ba6:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     bb0:	18 2f       	mov	r17, r24
					
					if (rxdata == SELECT_SET_TEMPERATURE)//If key pressed is 1
     bb2:	81 33       	cpi	r24, 0x31	; 49
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <__stack+0x359>
     bb6:	4b c2       	rjmp	.+1174   	; 0x104e <__stack+0x7ef>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (rxdata == SELECT_AIR_COND_CTRL)//If key pressed is 2
     bb8:	82 33       	cpi	r24, 0x32	; 50
     bba:	09 f4       	brne	.+2      	; 0xbbe <__stack+0x35f>
     bbc:	4a c2       	rjmp	.+1172   	; 0x1052 <__stack+0x7f3>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (rxdata == SELECT_AIR_COND_RET)//If key pressed is 0
     bbe:	83 33       	cpi	r24, 0x33	; 51
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <__stack+0x365>
     bc2:	49 c2       	rjmp	.+1170   	; 0x1056 <__stack+0x7f7>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(rxdata != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     bc4:	88 23       	and	r24, r24
     bc6:	c9 f2       	breq	.-78     	; 0xb7a <__stack+0x31b>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     bc8:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     bcc:	84 e2       	ldi	r24, 0x24	; 36
     bce:	93 e0       	ldi	r25, 0x03	; 3
     bd0:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     bd4:	3f ef       	ldi	r19, 0xFF	; 255
     bd6:	89 e6       	ldi	r24, 0x69	; 105
     bd8:	98 e1       	ldi	r25, 0x18	; 24
     bda:	31 50       	subi	r19, 0x01	; 1
     bdc:	80 40       	sbci	r24, 0x00	; 0
     bde:	90 40       	sbci	r25, 0x00	; 0
     be0:	e1 f7       	brne	.-8      	; 0xbda <__stack+0x37b>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <__stack+0x385>
     be4:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (rxdata < '1') || (rxdata > '3') ));//break the loop in case of valid key 
     be6:	8f ec       	ldi	r24, 0xCF	; 207
     be8:	81 0f       	add	r24, r17
     bea:	83 30       	cpi	r24, 0x03	; 3
     bec:	30 f6       	brcc	.-116    	; 0xb7a <__stack+0x31b>
     bee:	0c c2       	rjmp	.+1048   	; 0x1008 <__stack+0x7a9>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
     bf0:	60 91 f2 04 	lds	r22, 0x04F2	; 0x8004f2 <login_mode>
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	0e 94 55 08 	call	0x10aa	; 0x10aa <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     bfe:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room1 menu case
     c00:	03 c2       	rjmp	.+1030   	; 0x1008 <__stack+0x7a9>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
     c02:	60 91 f2 04 	lds	r22, 0x04F2	; 0x8004f2 <login_mode>
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	84 e0       	ldi	r24, 0x04	; 4
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 55 08 	call	0x10aa	; 0x10aa <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     c10:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room2 menu case
     c12:	fa c1       	rjmp	.+1012   	; 0x1008 <__stack+0x7a9>
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
     c14:	60 91 f2 04 	lds	r22, 0x04F2	; 0x8004f2 <login_mode>
     c18:	70 e0       	ldi	r23, 0x00	; 0
     c1a:	85 e0       	ldi	r24, 0x05	; 5
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	0e 94 55 08 	call	0x10aa	; 0x10aa <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     c22:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room3 menu case
     c24:	f1 c1       	rjmp	.+994    	; 0x1008 <__stack+0x7a9>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
     c26:	60 91 f2 04 	lds	r22, 0x04F2	; 0x8004f2 <login_mode>
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	86 e0       	ldi	r24, 0x06	; 6
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	0e 94 55 08 	call	0x10aa	; 0x10aa <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
     c34:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     c38:	82 30       	cpi	r24, 0x02	; 2
     c3a:	09 f4       	brne	.+2      	; 0xc3e <__stack+0x3df>
     c3c:	e4 c1       	rjmp	.+968    	; 0x1006 <__stack+0x7a7>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     c3e:	02 e0       	ldi	r16, 0x02	; 2
     c40:	e3 c1       	rjmp	.+966    	; 0x1008 <__stack+0x7a9>
				
				case DimmerLED_MENU:
				brightness = 0;
				while (brightness==0 )//start the loop that asks for the temperature from the user
				{
					InitPWM();//Iint pwm 
     c42:	0e 94 83 09 	call	0x1306	; 0x1306 <InitPWM>
					rxdata = NOT_PRESSED;//set the key pressed to the default value
					LCD_Clear();//remove all previously printed characters on the LCD 
     c46:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					Bluetooth_TransmaitString("Set Brightness:%\n\r");
     c4a:	83 ef       	ldi	r24, 0xF3	; 243
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					LCD_String("Set Brightness:%");//print the format of inserting temperature
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	94 e0       	ldi	r25, 0x04	; 4
     c56:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_SetPos(2,0);//move the cursor to the place to write the entered temperature
     c5a:	60 e0       	ldi	r22, 0x00	; 0
     c5c:	82 e0       	ldi	r24, 0x02	; 2
     c5e:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					
					/*******************************************************************************/
					rxdata = u8GetTX(login_mode);
     c62:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     c6c:	18 2f       	mov	r17, r24

					if (rxdata > '9')//show wrong input message if the user entered non numeric value
     c6e:	8a 33       	cpi	r24, 0x3A	; 58
     c70:	80 f0       	brcs	.+32     	; 0xc92 <__stack+0x433>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     c72:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     c76:	84 e2       	ldi	r24, 0x24	; 36
     c78:	93 e0       	ldi	r25, 0x03	; 3
     c7a:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     c7e:	ef ef       	ldi	r30, 0xFF	; 255
     c80:	f9 e6       	ldi	r31, 0x69	; 105
     c82:	28 e1       	ldi	r18, 0x18	; 24
     c84:	e1 50       	subi	r30, 0x01	; 1
     c86:	f0 40       	sbci	r31, 0x00	; 0
     c88:	20 40       	sbci	r18, 0x00	; 0
     c8a:	e1 f7       	brne	.-8      	; 0xc84 <__stack+0x425>
     c8c:	00 c0       	rjmp	.+0      	; 0xc8e <__stack+0x42f>
     c8e:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)
     c90:	d8 cf       	rjmp	.-80     	; 0xc42 <__stack+0x3e3>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     c92:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
						Dimmer_hundreds = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					rxdata = u8GetTX(login_mode);
     c96:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     ca0:	08 2f       	mov	r16, r24
					

					if ((rxdata <'0' || rxdata >'9'))//show wrong input message if the user entered non numeric value
     ca2:	80 ed       	ldi	r24, 0xD0	; 208
     ca4:	80 0f       	add	r24, r16
     ca6:	8a 30       	cpi	r24, 0x0A	; 10
     ca8:	80 f0       	brcs	.+32     	; 0xcca <__stack+0x46b>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     caa:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     cae:	84 e2       	ldi	r24, 0x24	; 36
     cb0:	93 e0       	ldi	r25, 0x03	; 3
     cb2:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     cb6:	3f ef       	ldi	r19, 0xFF	; 255
     cb8:	89 e6       	ldi	r24, 0x69	; 105
     cba:	98 e1       	ldi	r25, 0x18	; 24
     cbc:	31 50       	subi	r19, 0x01	; 1
     cbe:	80 40       	sbci	r24, 0x00	; 0
     cc0:	90 40       	sbci	r25, 0x00	; 0
     cc2:	e1 f7       	brne	.-8      	; 0xcbc <__stack+0x45d>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <__stack+0x467>
     cc6:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     cc8:	bc cf       	rjmp	.-136    	; 0xc42 <__stack+0x3e3>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     cca:	80 2f       	mov	r24, r16
     ccc:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
						Dimmer_tens = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					
					rxdata = u8GetTX(login_mode);//wait for the user till key is pressed 
     cd0:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     cda:	f8 2e       	mov	r15, r24
					
					if ((rxdata <'0' || rxdata >'9'))//show wrong input message if the user entered non numeric value
     cdc:	80 ed       	ldi	r24, 0xD0	; 208
     cde:	8f 0d       	add	r24, r15
     ce0:	8a 30       	cpi	r24, 0x0A	; 10
     ce2:	80 f0       	brcs	.+32     	; 0xd04 <__stack+0x4a5>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     ce4:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     ce8:	84 e2       	ldi	r24, 0x24	; 36
     cea:	93 e0       	ldi	r25, 0x03	; 3
     cec:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     cf0:	ef ef       	ldi	r30, 0xFF	; 255
     cf2:	f9 e6       	ldi	r31, 0x69	; 105
     cf4:	28 e1       	ldi	r18, 0x18	; 24
     cf6:	e1 50       	subi	r30, 0x01	; 1
     cf8:	f0 40       	sbci	r31, 0x00	; 0
     cfa:	20 40       	sbci	r18, 0x00	; 0
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <__stack+0x497>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <__stack+0x4a1>
     d00:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     d02:	9f cf       	rjmp	.-194    	; 0xc42 <__stack+0x3e3>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     d04:	8f 2d       	mov	r24, r15
     d06:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
						Dimmer_ones = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}


					brightness = ((Dimmer_hundreds*100) + (Dimmer_tens*10) + (Dimmer_ones));//set the value of the temperature from the given separated values
     d0a:	00 0f       	add	r16, r16
     d0c:	80 2f       	mov	r24, r16
     d0e:	88 0f       	add	r24, r24
     d10:	88 0f       	add	r24, r24
     d12:	08 0f       	add	r16, r24
     d14:	80 2f       	mov	r24, r16
     d16:	34 e6       	ldi	r19, 0x64	; 100
     d18:	13 9f       	mul	r17, r19
     d1a:	80 0d       	add	r24, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	f8 0e       	add	r15, r24
						_delay_ms(500);
						show_menu = DimmerLED_MENU;//set next menu to DimmerLED_MENU

					}else
					{
						InitPWM();
     d20:	0e 94 83 09 	call	0x1306	; 0x1306 <InitPWM>
						SetPWMOutPut(brightness);
     d24:	8f 2d       	mov	r24, r15
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 8b 09 	call	0x1316	; 0x1316 <SetPWMOutPut>
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d2c:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						//show the message
						LCD_String("Brightness Set");
     d30:	87 e1       	ldi	r24, 0x17	; 23
     d32:	94 e0       	ldi	r25, 0x04	; 4
     d34:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     d38:	8f ef       	ldi	r24, 0xFF	; 255
     d3a:	99 e6       	ldi	r25, 0x69	; 105
     d3c:	e8 e1       	ldi	r30, 0x18	; 24
     d3e:	81 50       	subi	r24, 0x01	; 1
     d40:	90 40       	sbci	r25, 0x00	; 0
     d42:	e0 40       	sbci	r30, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <__stack+0x4df>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <__stack+0x4e9>
     d48:	00 00       	nop
				}
				break;//End of room4 menu case
				
				case DimmerLED_MENU:
				brightness = 0;
				while (brightness==0 )//start the loop that asks for the temperature from the user
     d4a:	ff 20       	and	r15, r15
     d4c:	09 f4       	brne	.+2      	; 0xd50 <__stack+0x4f1>
     d4e:	79 cf       	rjmp	.-270    	; 0xc42 <__stack+0x3e3>
						SetPWMOutPut(brightness);
						LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						//show the message
						LCD_String("Brightness Set");
						_delay_ms(500);//Halt the system for the given time in (ms)
						show_menu = LAST_MENU;
     d50:	0c e0       	ldi	r16, 0x0C	; 12
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
						Dimmer_ones = rxdata;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
     d52:	10 e0       	ldi	r17, 0x00	; 0
     d54:	59 c1       	rjmp	.+690    	; 0x1008 <__stack+0x7a9>
				case DOOR_MENU:
				
				do{
					//rxdata = NOT_PRESSED;//set the key pressed to the default value
					key_pressed =NOT_PRESSED;
					LCD_Clear();//remove all previously printed characters on the LCD 
     d56:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					Bluetooth_TransmaitString("1:open 2:colse\n\r");
     d5a:	86 e2       	ldi	r24, 0x26	; 38
     d5c:	94 e0       	ldi	r25, 0x04	; 4
     d5e:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
					LCD_String("1:open 2:colse");//print the format of inserting temperature
     d62:	87 e3       	ldi	r24, 0x37	; 55
     d64:	94 e0       	ldi	r25, 0x04	; 4
     d66:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_SetPos(2,0);//move the cursor to the place to write the entered temperature
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					
					/*******************************************************************************/
					rxdata = u8GetTX(login_mode);
     d72:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     d7c:	18 2f       	mov	r17, r24
					
					/*u8 data = rxdata;*/
					if (rxdata > '2')//show wrong input message if the user entered non numeric value
     d7e:	83 33       	cpi	r24, 0x33	; 51
     d80:	80 f0       	brcs	.+32     	; 0xda2 <__stack+0x543>
					{
						LCD_Clear();//remove all previously printed characters on the LCD
     d82:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     d86:	84 e2       	ldi	r24, 0x24	; 36
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     d8e:	ff ef       	ldi	r31, 0xFF	; 255
     d90:	29 e6       	ldi	r18, 0x69	; 105
     d92:	38 e1       	ldi	r19, 0x18	; 24
     d94:	f1 50       	subi	r31, 0x01	; 1
     d96:	20 40       	sbci	r18, 0x00	; 0
     d98:	30 40       	sbci	r19, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <__stack+0x535>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <__stack+0x53f>
     d9e:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)
     da0:	46 c0       	rjmp	.+140    	; 0xe2e <__stack+0x5cf>
					}
					else if (rxdata == '1')//if the value is valid
     da2:	81 33       	cpi	r24, 0x31	; 49
     da4:	09 f5       	brne	.+66     	; 0xde8 <__stack+0x589>
					{
						
						LCD_Char(rxdata);
     da6:	81 e3       	ldi	r24, 0x31	; 49
     da8:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
						ServoMotor(0);
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	cb 01       	movw	r24, r22
     db2:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <ServoMotor>
     db6:	8f ef       	ldi	r24, 0xFF	; 255
     db8:	99 e6       	ldi	r25, 0x69	; 105
     dba:	e8 e1       	ldi	r30, 0x18	; 24
     dbc:	81 50       	subi	r24, 0x01	; 1
     dbe:	90 40       	sbci	r25, 0x00	; 0
     dc0:	e0 40       	sbci	r30, 0x00	; 0
     dc2:	e1 f7       	brne	.-8      	; 0xdbc <__stack+0x55d>
     dc4:	00 c0       	rjmp	.+0      	; 0xdc6 <__stack+0x567>
     dc6:	00 00       	nop
						_delay_ms(500);
						ServoMotor(180);
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	84 e3       	ldi	r24, 0x34	; 52
     dce:	93 e4       	ldi	r25, 0x43	; 67
     dd0:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <ServoMotor>
     dd4:	ff ef       	ldi	r31, 0xFF	; 255
     dd6:	29 e6       	ldi	r18, 0x69	; 105
     dd8:	38 e1       	ldi	r19, 0x18	; 24
     dda:	f1 50       	subi	r31, 0x01	; 1
     ddc:	20 40       	sbci	r18, 0x00	; 0
     dde:	30 40       	sbci	r19, 0x00	; 0
     de0:	e1 f7       	brne	.-8      	; 0xdda <__stack+0x57b>
     de2:	00 c0       	rjmp	.+0      	; 0xde4 <__stack+0x585>
     de4:	00 00       	nop
     de6:	39 c1       	rjmp	.+626    	; 0x105a <__stack+0x7fb>
						//Bluetooth_TransmaitString("door opened");
						_delay_ms(500);
						rxdata = NOT_PRESSED;//set the key pressed to the default value
						show_menu = LAST_MENU;
						
					}else if(rxdata == '2')
     de8:	82 33       	cpi	r24, 0x32	; 50
     dea:	09 f5       	brne	.+66     	; 0xe2e <__stack+0x5cf>
					{
						LCD_Char(rxdata);
     dec:	82 e3       	ldi	r24, 0x32	; 50
     dee:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
						ServoMotor(0);
     df2:	60 e0       	ldi	r22, 0x00	; 0
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	cb 01       	movw	r24, r22
     df8:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <ServoMotor>
     dfc:	8f ef       	ldi	r24, 0xFF	; 255
     dfe:	99 e6       	ldi	r25, 0x69	; 105
     e00:	e8 e1       	ldi	r30, 0x18	; 24
     e02:	81 50       	subi	r24, 0x01	; 1
     e04:	90 40       	sbci	r25, 0x00	; 0
     e06:	e0 40       	sbci	r30, 0x00	; 0
     e08:	e1 f7       	brne	.-8      	; 0xe02 <__stack+0x5a3>
     e0a:	00 c0       	rjmp	.+0      	; 0xe0c <__stack+0x5ad>
     e0c:	00 00       	nop
						_delay_ms(500);
						ServoMotor(180);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	84 e3       	ldi	r24, 0x34	; 52
     e14:	93 e4       	ldi	r25, 0x43	; 67
     e16:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <ServoMotor>
     e1a:	ff ef       	ldi	r31, 0xFF	; 255
     e1c:	29 e6       	ldi	r18, 0x69	; 105
     e1e:	38 e1       	ldi	r19, 0x18	; 24
     e20:	f1 50       	subi	r31, 0x01	; 1
     e22:	20 40       	sbci	r18, 0x00	; 0
     e24:	30 40       	sbci	r19, 0x00	; 0
     e26:	e1 f7       	brne	.-8      	; 0xe20 <__stack+0x5c1>
     e28:	00 c0       	rjmp	.+0      	; 0xe2a <__stack+0x5cb>
     e2a:	00 00       	nop
     e2c:	16 c1       	rjmp	.+556    	; 0x105a <__stack+0x7fb>
						_delay_ms(500);
						rxdata = NOT_PRESSED;//set the key pressed to the default value
						show_menu = LAST_MENU;
						
					}
				}while (rxdata >0 && rxdata<3);
     e2e:	8f ef       	ldi	r24, 0xFF	; 255
     e30:	81 0f       	add	r24, r17
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	08 f4       	brcc	.+2      	; 0xe38 <__stack+0x5d9>
     e36:	8f cf       	rjmp	.-226    	; 0xd56 <__stack+0x4f7>
     e38:	e7 c0       	rjmp	.+462    	; 0x1008 <__stack+0x7a9>
				break;
				
				
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
     e3a:	60 91 f2 04 	lds	r22, 0x04F2	; 0x8004f2 <login_mode>
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	87 e0       	ldi	r24, 0x07	; 7
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	0e 94 55 08 	call	0x10aa	; 0x10aa <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     e48:	02 e0       	ldi	r16, 0x02	; 2
				break;//End of TV menu case
     e4a:	de c0       	rjmp	.+444    	; 0x1008 <__stack+0x7a9>
				
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
     e4c:	60 91 f2 04 	lds	r22, 0x04F2	; 0x8004f2 <login_mode>
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	89 e0       	ldi	r24, 0x09	; 9
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 55 08 	call	0x10aa	; 0x10aa <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     e5a:	09 2d       	mov	r16, r9
				break;//End of air conditioning control menu case
     e5c:	d5 c0       	rjmp	.+426    	; 0x1008 <__stack+0x7a9>
				
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
     e5e:	10 92 f0 04 	sts	0x04F0, r1	; 0x8004f0 <temperature>
				while (temperature==0 )//start the loop that asks for the temperature from the user
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
					LCD_Clear();//remove all previously printed characters on the LCD 
     e62:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					LCD_String("Set temp.:__");//print the format of inserting temperature
     e66:	86 e4       	ldi	r24, 0x46	; 70
     e68:	94 e0       	ldi	r25, 0x04	; 4
     e6a:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_Char(DEGREES_SYMBOL); // print the symbol of degree
     e6e:	8f ed       	ldi	r24, 0xDF	; 223
     e70:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
					LCD_Char('C'); // print the C character
     e74:	83 e4       	ldi	r24, 0x43	; 67
     e76:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
					LCD_SetPos(1,11);//move the cursor to the place to write the entered temperature
     e7a:	67 2d       	mov	r22, r7
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	93 ec       	ldi	r25, 0xC3	; 195
     e86:	e9 e0       	ldi	r30, 0x09	; 9
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e0 40       	sbci	r30, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <__stack+0x629>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <__stack+0x633>
     e92:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					LCD_SetPos(1,10);
     e94:	68 2d       	mov	r22, r8
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					
					/*******************************************************************************/
					rxdata = u8GetTX();//wait for the user till key is pressed 
     e9c:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     ea0:	18 2f       	mov	r17, r24
     ea2:	ff ef       	ldi	r31, 0xFF	; 255
     ea4:	29 ef       	ldi	r18, 0xF9	; 249
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	f1 50       	subi	r31, 0x01	; 1
     eaa:	20 40       	sbci	r18, 0x00	; 0
     eac:	30 40       	sbci	r19, 0x00	; 0
     eae:	e1 f7       	brne	.-8      	; 0xea8 <__stack+0x649>
     eb0:	00 c0       	rjmp	.+0      	; 0xeb2 <__stack+0x653>
     eb2:	00 00       	nop
					_delay_ms(20);//to avoid the duplication of the pressed key
					

					if (rxdata <'0' || rxdata >'9')//show wrong input message if the user entered non numeric value
     eb4:	00 ed       	ldi	r16, 0xD0	; 208
     eb6:	08 0f       	add	r16, r24
     eb8:	0a 30       	cpi	r16, 0x0A	; 10
     eba:	a0 f0       	brcs	.+40     	; 0xee4 <__stack+0x685>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     ebc:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     ec0:	84 e2       	ldi	r24, 0x24	; 36
     ec2:	93 e0       	ldi	r25, 0x03	; 3
     ec4:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						Bluetooth_TransmaitString("Wrong input\n\r");
     ec8:	83 e5       	ldi	r24, 0x53	; 83
     eca:	94 e0       	ldi	r25, 0x04	; 4
     ecc:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     ed0:	8f ef       	ldi	r24, 0xFF	; 255
     ed2:	99 e6       	ldi	r25, 0x69	; 105
     ed4:	e8 e1       	ldi	r30, 0x18	; 24
     ed6:	81 50       	subi	r24, 0x01	; 1
     ed8:	90 40       	sbci	r25, 0x00	; 0
     eda:	e0 40       	sbci	r30, 0x00	; 0
     edc:	e1 f7       	brne	.-8      	; 0xed6 <__stack+0x677>
     ede:	00 c0       	rjmp	.+0      	; 0xee0 <__stack+0x681>
     ee0:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)
     ee2:	8a c0       	rjmp	.+276    	; 0xff8 <__stack+0x799>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     ee4:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
						temp_tens = rxdata-ASCII_ZERO;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					rxdata = u8GetTX();//wait for the user till key is pressed 
     ee8:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
     eec:	18 2f       	mov	r17, r24
     eee:	ff ef       	ldi	r31, 0xFF	; 255
     ef0:	29 ef       	ldi	r18, 0xF9	; 249
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	f1 50       	subi	r31, 0x01	; 1
     ef6:	20 40       	sbci	r18, 0x00	; 0
     ef8:	30 40       	sbci	r19, 0x00	; 0
     efa:	e1 f7       	brne	.-8      	; 0xef4 <__stack+0x695>
     efc:	00 c0       	rjmp	.+0      	; 0xefe <__stack+0x69f>
     efe:	00 00       	nop
					_delay_ms(20);//to avoid the duplication of the pressed key
					
					

					if ((rxdata <'0' || rxdata >'9'))//show wrong input message if the user entered non numeric value
     f00:	0f 2e       	mov	r0, r31
     f02:	f0 ed       	ldi	r31, 0xD0	; 208
     f04:	ff 2e       	mov	r15, r31
     f06:	f0 2d       	mov	r31, r0
     f08:	f8 0e       	add	r15, r24
     f0a:	89 e0       	ldi	r24, 0x09	; 9
     f0c:	8f 15       	cp	r24, r15
     f0e:	a0 f4       	brcc	.+40     	; 0xf38 <__stack+0x6d9>
					{
						LCD_Clear();//remove all previously printed characters on the LCD 
     f10:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
						LCD_String("Wrong input");//print error message
     f14:	84 e2       	ldi	r24, 0x24	; 36
     f16:	93 e0       	ldi	r25, 0x03	; 3
     f18:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
						Bluetooth_TransmaitString("Wrong input\n\r");
     f1c:	83 e5       	ldi	r24, 0x53	; 83
     f1e:	94 e0       	ldi	r25, 0x04	; 4
     f20:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     f24:	9f ef       	ldi	r25, 0xFF	; 255
     f26:	e9 e6       	ldi	r30, 0x69	; 105
     f28:	f8 e1       	ldi	r31, 0x18	; 24
     f2a:	91 50       	subi	r25, 0x01	; 1
     f2c:	e0 40       	sbci	r30, 0x00	; 0
     f2e:	f0 40       	sbci	r31, 0x00	; 0
     f30:	e1 f7       	brne	.-8      	; 0xf2a <__stack+0x6cb>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <__stack+0x6d5>
     f34:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     f36:	60 c0       	rjmp	.+192    	; 0xff8 <__stack+0x799>
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
     f38:	81 2f       	mov	r24, r17
     f3a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
						temp_ones = rxdata-ASCII_ZERO;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
     f3e:	00 0f       	add	r16, r16
     f40:	80 2f       	mov	r24, r16
     f42:	88 0f       	add	r24, r24
     f44:	88 0f       	add	r24, r24
     f46:	08 0f       	add	r16, r24
     f48:	f0 0e       	add	r15, r16
     f4a:	f0 92 f0 04 	sts	0x04F0, r15	; 0x8004f0 <temperature>
     f4e:	2f ef       	ldi	r18, 0xFF	; 255
     f50:	33 ec       	ldi	r19, 0xC3	; 195
     f52:	89 e0       	ldi	r24, 0x09	; 9
     f54:	21 50       	subi	r18, 0x01	; 1
     f56:	30 40       	sbci	r19, 0x00	; 0
     f58:	80 40       	sbci	r24, 0x00	; 0
     f5a:	e1 f7       	brne	.-8      	; 0xf54 <__stack+0x6f5>
     f5c:	00 c0       	rjmp	.+0      	; 0xf5e <__stack+0x6ff>
     f5e:	00 00       	nop
					_delay_ms(200);
					LCD_Clear();//remove all previously printed characters on the LCD 
     f60:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
					LCD_String("Temperature Set");//show the message
     f64:	81 e6       	ldi	r24, 0x61	; 97
     f66:	94 e0       	ldi	r25, 0x04	; 4
     f68:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					Bluetooth_TransmaitString("Temperature Set\n\r");
     f6c:	81 e7       	ldi	r24, 0x71	; 113
     f6e:	94 e0       	ldi	r25, 0x04	; 4
     f70:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
     f74:	9f ef       	ldi	r25, 0xFF	; 255
     f76:	e9 e6       	ldi	r30, 0x69	; 105
     f78:	f8 e1       	ldi	r31, 0x18	; 24
     f7a:	91 50       	subi	r25, 0x01	; 1
     f7c:	e0 40       	sbci	r30, 0x00	; 0
     f7e:	f0 40       	sbci	r31, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <__stack+0x71b>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <__stack+0x725>
     f84:	00 00       	nop
					_delay_ms(500);//Halt the system for the given time in (ms)
					if (advvalue >temperature)//check for req temp and current temp to take action
     f86:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <temperature>
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	20 91 ee 04 	lds	r18, 0x04EE	; 0x8004ee <__data_end>
     f90:	30 91 ef 04 	lds	r19, 0x04EF	; 0x8004ef <__data_end+0x1>
     f94:	82 17       	cp	r24, r18
     f96:	93 07       	cpc	r25, r19
     f98:	28 f4       	brcc	.+10     	; 0xfa4 <__stack+0x745>
					{
						DIO_WriteChannel(DIO_ChannelB7,STD_High);//turn on air cond
     f9a:	61 e0       	ldi	r22, 0x01	; 1
     f9c:	8f e0       	ldi	r24, 0x0F	; 15
     f9e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
     fa2:	04 c0       	rjmp	.+8      	; 0xfac <__stack+0x74d>
					}else
					{
						DIO_WriteChannel(DIO_ChannelB7,STD_Low);//turn off air cond
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	8f e0       	ldi	r24, 0x0F	; 15
     fa8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
					}
					advvalue=LM35_Read(ADC_Channel0);//init lm35 to display current temp 
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	0e 94 56 0b 	call	0x16ac	; 0x16ac <LM35_Read>
     fb2:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <__data_end+0x1>
     fb6:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     fba:	48 2d       	mov	r20, r8
     fbc:	64 e3       	ldi	r22, 0x34	; 52
     fbe:	75 e0       	ldi	r23, 0x05	; 5
     fc0:	0e 94 42 13 	call	0x2684	; 0x2684 <__itoa_ncheck>
					itoa (advvalue,adcstring,10);//fun to convert int to array to display on lcd
					LCD_SetPos(2,0);
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	82 e0       	ldi	r24, 0x02	; 2
     fc8:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					LCD_String("TEMP NOW");
     fcc:	83 e8       	ldi	r24, 0x83	; 131
     fce:	94 e0       	ldi	r25, 0x04	; 4
     fd0:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
					LCD_SetPos(2,9);
     fd4:	66 2d       	mov	r22, r6
     fd6:	82 e0       	ldi	r24, 0x02	; 2
     fd8:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
					LCD_String(adcstring);
     fdc:	84 e3       	ldi	r24, 0x34	; 52
     fde:	95 e0       	ldi	r25, 0x05	; 5
     fe0:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
     fe4:	2f ef       	ldi	r18, 0xFF	; 255
     fe6:	39 e6       	ldi	r19, 0x69	; 105
     fe8:	88 e1       	ldi	r24, 0x18	; 24
     fea:	21 50       	subi	r18, 0x01	; 1
     fec:	30 40       	sbci	r19, 0x00	; 0
     fee:	80 40       	sbci	r24, 0x00	; 0
     ff0:	e1 f7       	brne	.-8      	; 0xfea <__stack+0x78b>
     ff2:	00 c0       	rjmp	.+0      	; 0xff4 <__stack+0x795>
     ff4:	00 00       	nop
					}
					else//if the value is valid
					{
						LCD_Char(rxdata);//print the value on the lcd
						temp_ones = rxdata-ASCII_ZERO;//save the entered value
						rxdata = NOT_PRESSED;//set the key pressed to the default value
     ff6:	10 e0       	ldi	r17, 0x00	; 0
				break;//End of air conditioning control menu case
				
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 )//start the loop that asks for the temperature from the user
     ff8:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <temperature>
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <__stack+0x7a3>
    1000:	30 cf       	rjmp	.-416    	; 0xe62 <__stack+0x603>
					LCD_String("TEMP NOW");
					LCD_SetPos(2,9);
					LCD_String(adcstring);
					_delay_ms(500);
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
    1002:	09 2d       	mov	r16, r9
    1004:	01 c0       	rjmp	.+2      	; 0x1008 <__stack+0x7a9>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
				if (login_mode == GUEST)//in case of guest is logged in
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    1006:	01 e0       	ldi	r16, 0x01	; 1
		}
		
		/******************************************************************************************************************************************************************/
		u8 show_menu = MAIN_MENU;
		
		while(block_mode_flag!=TRUE)
    1008:	9b 85       	ldd	r25, Y+11	; 0x0b
    100a:	91 30       	cpi	r25, 0x01	; 1
    100c:	09 f0       	breq	.+2      	; 0x1010 <__stack+0x7b1>
    100e:	9a cc       	rjmp	.-1740   	; 0x944 <__stack+0xe5>
    1010:	0b ca       	rjmp	.-3050   	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
					{
						key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed
						_delay_ms(100);//to avoid the duplication of the pressed key(deboncy)
						if (key_pressed == SELECT_ROOM1)//If key pressed is 1
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
    1012:	03 e0       	ldi	r16, 0x03	; 3
    1014:	f9 cf       	rjmp	.-14     	; 0x1008 <__stack+0x7a9>
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
    1016:	04 e0       	ldi	r16, 0x04	; 4
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <__stack+0x7a9>
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
    101a:	05 e0       	ldi	r16, 0x05	; 5
    101c:	f5 cf       	rjmp	.-22     	; 0x1008 <__stack+0x7a9>
							Value = key_pressed;
						}
						else if (key_pressed == SELECT_ROOM4)//If key pressed is 4 and the logged in user is guest
						{
							show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    101e:	04 2d       	mov	r16, r4
    1020:	f3 cf       	rjmp	.-26     	; 0x1008 <__stack+0x7a9>
					{
						rxdata = u8GetTX(login_mode);//wait till receive value from bluetooth 
						_delay_ms(20);
						if (rxdata == SELECT_ROOM1)//If key pressed is 1
						{
							show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
    1022:	03 e0       	ldi	r16, 0x03	; 3
    1024:	f1 cf       	rjmp	.-30     	; 0x1008 <__stack+0x7a9>
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM2)//If key pressed is 2
						{
							show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
    1026:	04 e0       	ldi	r16, 0x04	; 4
    1028:	ef cf       	rjmp	.-34     	; 0x1008 <__stack+0x7a9>
							Value = rxdata;
						}
						else if (rxdata == SELECT_ROOM3)//If key pressed is 3
						{
							show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
    102a:	05 e0       	ldi	r16, 0x05	; 5
    102c:	ed cf       	rjmp	.-38     	; 0x1008 <__stack+0x7a9>
							Value = rxdata;
						}
						else if (rxdata == ADMIN_MORE_OPTION)//If key pressed is 4 and the logged in user is admin
						{
							show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    102e:	02 e0       	ldi	r16, 0x02	; 2
    1030:	eb cf       	rjmp	.-42     	; 0x1008 <__stack+0x7a9>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
    1032:	04 2d       	mov	r16, r4
    1034:	e9 cf       	rjmp	.-46     	; 0x1008 <__stack+0x7a9>
					}
					else if (rxdata == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
    1036:	07 e0       	ldi	r16, 0x07	; 7
    1038:	e7 cf       	rjmp	.-50     	; 0x1008 <__stack+0x7a9>
					}
					else if (rxdata == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
    103a:	09 2d       	mov	r16, r9
    103c:	e5 cf       	rjmp	.-54     	; 0x1008 <__stack+0x7a9>
					}
					else if (rxdata == ADMIN_LAST_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = LAST_MENU;//Set the next menu to be shown to main menu
    103e:	0c e0       	ldi	r16, 0x0C	; 12
    1040:	e3 cf       	rjmp	.-58     	; 0x1008 <__stack+0x7a9>
					LCD_String("3:DOOR ");
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_DIMMERLED)//If key pressed is 1
					{
						show_menu = DimmerLED_MENU;//Set the next menu to be shown to Air conditioning menu
    1042:	07 2d       	mov	r16, r7
    1044:	e1 cf       	rjmp	.-62     	; 0x1008 <__stack+0x7a9>
					}
					else if (rxdata == DOOR_OPT)//If key pressed is 3
					{
						show_menu=DOOR_MENU;//Set the next menu to be shown to DOOR_MENU
    1046:	0d e0       	ldi	r16, 0x0D	; 13
    1048:	df cf       	rjmp	.-66     	; 0x1008 <__stack+0x7a9>
					}
					else if (rxdata == ADMIN_RET_OPTION)//If key pressed is 2(RET)
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    104a:	01 e0       	ldi	r16, 0x01	; 1
    104c:	dd cf       	rjmp	.-70     	; 0x1008 <__stack+0x7a9>
					/*******************************************************/
					rxdata = u8GetTX(login_mode);
					
					if (rxdata == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
    104e:	08 2d       	mov	r16, r8
    1050:	db cf       	rjmp	.-74     	; 0x1008 <__stack+0x7a9>
					}
					else if (rxdata == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
    1052:	06 2d       	mov	r16, r6
    1054:	d9 cf       	rjmp	.-78     	; 0x1008 <__stack+0x7a9>
					}
					else if (rxdata == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
    1056:	02 e0       	ldi	r16, 0x02	; 2
    1058:	d7 cf       	rjmp	.-82     	; 0x1008 <__stack+0x7a9>
				} while (( (rxdata < '1') || (rxdata > '3') ));//break the loop in case of valid key 
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
    105a:	0c e0       	ldi	r16, 0x0C	; 12
    105c:	10 e0       	ldi	r17, 0x00	; 0
    105e:	d4 cf       	rjmp	.-88     	; 0x1008 <__stack+0x7a9>

00001060 <ui8ComparePass2>:
	return ret_value; // returns TRUE if the two PINs are equal, FALSE otherwise
}

u8 ui8ComparePass2(const u8* pass1, const u8* pass2, const u8 size)
{
	return (memcmp(pass1, pass2, size) == 0) ? TRUE : FALSE;
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	0e 94 35 13 	call	0x266a	; 0x266a <memcmp>
    1066:	21 e0       	ldi	r18, 0x01	; 1
    1068:	89 2b       	or	r24, r25
    106a:	09 f0       	breq	.+2      	; 0x106e <ui8ComparePass2+0xe>
    106c:	20 e0       	ldi	r18, 0x00	; 0
}
    106e:	82 2f       	mov	r24, r18
    1070:	08 95       	ret

00001072 <u8GetKeyPressed>:
u8 u8GetKeyPressed(const u8 u8LoginMode)
{
	u8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
	{
		key_pressed = GetKey();//if the user pressed any button in keypad save the value in key_pressed
    1072:	0e 94 15 0a 	call	0x142a	; 0x142a <GetKey>
    1076:	2f ef       	ldi	r18, 0xFF	; 255
    1078:	39 ef       	ldi	r19, 0xF9	; 249
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	21 50       	subi	r18, 0x01	; 1
    107e:	30 40       	sbci	r19, 0x00	; 0
    1080:	90 40       	sbci	r25, 0x00	; 0
    1082:	e1 f7       	brne	.-8      	; 0x107c <u8GetKeyPressed+0xa>
    1084:	00 c0       	rjmp	.+0      	; 0x1086 <u8GetKeyPressed+0x14>
    1086:	00 00       	nop
}

u8 u8GetKeyPressed(const u8 u8LoginMode)
{
	u8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
    1088:	88 23       	and	r24, r24
    108a:	99 f3       	breq	.-26     	; 0x1072 <u8GetKeyPressed>
	{
		key_pressed = GetKey();//if the user pressed any button in keypad save the value in key_pressed
		_delay_ms(20);
	}
	return key_pressed;
}
    108c:	08 95       	ret

0000108e <u8GetTX>:
u8 u8GetTX (const u8 TX)
{
	u8 data = NOT_PRESSED;
	while (data == 0)
	{
		data = Bluetooth_Receive();
    108e:	0e 94 93 09 	call	0x1326	; 0x1326 <Bluetooth_Receive>
    1092:	2f ef       	ldi	r18, 0xFF	; 255
    1094:	39 ef       	ldi	r19, 0xF9	; 249
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	21 50       	subi	r18, 0x01	; 1
    109a:	30 40       	sbci	r19, 0x00	; 0
    109c:	90 40       	sbci	r25, 0x00	; 0
    109e:	e1 f7       	brne	.-8      	; 0x1098 <u8GetTX+0xa>
    10a0:	00 c0       	rjmp	.+0      	; 0x10a2 <u8GetTX+0x14>
    10a2:	00 00       	nop
}

u8 u8GetTX (const u8 TX)
{
	u8 data = NOT_PRESSED;
	while (data == 0)
    10a4:	88 23       	and	r24, r24
    10a6:	99 f3       	breq	.-26     	; 0x108e <u8GetTX>
	{
		data = Bluetooth_Receive();
		_delay_ms(20);
	}
	return data;
}
    10a8:	08 95       	ret

000010aa <vMenuOption>:

void vMenuOption(const u8 u8SelectedRoom,const u8 u8LoginMode)
{
    10aa:	cf 92       	push	r12
    10ac:	df 92       	push	r13
    10ae:	ef 92       	push	r14
    10b0:	ff 92       	push	r15
    10b2:	0f 93       	push	r16
    10b4:	1f 93       	push	r17
    10b6:	cf 93       	push	r28
    10b8:	df 93       	push	r29
    10ba:	c8 2f       	mov	r28, r24
    10bc:	06 2f       	mov	r16, r22
	u8 u8StatusCode  = 0;//demand status code
	u8 u8TurnOnCode  = 0;//turn on the room or the device code
	u8 u8TurnOffCode = 0;//turn off the device or room
	u8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	u8 Statues=0;
	u8 value = 0;
    10be:	d0 e0       	ldi	r29, 0x00	; 0
{
	u8 u8StatusCode  = 0;//demand status code
	u8 u8TurnOnCode  = 0;//turn on the room or the device code
	u8 u8TurnOffCode = 0;//turn off the device or room
	u8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	u8 Statues=0;
    10c0:	10 e0       	ldi	r17, 0x00	; 0
			LCD_String("Air Cond. S:");
			break;
		}
		/************************************************************************************************************/
		
		switch(u8SelectedRoom)
    10c2:	c8 2e       	mov	r12, r24
    10c4:	d1 2c       	mov	r13, r1
	u8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	u8 Statues=0;
	u8 value = 0;
	do
	{
		LCD_Clear();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
    10c6:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
		

		switch(u8SelectedRoom)
    10ca:	c5 30       	cpi	r28, 0x05	; 5
    10cc:	b1 f0       	breq	.+44     	; 0x10fa <vMenuOption+0x50>
    10ce:	28 f4       	brcc	.+10     	; 0x10da <vMenuOption+0x30>
    10d0:	c3 30       	cpi	r28, 0x03	; 3
    10d2:	49 f0       	breq	.+18     	; 0x10e6 <vMenuOption+0x3c>
    10d4:	c4 30       	cpi	r28, 0x04	; 4
    10d6:	61 f0       	breq	.+24     	; 0x10f0 <vMenuOption+0x46>
    10d8:	24 c0       	rjmp	.+72     	; 0x1122 <vMenuOption+0x78>
    10da:	c7 30       	cpi	r28, 0x07	; 7
    10dc:	c1 f0       	breq	.+48     	; 0x110e <vMenuOption+0x64>
    10de:	90 f0       	brcs	.+36     	; 0x1104 <vMenuOption+0x5a>
    10e0:	c9 30       	cpi	r28, 0x09	; 9
    10e2:	d1 f0       	breq	.+52     	; 0x1118 <vMenuOption+0x6e>
    10e4:	1e c0       	rjmp	.+60     	; 0x1122 <vMenuOption+0x78>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_String("Room1 S:");
    10e6:	8c e8       	ldi	r24, 0x8C	; 140
    10e8:	94 e0       	ldi	r25, 0x04	; 4
    10ea:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    10ee:	23 c0       	rjmp	.+70     	; 0x1136 <vMenuOption+0x8c>
			
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_String("Room2 S:");
    10f0:	85 e9       	ldi	r24, 0x95	; 149
    10f2:	94 e0       	ldi	r25, 0x04	; 4
    10f4:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    10f8:	2f c0       	rjmp	.+94     	; 0x1158 <vMenuOption+0xae>
			
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_String("Room3 S:");
    10fa:	8e e9       	ldi	r24, 0x9E	; 158
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    1102:	3b c0       	rjmp	.+118    	; 0x117a <vMenuOption+0xd0>
			
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_String("Room4 S:");
    1104:	87 ea       	ldi	r24, 0xA7	; 167
    1106:	94 e0       	ldi	r25, 0x04	; 4
    1108:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    110c:	47 c0       	rjmp	.+142    	; 0x119c <vMenuOption+0xf2>
			
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_String("TV S:");
    110e:	80 eb       	ldi	r24, 0xB0	; 176
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    1116:	53 c0       	rjmp	.+166    	; 0x11be <vMenuOption+0x114>
			
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			LCD_String("Air Cond. S:");
    1118:	86 eb       	ldi	r24, 0xB6	; 182
    111a:	94 e0       	ldi	r25, 0x04	; 4
    111c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    1120:	5f c0       	rjmp	.+190    	; 0x11e0 <vMenuOption+0x136>
			break;
		}
		/************************************************************************************************************/
		
		switch(u8SelectedRoom)
    1122:	f6 01       	movw	r30, r12
    1124:	33 97       	sbiw	r30, 0x03	; 3
    1126:	ee 33       	cpi	r30, 0x3E	; 62
    1128:	f1 05       	cpc	r31, r1
    112a:	08 f0       	brcs	.+2      	; 0x112e <vMenuOption+0x84>
    112c:	71 c0       	rjmp	.+226    	; 0x1210 <vMenuOption+0x166>
    112e:	e9 5c       	subi	r30, 0xC9	; 201
    1130:	ff 4f       	sbci	r31, 0xFF	; 255
    1132:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__tablejump2__>
		{
			case ROOM1_MENU:
			if(DIO_ReadChannel(DIO_ChannelA1) == 1)
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	31 f4       	brne	.+12     	; 0x114c <vMenuOption+0xa2>
			{
				LCD_String("ON");//print the status on
    1140:	83 ec       	ldi	r24, 0xC3	; 195
    1142:	94 e0       	ldi	r25, 0x04	; 4
    1144:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues = 1;
    1148:	11 e0       	ldi	r17, 0x01	; 1
    114a:	62 c0       	rjmp	.+196    	; 0x1210 <vMenuOption+0x166>
			}
			else
			{
				LCD_String("OFF");//print the status off
    114c:	86 ec       	ldi	r24, 0xC6	; 198
    114e:	94 e0       	ldi	r25, 0x04	; 4
    1150:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues= 1;
    1154:	11 e0       	ldi	r17, 0x01	; 1
    1156:	5c c0       	rjmp	.+184    	; 0x1210 <vMenuOption+0x166>
			}break;
			
			case ROOM2_MENU:
			if(DIO_ReadChannel(DIO_ChannelB4) == 1)
    1158:	8c e0       	ldi	r24, 0x0C	; 12
    115a:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	31 f4       	brne	.+12     	; 0x116e <vMenuOption+0xc4>
			{
				LCD_String("ON");//print the status on
    1162:	83 ec       	ldi	r24, 0xC3	; 195
    1164:	94 e0       	ldi	r25, 0x04	; 4
    1166:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues = 12;
    116a:	1c e0       	ldi	r17, 0x0C	; 12
    116c:	51 c0       	rjmp	.+162    	; 0x1210 <vMenuOption+0x166>
			}
			else
			{
				LCD_String("OFF");//print the status off
    116e:	86 ec       	ldi	r24, 0xC6	; 198
    1170:	94 e0       	ldi	r25, 0x04	; 4
    1172:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues= 12;
    1176:	1c e0       	ldi	r17, 0x0C	; 12
    1178:	4b c0       	rjmp	.+150    	; 0x1210 <vMenuOption+0x166>
			}break;
			
			case ROOM3_MENU:
			if(DIO_ReadChannel(DIO_ChannelB5) == 1)
    117a:	8d e0       	ldi	r24, 0x0D	; 13
    117c:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    1180:	81 30       	cpi	r24, 0x01	; 1
    1182:	31 f4       	brne	.+12     	; 0x1190 <vMenuOption+0xe6>
			{
				LCD_String("ON");//print the status on
    1184:	83 ec       	ldi	r24, 0xC3	; 195
    1186:	94 e0       	ldi	r25, 0x04	; 4
    1188:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues = 13;
    118c:	1d e0       	ldi	r17, 0x0D	; 13
    118e:	40 c0       	rjmp	.+128    	; 0x1210 <vMenuOption+0x166>
			}
			else
			{
				LCD_String("OFF");//print the status off
    1190:	86 ec       	ldi	r24, 0xC6	; 198
    1192:	94 e0       	ldi	r25, 0x04	; 4
    1194:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues= 13;
    1198:	1d e0       	ldi	r17, 0x0D	; 13
    119a:	3a c0       	rjmp	.+116    	; 0x1210 <vMenuOption+0x166>
			}break;
			
			case ROOM4_MENU:
			if(DIO_ReadChannel(DIO_ChannelB6) == 1)
    119c:	8e e0       	ldi	r24, 0x0E	; 14
    119e:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	31 f4       	brne	.+12     	; 0x11b2 <vMenuOption+0x108>
			{
				LCD_String("ON");//print the status on
    11a6:	83 ec       	ldi	r24, 0xC3	; 195
    11a8:	94 e0       	ldi	r25, 0x04	; 4
    11aa:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues = 14;
    11ae:	1e e0       	ldi	r17, 0x0E	; 14
    11b0:	2f c0       	rjmp	.+94     	; 0x1210 <vMenuOption+0x166>
			}
			else
			{
				LCD_String("OFF");//print the status off
    11b2:	86 ec       	ldi	r24, 0xC6	; 198
    11b4:	94 e0       	ldi	r25, 0x04	; 4
    11b6:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues= 14;
    11ba:	1e e0       	ldi	r17, 0x0E	; 14
    11bc:	29 c0       	rjmp	.+82     	; 0x1210 <vMenuOption+0x166>
			}break;
			
			case TV_MENU:
			if(DIO_ReadChannel(DIO_ChannelD7) == 1)
    11be:	8f e1       	ldi	r24, 0x1F	; 31
    11c0:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    11c4:	81 30       	cpi	r24, 0x01	; 1
    11c6:	31 f4       	brne	.+12     	; 0x11d4 <vMenuOption+0x12a>
			{
				LCD_String("ON");//print the status on
    11c8:	83 ec       	ldi	r24, 0xC3	; 195
    11ca:	94 e0       	ldi	r25, 0x04	; 4
    11cc:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues = 31;
    11d0:	1f e1       	ldi	r17, 0x1F	; 31
    11d2:	1e c0       	rjmp	.+60     	; 0x1210 <vMenuOption+0x166>
			}
			else
			{
				LCD_String("OFF");//print the status off
    11d4:	86 ec       	ldi	r24, 0xC6	; 198
    11d6:	94 e0       	ldi	r25, 0x04	; 4
    11d8:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues= 31;
    11dc:	1f e1       	ldi	r17, 0x1F	; 31
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <vMenuOption+0x166>
			}break;
			
			case AIRCOND_CTRL_MENU:
			if(DIO_ReadChannel(DIO_ChannelB7) == 1)
    11e0:	8f e0       	ldi	r24, 0x0F	; 15
    11e2:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	31 f4       	brne	.+12     	; 0x11f6 <vMenuOption+0x14c>
			{
				LCD_String("ON");//print the status on
    11ea:	83 ec       	ldi	r24, 0xC3	; 195
    11ec:	94 e0       	ldi	r25, 0x04	; 4
    11ee:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues = 15;
    11f2:	1f e0       	ldi	r17, 0x0F	; 15
    11f4:	0d c0       	rjmp	.+26     	; 0x1210 <vMenuOption+0x166>
			}
			else
			{
				LCD_String("OFF");//print the status off
    11f6:	86 ec       	ldi	r24, 0xC6	; 198
    11f8:	94 e0       	ldi	r25, 0x04	; 4
    11fa:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
				Statues= 15;
    11fe:	1f e0       	ldi	r17, 0x0F	; 15
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <vMenuOption+0x166>
			}break;
			
			case SET_TEMPERATURE:
			required_temperature = temperature;//store the temperature in required temperature
    1202:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <temperature>
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    120c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			break;//break the switch case

		}
		
		LCD_SetPos(2,1);//move the cursor to the start of the second line
    1210:	61 e0       	ldi	r22, 0x01	; 1
    1212:	82 e0       	ldi	r24, 0x02	; 2
    1214:	0e 94 42 0b 	call	0x1684	; 0x1684 <LCD_SetPos>
		
		LCD_String("1-On 2-Off 0-RET");//print the sub menu
    1218:	8a ec       	ldi	r24, 0xCA	; 202
    121a:	94 e0       	ldi	r25, 0x04	; 4
    121c:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>

		/*******************************************************************************/
		if (login_mode == GUEST)
    1220:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
    1224:	82 30       	cpi	r24, 0x02	; 2
    1226:	81 f5       	brne	.+96     	; 0x1288 <vMenuOption+0x1de>
		{
			key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed
    1228:	80 2f       	mov	r24, r16
    122a:	0e 94 39 08 	call	0x1072	; 0x1072 <u8GetKeyPressed>
    122e:	2f ef       	ldi	r18, 0xFF	; 255
    1230:	31 ee       	ldi	r19, 0xE1	; 225
    1232:	94 e0       	ldi	r25, 0x04	; 4
    1234:	21 50       	subi	r18, 0x01	; 1
    1236:	30 40       	sbci	r19, 0x00	; 0
    1238:	90 40       	sbci	r25, 0x00	; 0
    123a:	e1 f7       	brne	.-8      	; 0x1234 <vMenuOption+0x18a>
    123c:	00 c0       	rjmp	.+0      	; 0x123e <vMenuOption+0x194>
    123e:	00 00       	nop
			_delay_ms(100);//to avoid the duplication of the pressed key

			/*there is no need to take any action in case of the user pressed 0(RET) key
			breaking the loop will be enough since it will be handled in the main*/

			if (key_pressed == '1')
    1240:	81 33       	cpi	r24, 0x31	; 49
    1242:	29 f4       	brne	.+10     	; 0x124e <vMenuOption+0x1a4>
			{
				
				DIO_WriteChannel(Statues,STD_High);//turn on the led of room 1
    1244:	61 e0       	ldi	r22, 0x01	; 1
    1246:	81 2f       	mov	r24, r17
    1248:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    124c:	53 c0       	rjmp	.+166    	; 0x12f4 <vMenuOption+0x24a>
				value = key_pressed;
			}
			else if (key_pressed == '2')
    124e:	82 33       	cpi	r24, 0x32	; 50
    1250:	29 f4       	brne	.+10     	; 0x125c <vMenuOption+0x1b2>
			{
				DIO_WriteChannel(Statues,STD_Low);
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	81 2f       	mov	r24, r17
    1256:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    125a:	4c c0       	rjmp	.+152    	; 0x12f4 <vMenuOption+0x24a>
				value = key_pressed;
			}
			else if (key_pressed == '0')
    125c:	80 33       	cpi	r24, 0x30	; 48
    125e:	09 f4       	brne	.+2      	; 0x1262 <vMenuOption+0x1b8>
    1260:	49 c0       	rjmp	.+146    	; 0x12f4 <vMenuOption+0x24a>
			{
				value = key_pressed;
			}
			
			else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
    1262:	88 23       	and	r24, r24
    1264:	09 f4       	brne	.+2      	; 0x1268 <vMenuOption+0x1be>
    1266:	41 c0       	rjmp	.+130    	; 0x12ea <vMenuOption+0x240>
			{
				LCD_Clear();//remove all previously printed characters on the LCD 
    1268:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
				LCD_String("Wrong input");//print error message
    126c:	84 e2       	ldi	r24, 0x24	; 36
    126e:	93 e0       	ldi	r25, 0x03	; 3
    1270:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    1274:	2f ef       	ldi	r18, 0xFF	; 255
    1276:	39 e6       	ldi	r19, 0x69	; 105
    1278:	88 e1       	ldi	r24, 0x18	; 24
    127a:	21 50       	subi	r18, 0x01	; 1
    127c:	30 40       	sbci	r19, 0x00	; 0
    127e:	80 40       	sbci	r24, 0x00	; 0
    1280:	e1 f7       	brne	.-8      	; 0x127a <vMenuOption+0x1d0>
    1282:	00 c0       	rjmp	.+0      	; 0x1284 <vMenuOption+0x1da>
    1284:	00 00       	nop
    1286:	31 c0       	rjmp	.+98     	; 0x12ea <vMenuOption+0x240>
				_delay_ms(500);//Halt the system for the given time in (ms)
				
			}
		}
		else if (login_mode == ADMIN)
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	79 f5       	brne	.+94     	; 0x12ea <vMenuOption+0x240>
		{
			Bluetooth_TransmaitString("1-On 2-Off 0-RET\n\r");
    128c:	8b ed       	ldi	r24, 0xDB	; 219
    128e:	94 e0       	ldi	r25, 0x04	; 4
    1290:	0e 94 90 09 	call	0x1320	; 0x1320 <Bluetooth_TransmaitString>
			rxdata = u8GetTX(login_mode);
    1294:	80 91 f2 04 	lds	r24, 0x04F2	; 0x8004f2 <login_mode>
    1298:	0e 94 47 08 	call	0x108e	; 0x108e <u8GetTX>
    129c:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <rxdata>

			if (rxdata == '1')
    12a0:	81 33       	cpi	r24, 0x31	; 49
    12a2:	39 f4       	brne	.+14     	; 0x12b2 <vMenuOption+0x208>
			{
				
				DIO_WriteChannel(Statues,STD_High);//turn on the led of room 1
    12a4:	61 e0       	ldi	r22, 0x01	; 1
    12a6:	81 2f       	mov	r24, r17
    12a8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
				value = rxdata;
    12ac:	d0 91 f1 04 	lds	r29, 0x04F1	; 0x8004f1 <rxdata>
    12b0:	1c c0       	rjmp	.+56     	; 0x12ea <vMenuOption+0x240>
			}
			else if (rxdata == '2')
    12b2:	82 33       	cpi	r24, 0x32	; 50
    12b4:	39 f4       	brne	.+14     	; 0x12c4 <vMenuOption+0x21a>
			{
				DIO_WriteChannel(Statues,STD_Low);
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	81 2f       	mov	r24, r17
    12ba:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
				value = rxdata;
    12be:	d0 91 f1 04 	lds	r29, 0x04F1	; 0x8004f1 <rxdata>
    12c2:	13 c0       	rjmp	.+38     	; 0x12ea <vMenuOption+0x240>
			}else if (rxdata == '2')
			{
				DIO_WriteChannel(Statues,STD_Low);
				value = rxdata;
			}
			else if (rxdata == '0')
    12c4:	80 33       	cpi	r24, 0x30	; 48
    12c6:	b1 f0       	breq	.+44     	; 0x12f4 <vMenuOption+0x24a>
			{
				value = rxdata;
			}
			
			else if( (rxdata != NOT_PRESSED) && (rxdata != '0') )//show wrong input message if the user entered non numeric value
    12c8:	88 23       	and	r24, r24
    12ca:	79 f0       	breq	.+30     	; 0x12ea <vMenuOption+0x240>
			{
				LCD_Clear();//remove all previously printed characters on the LCD 
    12cc:	0e 94 3e 0b 	call	0x167c	; 0x167c <LCD_Clear>
				LCD_String("Wrong input");//print error message
    12d0:	84 e2       	ldi	r24, 0x24	; 36
    12d2:	93 e0       	ldi	r25, 0x03	; 3
    12d4:	0e 94 28 0b 	call	0x1650	; 0x1650 <LCD_String>
    12d8:	9f ef       	ldi	r25, 0xFF	; 255
    12da:	29 e6       	ldi	r18, 0x69	; 105
    12dc:	38 e1       	ldi	r19, 0x18	; 24
    12de:	91 50       	subi	r25, 0x01	; 1
    12e0:	20 40       	sbci	r18, 0x00	; 0
    12e2:	30 40       	sbci	r19, 0x00	; 0
    12e4:	e1 f7       	brne	.-8      	; 0x12de <vMenuOption+0x234>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <vMenuOption+0x23e>
    12e8:	00 00       	nop
				_delay_ms(500);//Halt the system for the given time in (ms)
				//value = 0;
			}
		}
	}while ( ( (value < '0') || (value > '2') ));
    12ea:	80 ed       	ldi	r24, 0xD0	; 208
    12ec:	8d 0f       	add	r24, r29
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	08 f0       	brcs	.+2      	; 0x12f4 <vMenuOption+0x24a>
    12f2:	e9 ce       	rjmp	.-558    	; 0x10c6 <vMenuOption+0x1c>
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	08 95       	ret

00001306 <InitPWM>:

void InitPWM()
{
	DIO_ConfigChannel(DIO_ChannelB3, Output);
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	8b e0       	ldi	r24, 0x0B	; 11
    130a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_ConfigChannel>
	// Set PWM mode and configure clock source
	TCCR0 |= 1 << WGM00 | 1 << WGM01 | 1 << CS00 | 1 << COM01;
    130e:	83 b7       	in	r24, 0x33	; 51
    1310:	89 66       	ori	r24, 0x69	; 105
    1312:	83 bf       	out	0x33, r24	; 51
    1314:	08 95       	ret

00001316 <SetPWMOutPut>:
}

void SetPWMOutPut (u8 duty)
{
	OCR0 = duty;
    1316:	8c bf       	out	0x3c, r24	; 60
    1318:	08 95       	ret

0000131a <Bluetooth_Init>:
    131a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <UART_Init>
    131e:	08 95       	ret

00001320 <Bluetooth_TransmaitString>:
    1320:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <UART_TransmaitString>
    1324:	08 95       	ret

00001326 <Bluetooth_Receive>:
    1326:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <UART_Receive>
    132a:	08 95       	ret

0000132c <EEPROM_vReadBlockFromAddress>:
    132c:	e1 99       	sbic	0x1c, 1	; 28
    132e:	fe cf       	rjmp	.-4      	; 0x132c <EEPROM_vReadBlockFromAddress>
    1330:	41 15       	cp	r20, r1
    1332:	51 05       	cpc	r21, r1
    1334:	91 f0       	breq	.+36     	; 0x135a <EEPROM_vReadBlockFromAddress+0x2e>
    1336:	46 0f       	add	r20, r22
    1338:	57 1f       	adc	r21, r23
    133a:	fb 01       	movw	r30, r22
    133c:	9c 01       	movw	r18, r24
    133e:	26 1b       	sub	r18, r22
    1340:	37 0b       	sbc	r19, r23
    1342:	b9 01       	movw	r22, r18
    1344:	9b 01       	movw	r18, r22
    1346:	2e 0f       	add	r18, r30
    1348:	3f 1f       	adc	r19, r31
    134a:	3f bb       	out	0x1f, r19	; 31
    134c:	2e bb       	out	0x1e, r18	; 30
    134e:	e0 9a       	sbi	0x1c, 0	; 28
    1350:	9d b3       	in	r25, 0x1d	; 29
    1352:	91 93       	st	Z+, r25
    1354:	e4 17       	cp	r30, r20
    1356:	f5 07       	cpc	r31, r21
    1358:	a9 f7       	brne	.-22     	; 0x1344 <EEPROM_vReadBlockFromAddress+0x18>
    135a:	08 95       	ret

0000135c <EEPROM_vWriteBlockToAddress>:
    135c:	41 15       	cp	r20, r1
    135e:	51 05       	cpc	r21, r1
    1360:	c9 f0       	breq	.+50     	; 0x1394 <EEPROM_vWriteBlockToAddress+0x38>
    1362:	46 0f       	add	r20, r22
    1364:	57 1f       	adc	r21, r23
    1366:	fb 01       	movw	r30, r22
    1368:	9c 01       	movw	r18, r24
    136a:	26 1b       	sub	r18, r22
    136c:	37 0b       	sbc	r19, r23
    136e:	b9 01       	movw	r22, r18
    1370:	e1 99       	sbic	0x1c, 1	; 28
    1372:	fe cf       	rjmp	.-4      	; 0x1370 <EEPROM_vWriteBlockToAddress+0x14>
    1374:	9b 01       	movw	r18, r22
    1376:	2e 0f       	add	r18, r30
    1378:	3f 1f       	adc	r19, r31
    137a:	3f bb       	out	0x1f, r19	; 31
    137c:	2e bb       	out	0x1e, r18	; 30
    137e:	e0 9a       	sbi	0x1c, 0	; 28
    1380:	2d b3       	in	r18, 0x1d	; 29
    1382:	91 91       	ld	r25, Z+
    1384:	29 17       	cp	r18, r25
    1386:	19 f0       	breq	.+6      	; 0x138e <EEPROM_vWriteBlockToAddress+0x32>
    1388:	9d bb       	out	0x1d, r25	; 29
    138a:	e2 9a       	sbi	0x1c, 2	; 28
    138c:	e1 9a       	sbi	0x1c, 1	; 28
    138e:	e4 17       	cp	r30, r20
    1390:	f5 07       	cpc	r31, r21
    1392:	71 f7       	brne	.-36     	; 0x1370 <EEPROM_vWriteBlockToAddress+0x14>
    1394:	08 95       	ret

00001396 <EEPROM_ui8ReadByteFromAddress>:
    1396:	e1 99       	sbic	0x1c, 1	; 28
    1398:	fe cf       	rjmp	.-4      	; 0x1396 <EEPROM_ui8ReadByteFromAddress>
    139a:	9f bb       	out	0x1f, r25	; 31
    139c:	8e bb       	out	0x1e, r24	; 30
    139e:	e0 9a       	sbi	0x1c, 0	; 28
    13a0:	8d b3       	in	r24, 0x1d	; 29
    13a2:	08 95       	ret

000013a4 <EEPROM_vWriteByteToAddress>:
    13a4:	e1 99       	sbic	0x1c, 1	; 28
    13a6:	fe cf       	rjmp	.-4      	; 0x13a4 <EEPROM_vWriteByteToAddress>
    13a8:	9f bb       	out	0x1f, r25	; 31
    13aa:	8e bb       	out	0x1e, r24	; 30
    13ac:	e0 9a       	sbi	0x1c, 0	; 28
    13ae:	8d b3       	in	r24, 0x1d	; 29
    13b0:	86 17       	cp	r24, r22
    13b2:	19 f0       	breq	.+6      	; 0x13ba <EEPROM_vWriteByteToAddress+0x16>
    13b4:	6d bb       	out	0x1d, r22	; 29
    13b6:	e2 9a       	sbi	0x1c, 2	; 28
    13b8:	e1 9a       	sbi	0x1c, 1	; 28
    13ba:	08 95       	ret

000013bc <Keypad_Init>:
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	0f 93       	push	r16
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	cc e7       	ldi	r28, 0x7C	; 124
    13ca:	d0 e0       	ldi	r29, 0x00	; 0
    13cc:	0f 2e       	mov	r0, r31
    13ce:	f0 e8       	ldi	r31, 0x80	; 128
    13d0:	ef 2e       	mov	r14, r31
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	ff 2e       	mov	r15, r31
    13d6:	f0 2d       	mov	r31, r0
    13d8:	8e 01       	movw	r16, r28
    13da:	60 e0       	ldi	r22, 0x00	; 0
    13dc:	89 91       	ld	r24, Y+
    13de:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_ConfigChannel>
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	f8 01       	movw	r30, r16
    13e6:	80 81       	ld	r24, Z
    13e8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    13ec:	ce 15       	cp	r28, r14
    13ee:	df 05       	cpc	r29, r15
    13f0:	99 f7       	brne	.-26     	; 0x13d8 <Keypad_Init+0x1c>
    13f2:	c0 e8       	ldi	r28, 0x80	; 128
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
    13f6:	0f 2e       	mov	r0, r31
    13f8:	f4 e8       	ldi	r31, 0x84	; 132
    13fa:	ef 2e       	mov	r14, r31
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	ff 2e       	mov	r15, r31
    1400:	f0 2d       	mov	r31, r0
    1402:	8e 01       	movw	r16, r28
    1404:	61 e0       	ldi	r22, 0x01	; 1
    1406:	89 91       	ld	r24, Y+
    1408:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_ConfigChannel>
    140c:	61 e0       	ldi	r22, 0x01	; 1
    140e:	f8 01       	movw	r30, r16
    1410:	80 81       	ld	r24, Z
    1412:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    1416:	ce 15       	cp	r28, r14
    1418:	df 05       	cpc	r29, r15
    141a:	99 f7       	brne	.-26     	; 0x1402 <Keypad_Init+0x46>
    141c:	df 91       	pop	r29
    141e:	cf 91       	pop	r28
    1420:	1f 91       	pop	r17
    1422:	0f 91       	pop	r16
    1424:	ff 90       	pop	r15
    1426:	ef 90       	pop	r14
    1428:	08 95       	ret

0000142a <GetKey>:
    142a:	6f 92       	push	r6
    142c:	7f 92       	push	r7
    142e:	8f 92       	push	r8
    1430:	9f 92       	push	r9
    1432:	af 92       	push	r10
    1434:	bf 92       	push	r11
    1436:	cf 92       	push	r12
    1438:	df 92       	push	r13
    143a:	ef 92       	push	r14
    143c:	ff 92       	push	r15
    143e:	0f 93       	push	r16
    1440:	1f 93       	push	r17
    1442:	cf 93       	push	r28
    1444:	df 93       	push	r29
    1446:	00 e8       	ldi	r16, 0x80	; 128
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	c1 2c       	mov	r12, r1
    144c:	d1 2c       	mov	r13, r1
    144e:	46 01       	movw	r8, r12
    1450:	58 01       	movw	r10, r16
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	f8 01       	movw	r30, r16
    1456:	80 81       	ld	r24, Z
    1458:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    145c:	cc e7       	ldi	r28, 0x7C	; 124
    145e:	d0 e0       	ldi	r29, 0x00	; 0
    1460:	61 2c       	mov	r6, r1
    1462:	71 2c       	mov	r7, r1
    1464:	73 01       	movw	r14, r6
    1466:	89 91       	ld	r24, Y+
    1468:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    146c:	81 11       	cpse	r24, r1
    146e:	14 c0       	rjmp	.+40     	; 0x1498 <GetKey+0x6e>
    1470:	e3 01       	movw	r28, r6
    1472:	c4 58       	subi	r28, 0x84	; 132
    1474:	df 4f       	sbci	r29, 0xFF	; 255
    1476:	88 81       	ld	r24, Y
    1478:	0e 94 46 0c 	call	0x188c	; 0x188c <DIO_ReadChannel>
    147c:	88 23       	and	r24, r24
    147e:	d9 f3       	breq	.-10     	; 0x1476 <GetKey+0x4c>
    1480:	c4 01       	movw	r24, r8
    1482:	88 0f       	add	r24, r24
    1484:	99 1f       	adc	r25, r25
    1486:	88 0f       	add	r24, r24
    1488:	99 1f       	adc	r25, r25
    148a:	84 59       	subi	r24, 0x94	; 148
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	fc 01       	movw	r30, r24
    1490:	ee 0d       	add	r30, r14
    1492:	ff 1d       	adc	r31, r15
    1494:	80 81       	ld	r24, Z
    1496:	16 c0       	rjmp	.+44     	; 0x14c4 <GetKey+0x9a>
    1498:	ff ef       	ldi	r31, 0xFF	; 255
    149a:	6f 1a       	sub	r6, r31
    149c:	7f 0a       	sbc	r7, r31
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	68 16       	cp	r6, r24
    14a2:	71 04       	cpc	r7, r1
    14a4:	f9 f6       	brne	.-66     	; 0x1464 <GetKey+0x3a>
    14a6:	0f 5f       	subi	r16, 0xFF	; 255
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	61 e0       	ldi	r22, 0x01	; 1
    14ac:	f5 01       	movw	r30, r10
    14ae:	80 81       	ld	r24, Z
    14b0:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    14b4:	ff ef       	ldi	r31, 0xFF	; 255
    14b6:	cf 1a       	sub	r12, r31
    14b8:	df 0a       	sbc	r13, r31
    14ba:	84 e0       	ldi	r24, 0x04	; 4
    14bc:	c8 16       	cp	r12, r24
    14be:	d1 04       	cpc	r13, r1
    14c0:	31 f6       	brne	.-116    	; 0x144e <GetKey+0x24>
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	7f 90       	pop	r7
    14de:	6f 90       	pop	r6
    14e0:	08 95       	ret

000014e2 <LCD_Cmd>:
    14e2:	cf 93       	push	r28
    14e4:	c8 2f       	mov	r28, r24
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	89 e0       	ldi	r24, 0x09	; 9
    14ea:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    14ee:	80 e0       	ldi	r24, 0x00	; 0
    14f0:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_ReadPort>
    14f4:	8f 70       	andi	r24, 0x0F	; 15
    14f6:	9c 2f       	mov	r25, r28
    14f8:	90 7f       	andi	r25, 0xF0	; 240
    14fa:	68 2f       	mov	r22, r24
    14fc:	69 2b       	or	r22, r25
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_WritePort>
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	88 e0       	ldi	r24, 0x08	; 8
    1508:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    150c:	8f e8       	ldi	r24, 0x8F	; 143
    150e:	91 e0       	ldi	r25, 0x01	; 1
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <LCD_Cmd+0x2e>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <LCD_Cmd+0x34>
    1516:	00 00       	nop
    1518:	61 e0       	ldi	r22, 0x01	; 1
    151a:	88 e0       	ldi	r24, 0x08	; 8
    151c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1520:	8f e1       	ldi	r24, 0x1F	; 31
    1522:	9e e4       	ldi	r25, 0x4E	; 78
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <LCD_Cmd+0x42>
    1528:	00 c0       	rjmp	.+0      	; 0x152a <LCD_Cmd+0x48>
    152a:	00 00       	nop
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_ReadPort>
    1532:	8f 70       	andi	r24, 0x0F	; 15
    1534:	90 e1       	ldi	r25, 0x10	; 16
    1536:	c9 9f       	mul	r28, r25
    1538:	90 01       	movw	r18, r0
    153a:	11 24       	eor	r1, r1
    153c:	68 2f       	mov	r22, r24
    153e:	62 2b       	or	r22, r18
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_WritePort>
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	88 e0       	ldi	r24, 0x08	; 8
    154a:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    154e:	8f e8       	ldi	r24, 0x8F	; 143
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <LCD_Cmd+0x70>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <LCD_Cmd+0x76>
    1558:	00 00       	nop
    155a:	61 e0       	ldi	r22, 0x01	; 1
    155c:	88 e0       	ldi	r24, 0x08	; 8
    155e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1562:	8f e3       	ldi	r24, 0x3F	; 63
    1564:	9f e1       	ldi	r25, 0x1F	; 31
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <LCD_Cmd+0x84>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <LCD_Cmd+0x8a>
    156c:	00 00       	nop
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <LCD_Init>:
    1572:	60 e0       	ldi	r22, 0x00	; 0
    1574:	8a e0       	ldi	r24, 0x0A	; 10
    1576:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	88 e0       	ldi	r24, 0x08	; 8
    157e:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    1582:	2f ef       	ldi	r18, 0xFF	; 255
    1584:	89 ef       	ldi	r24, 0xF9	; 249
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	21 50       	subi	r18, 0x01	; 1
    158a:	80 40       	sbci	r24, 0x00	; 0
    158c:	90 40       	sbci	r25, 0x00	; 0
    158e:	e1 f7       	brne	.-8      	; 0x1588 <LCD_Init+0x16>
    1590:	00 c0       	rjmp	.+0      	; 0x1592 <LCD_Init+0x20>
    1592:	00 00       	nop
    1594:	83 e3       	ldi	r24, 0x33	; 51
    1596:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    159a:	82 e3       	ldi	r24, 0x32	; 50
    159c:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    15a0:	88 e2       	ldi	r24, 0x28	; 40
    15a2:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    15a6:	86 e0       	ldi	r24, 0x06	; 6
    15a8:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    15ac:	8f e0       	ldi	r24, 0x0F	; 15
    15ae:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    15b2:	8f e3       	ldi	r24, 0x3F	; 63
    15b4:	9f e1       	ldi	r25, 0x1F	; 31
    15b6:	01 97       	sbiw	r24, 0x01	; 1
    15b8:	f1 f7       	brne	.-4      	; 0x15b6 <LCD_Init+0x44>
    15ba:	00 c0       	rjmp	.+0      	; 0x15bc <LCD_Init+0x4a>
    15bc:	00 00       	nop
    15be:	08 95       	ret

000015c0 <LCD_Char>:
    15c0:	cf 93       	push	r28
    15c2:	c8 2f       	mov	r28, r24
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	89 e0       	ldi	r24, 0x09	; 9
    15c8:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_ReadPort>
    15d2:	8f 70       	andi	r24, 0x0F	; 15
    15d4:	9c 2f       	mov	r25, r28
    15d6:	90 7f       	andi	r25, 0xF0	; 240
    15d8:	68 2f       	mov	r22, r24
    15da:	69 2b       	or	r22, r25
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_WritePort>
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	88 e0       	ldi	r24, 0x08	; 8
    15e6:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ea:	8f e8       	ldi	r24, 0x8F	; 143
    15ec:	91 e0       	ldi	r25, 0x01	; 1
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <LCD_Char+0x2e>
    15f2:	00 c0       	rjmp	.+0      	; 0x15f4 <LCD_Char+0x34>
    15f4:	00 00       	nop
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	88 e0       	ldi	r24, 0x08	; 8
    15fa:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15fe:	8f e1       	ldi	r24, 0x1F	; 31
    1600:	9e e4       	ldi	r25, 0x4E	; 78
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	f1 f7       	brne	.-4      	; 0x1602 <LCD_Char+0x42>
    1606:	00 c0       	rjmp	.+0      	; 0x1608 <LCD_Char+0x48>
    1608:	00 00       	nop
    160a:	80 e0       	ldi	r24, 0x00	; 0
    160c:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <DIO_ReadPort>
    1610:	8f 70       	andi	r24, 0x0F	; 15
    1612:	90 e1       	ldi	r25, 0x10	; 16
    1614:	c9 9f       	mul	r28, r25
    1616:	90 01       	movw	r18, r0
    1618:	11 24       	eor	r1, r1
    161a:	68 2f       	mov	r22, r24
    161c:	62 2b       	or	r22, r18
    161e:	80 e0       	ldi	r24, 0x00	; 0
    1620:	0e 94 0d 0d 	call	0x1a1a	; 0x1a1a <DIO_WritePort>
    1624:	60 e0       	ldi	r22, 0x00	; 0
    1626:	88 e0       	ldi	r24, 0x08	; 8
    1628:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    162c:	8f e8       	ldi	r24, 0x8F	; 143
    162e:	91 e0       	ldi	r25, 0x01	; 1
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_Char+0x70>
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <LCD_Char+0x76>
    1636:	00 00       	nop
    1638:	61 e0       	ldi	r22, 0x01	; 1
    163a:	88 e0       	ldi	r24, 0x08	; 8
    163c:	0e 94 c4 0b 	call	0x1788	; 0x1788 <DIO_WriteChannel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1640:	8f e3       	ldi	r24, 0x3F	; 63
    1642:	9f e1       	ldi	r25, 0x1F	; 31
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <LCD_Char+0x84>
    1648:	00 c0       	rjmp	.+0      	; 0x164a <LCD_Char+0x8a>
    164a:	00 00       	nop
    164c:	cf 91       	pop	r28
    164e:	08 95       	ret

00001650 <LCD_String>:
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
    1654:	cf 93       	push	r28
    1656:	fc 01       	movw	r30, r24
    1658:	80 81       	ld	r24, Z
    165a:	88 23       	and	r24, r24
    165c:	59 f0       	breq	.+22     	; 0x1674 <LCD_String+0x24>
    165e:	8f 01       	movw	r16, r30
    1660:	c0 e0       	ldi	r28, 0x00	; 0
    1662:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_Char>
    1666:	cf 5f       	subi	r28, 0xFF	; 255
    1668:	f8 01       	movw	r30, r16
    166a:	ec 0f       	add	r30, r28
    166c:	f1 1d       	adc	r31, r1
    166e:	80 81       	ld	r24, Z
    1670:	81 11       	cpse	r24, r1
    1672:	f7 cf       	rjmp	.-18     	; 0x1662 <LCD_String+0x12>
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	08 95       	ret

0000167c <LCD_Clear>:
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    1682:	08 95       	ret

00001684 <LCD_SetPos>:
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	19 f0       	breq	.+6      	; 0x168e <LCD_SetPos+0xa>
    1688:	82 30       	cpi	r24, 0x02	; 2
    168a:	39 f0       	breq	.+14     	; 0x169a <LCD_SetPos+0x16>
    168c:	08 95       	ret
    168e:	86 2f       	mov	r24, r22
    1690:	8f 70       	andi	r24, 0x0F	; 15
    1692:	80 68       	ori	r24, 0x80	; 128
    1694:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    1698:	08 95       	ret
    169a:	86 2f       	mov	r24, r22
    169c:	8f 70       	andi	r24, 0x0F	; 15
    169e:	80 6c       	ori	r24, 0xC0	; 192
    16a0:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <LCD_Cmd>
    16a4:	08 95       	ret

000016a6 <LM35_Init>:
    16a6:	0e 94 a9 0b 	call	0x1752	; 0x1752 <ADC_Init>
    16aa:	08 95       	ret

000016ac <LM35_Read>:
    16ac:	0e 94 b6 0b 	call	0x176c	; 0x176c <ADC_Read>
    16b0:	96 95       	lsr	r25
    16b2:	87 95       	ror	r24
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	08 95       	ret

000016ba <ServoMotor>:
    16ba:	cf 92       	push	r12
    16bc:	df 92       	push	r13
    16be:	ef 92       	push	r14
    16c0:	ff 92       	push	r15
    16c2:	cf 93       	push	r28
    16c4:	df 93       	push	r29
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	28 97       	sbiw	r28, 0x08	; 8
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	6b 01       	movw	r12, r22
    16d8:	7c 01       	movw	r14, r24
    16da:	61 e0       	ldi	r22, 0x01	; 1
    16dc:	8d e1       	ldi	r24, 0x1D	; 29
    16de:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <DIO_ConfigChannel>
    16e2:	67 e8       	ldi	r22, 0x87	; 135
    16e4:	73 e1       	ldi	r23, 0x13	; 19
    16e6:	82 e0       	ldi	r24, 0x02	; 2
    16e8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <Timer1_SetValue>
    16ec:	2c e1       	ldi	r18, 0x1C	; 28
    16ee:	37 ec       	ldi	r19, 0xC7	; 199
    16f0:	41 eb       	ldi	r20, 0xB1	; 177
    16f2:	5f e3       	ldi	r21, 0x3F	; 63
    16f4:	c7 01       	movw	r24, r14
    16f6:	b6 01       	movw	r22, r12
    16f8:	0e 94 a0 12 	call	0x2540	; 0x2540 <__mulsf3>
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a e7       	ldi	r20, 0x7A	; 122
    1702:	53 e4       	ldi	r21, 0x43	; 67
    1704:	0e 94 b4 11 	call	0x2368	; 0x2368 <__addsf3>
    1708:	20 e0       	ldi	r18, 0x00	; 0
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	0e 94 b3 11 	call	0x2366	; 0x2366 <__subsf3>
    1714:	0e 94 20 12 	call	0x2440	; 0x2440 <__fixunssfsi>
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <Timer1_SetValue>
    171e:	88 e0       	ldi	r24, 0x08	; 8
    1720:	e4 ec       	ldi	r30, 0xC4	; 196
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	de 01       	movw	r26, r28
    1726:	11 96       	adiw	r26, 0x01	; 1
    1728:	01 90       	ld	r0, Z+
    172a:	0d 92       	st	X+, r0
    172c:	8a 95       	dec	r24
    172e:	e1 f7       	brne	.-8      	; 0x1728 <ServoMotor+0x6e>
    1730:	ce 01       	movw	r24, r28
    1732:	01 96       	adiw	r24, 0x01	; 1
    1734:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <Timer1_Init>
    1738:	28 96       	adiw	r28, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	cd bf       	out	0x3d, r28	; 61
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	ff 90       	pop	r15
    174a:	ef 90       	pop	r14
    174c:	df 90       	pop	r13
    174e:	cf 90       	pop	r12
    1750:	08 95       	ret

00001752 <ADC_Init>:
    1752:	fc 01       	movw	r30, r24
    1754:	90 81       	ld	r25, Z
    1756:	92 95       	swap	r25
    1758:	99 0f       	add	r25, r25
    175a:	99 0f       	add	r25, r25
    175c:	90 7c       	andi	r25, 0xC0	; 192
    175e:	97 b9       	out	0x07, r25	; 7
    1760:	96 b1       	in	r25, 0x06	; 6
    1762:	81 81       	ldd	r24, Z+1	; 0x01
    1764:	89 2b       	or	r24, r25
    1766:	86 b9       	out	0x06, r24	; 6
    1768:	37 9a       	sbi	0x06, 7	; 6
    176a:	08 95       	ret

0000176c <ADC_Read>:
    176c:	97 b1       	in	r25, 0x07	; 7
    176e:	90 7e       	andi	r25, 0xE0	; 224
    1770:	8f 71       	andi	r24, 0x1F	; 31
    1772:	89 2b       	or	r24, r25
    1774:	87 b9       	out	0x07, r24	; 7
    1776:	36 9a       	sbi	0x06, 6	; 6
    1778:	34 9b       	sbis	0x06, 4	; 6
    177a:	fe cf       	rjmp	.-4      	; 0x1778 <ADC_Read+0xc>
    177c:	34 9a       	sbi	0x06, 4	; 6
    177e:	84 b1       	in	r24, 0x04	; 4
    1780:	25 b1       	in	r18, 0x05	; 5
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	92 2b       	or	r25, r18
    1786:	08 95       	ret

00001788 <DIO_WriteChannel>:
    1788:	98 2f       	mov	r25, r24
    178a:	97 70       	andi	r25, 0x07	; 7
    178c:	86 95       	lsr	r24
    178e:	86 95       	lsr	r24
    1790:	86 95       	lsr	r24
    1792:	81 30       	cpi	r24, 0x01	; 1
    1794:	21 f1       	breq	.+72     	; 0x17de <DIO_WriteChannel+0x56>
    1796:	30 f0       	brcs	.+12     	; 0x17a4 <DIO_WriteChannel+0x1c>
    1798:	82 30       	cpi	r24, 0x02	; 2
    179a:	f1 f1       	breq	.+124    	; 0x1818 <DIO_WriteChannel+0x90>
    179c:	83 30       	cpi	r24, 0x03	; 3
    179e:	09 f4       	brne	.+2      	; 0x17a2 <DIO_WriteChannel+0x1a>
    17a0:	58 c0       	rjmp	.+176    	; 0x1852 <DIO_WriteChannel+0xca>
    17a2:	08 95       	ret
    17a4:	61 30       	cpi	r22, 0x01	; 1
    17a6:	69 f4       	brne	.+26     	; 0x17c2 <DIO_WriteChannel+0x3a>
    17a8:	4b b3       	in	r20, 0x1b	; 27
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	b9 01       	movw	r22, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <DIO_WriteChannel+0x2e>
    17b2:	66 0f       	add	r22, r22
    17b4:	77 1f       	adc	r23, r23
    17b6:	9a 95       	dec	r25
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <DIO_WriteChannel+0x2a>
    17ba:	cb 01       	movw	r24, r22
    17bc:	84 2b       	or	r24, r20
    17be:	8b bb       	out	0x1b, r24	; 27
    17c0:	08 95       	ret
    17c2:	4b b3       	in	r20, 0x1b	; 27
    17c4:	21 e0       	ldi	r18, 0x01	; 1
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	b9 01       	movw	r22, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_WriteChannel+0x48>
    17cc:	66 0f       	add	r22, r22
    17ce:	77 1f       	adc	r23, r23
    17d0:	9a 95       	dec	r25
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_WriteChannel+0x44>
    17d4:	cb 01       	movw	r24, r22
    17d6:	80 95       	com	r24
    17d8:	84 23       	and	r24, r20
    17da:	8b bb       	out	0x1b, r24	; 27
    17dc:	08 95       	ret
    17de:	61 30       	cpi	r22, 0x01	; 1
    17e0:	69 f4       	brne	.+26     	; 0x17fc <DIO_WriteChannel+0x74>
    17e2:	48 b3       	in	r20, 0x18	; 24
    17e4:	21 e0       	ldi	r18, 0x01	; 1
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	b9 01       	movw	r22, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <DIO_WriteChannel+0x68>
    17ec:	66 0f       	add	r22, r22
    17ee:	77 1f       	adc	r23, r23
    17f0:	9a 95       	dec	r25
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <DIO_WriteChannel+0x64>
    17f4:	cb 01       	movw	r24, r22
    17f6:	84 2b       	or	r24, r20
    17f8:	88 bb       	out	0x18, r24	; 24
    17fa:	08 95       	ret
    17fc:	48 b3       	in	r20, 0x18	; 24
    17fe:	21 e0       	ldi	r18, 0x01	; 1
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	b9 01       	movw	r22, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_WriteChannel+0x82>
    1806:	66 0f       	add	r22, r22
    1808:	77 1f       	adc	r23, r23
    180a:	9a 95       	dec	r25
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_WriteChannel+0x7e>
    180e:	cb 01       	movw	r24, r22
    1810:	80 95       	com	r24
    1812:	84 23       	and	r24, r20
    1814:	88 bb       	out	0x18, r24	; 24
    1816:	08 95       	ret
    1818:	61 30       	cpi	r22, 0x01	; 1
    181a:	69 f4       	brne	.+26     	; 0x1836 <DIO_WriteChannel+0xae>
    181c:	45 b3       	in	r20, 0x15	; 21
    181e:	21 e0       	ldi	r18, 0x01	; 1
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	b9 01       	movw	r22, r18
    1824:	02 c0       	rjmp	.+4      	; 0x182a <DIO_WriteChannel+0xa2>
    1826:	66 0f       	add	r22, r22
    1828:	77 1f       	adc	r23, r23
    182a:	9a 95       	dec	r25
    182c:	e2 f7       	brpl	.-8      	; 0x1826 <DIO_WriteChannel+0x9e>
    182e:	cb 01       	movw	r24, r22
    1830:	84 2b       	or	r24, r20
    1832:	85 bb       	out	0x15, r24	; 21
    1834:	08 95       	ret
    1836:	45 b3       	in	r20, 0x15	; 21
    1838:	21 e0       	ldi	r18, 0x01	; 1
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	b9 01       	movw	r22, r18
    183e:	02 c0       	rjmp	.+4      	; 0x1844 <DIO_WriteChannel+0xbc>
    1840:	66 0f       	add	r22, r22
    1842:	77 1f       	adc	r23, r23
    1844:	9a 95       	dec	r25
    1846:	e2 f7       	brpl	.-8      	; 0x1840 <DIO_WriteChannel+0xb8>
    1848:	cb 01       	movw	r24, r22
    184a:	80 95       	com	r24
    184c:	84 23       	and	r24, r20
    184e:	85 bb       	out	0x15, r24	; 21
    1850:	08 95       	ret
    1852:	61 30       	cpi	r22, 0x01	; 1
    1854:	69 f4       	brne	.+26     	; 0x1870 <DIO_WriteChannel+0xe8>
    1856:	42 b3       	in	r20, 0x12	; 18
    1858:	21 e0       	ldi	r18, 0x01	; 1
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	b9 01       	movw	r22, r18
    185e:	02 c0       	rjmp	.+4      	; 0x1864 <DIO_WriteChannel+0xdc>
    1860:	66 0f       	add	r22, r22
    1862:	77 1f       	adc	r23, r23
    1864:	9a 95       	dec	r25
    1866:	e2 f7       	brpl	.-8      	; 0x1860 <DIO_WriteChannel+0xd8>
    1868:	cb 01       	movw	r24, r22
    186a:	84 2b       	or	r24, r20
    186c:	82 bb       	out	0x12, r24	; 18
    186e:	08 95       	ret
    1870:	42 b3       	in	r20, 0x12	; 18
    1872:	21 e0       	ldi	r18, 0x01	; 1
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	b9 01       	movw	r22, r18
    1878:	02 c0       	rjmp	.+4      	; 0x187e <DIO_WriteChannel+0xf6>
    187a:	66 0f       	add	r22, r22
    187c:	77 1f       	adc	r23, r23
    187e:	9a 95       	dec	r25
    1880:	e2 f7       	brpl	.-8      	; 0x187a <DIO_WriteChannel+0xf2>
    1882:	cb 01       	movw	r24, r22
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	82 bb       	out	0x12, r24	; 18
    188a:	08 95       	ret

0000188c <DIO_ReadChannel>:
    188c:	28 2f       	mov	r18, r24
    188e:	27 70       	andi	r18, 0x07	; 7
    1890:	86 95       	lsr	r24
    1892:	86 95       	lsr	r24
    1894:	86 95       	lsr	r24
    1896:	81 30       	cpi	r24, 0x01	; 1
    1898:	79 f0       	breq	.+30     	; 0x18b8 <DIO_ReadChannel+0x2c>
    189a:	28 f0       	brcs	.+10     	; 0x18a6 <DIO_ReadChannel+0x1a>
    189c:	82 30       	cpi	r24, 0x02	; 2
    189e:	a9 f0       	breq	.+42     	; 0x18ca <DIO_ReadChannel+0x3e>
    18a0:	83 30       	cpi	r24, 0x03	; 3
    18a2:	e1 f0       	breq	.+56     	; 0x18dc <DIO_ReadChannel+0x50>
    18a4:	24 c0       	rjmp	.+72     	; 0x18ee <DIO_ReadChannel+0x62>
    18a6:	89 b3       	in	r24, 0x19	; 25
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <DIO_ReadChannel+0x24>
    18ac:	95 95       	asr	r25
    18ae:	87 95       	ror	r24
    18b0:	2a 95       	dec	r18
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <DIO_ReadChannel+0x20>
    18b4:	81 70       	andi	r24, 0x01	; 1
    18b6:	08 95       	ret
    18b8:	86 b3       	in	r24, 0x16	; 22
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_ReadChannel+0x36>
    18be:	95 95       	asr	r25
    18c0:	87 95       	ror	r24
    18c2:	2a 95       	dec	r18
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_ReadChannel+0x32>
    18c6:	81 70       	andi	r24, 0x01	; 1
    18c8:	08 95       	ret
    18ca:	83 b3       	in	r24, 0x13	; 19
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <DIO_ReadChannel+0x48>
    18d0:	95 95       	asr	r25
    18d2:	87 95       	ror	r24
    18d4:	2a 95       	dec	r18
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <DIO_ReadChannel+0x44>
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	08 95       	ret
    18dc:	80 b3       	in	r24, 0x10	; 16
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <DIO_ReadChannel+0x5a>
    18e2:	95 95       	asr	r25
    18e4:	87 95       	ror	r24
    18e6:	2a 95       	dec	r18
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <DIO_ReadChannel+0x56>
    18ea:	81 70       	andi	r24, 0x01	; 1
    18ec:	08 95       	ret
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	08 95       	ret

000018f2 <DIO_ConfigChannel>:
    18f2:	98 2f       	mov	r25, r24
    18f4:	97 70       	andi	r25, 0x07	; 7
    18f6:	86 95       	lsr	r24
    18f8:	86 95       	lsr	r24
    18fa:	86 95       	lsr	r24
    18fc:	81 30       	cpi	r24, 0x01	; 1
    18fe:	21 f1       	breq	.+72     	; 0x1948 <DIO_ConfigChannel+0x56>
    1900:	30 f0       	brcs	.+12     	; 0x190e <DIO_ConfigChannel+0x1c>
    1902:	82 30       	cpi	r24, 0x02	; 2
    1904:	f1 f1       	breq	.+124    	; 0x1982 <DIO_ConfigChannel+0x90>
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	09 f4       	brne	.+2      	; 0x190c <DIO_ConfigChannel+0x1a>
    190a:	58 c0       	rjmp	.+176    	; 0x19bc <DIO_ConfigChannel+0xca>
    190c:	08 95       	ret
    190e:	61 30       	cpi	r22, 0x01	; 1
    1910:	69 f4       	brne	.+26     	; 0x192c <DIO_ConfigChannel+0x3a>
    1912:	4a b3       	in	r20, 0x1a	; 26
    1914:	21 e0       	ldi	r18, 0x01	; 1
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	b9 01       	movw	r22, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <DIO_ConfigChannel+0x2e>
    191c:	66 0f       	add	r22, r22
    191e:	77 1f       	adc	r23, r23
    1920:	9a 95       	dec	r25
    1922:	e2 f7       	brpl	.-8      	; 0x191c <DIO_ConfigChannel+0x2a>
    1924:	cb 01       	movw	r24, r22
    1926:	84 2b       	or	r24, r20
    1928:	8a bb       	out	0x1a, r24	; 26
    192a:	08 95       	ret
    192c:	4a b3       	in	r20, 0x1a	; 26
    192e:	21 e0       	ldi	r18, 0x01	; 1
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	b9 01       	movw	r22, r18
    1934:	02 c0       	rjmp	.+4      	; 0x193a <DIO_ConfigChannel+0x48>
    1936:	66 0f       	add	r22, r22
    1938:	77 1f       	adc	r23, r23
    193a:	9a 95       	dec	r25
    193c:	e2 f7       	brpl	.-8      	; 0x1936 <DIO_ConfigChannel+0x44>
    193e:	cb 01       	movw	r24, r22
    1940:	80 95       	com	r24
    1942:	84 23       	and	r24, r20
    1944:	8a bb       	out	0x1a, r24	; 26
    1946:	08 95       	ret
    1948:	61 30       	cpi	r22, 0x01	; 1
    194a:	69 f4       	brne	.+26     	; 0x1966 <DIO_ConfigChannel+0x74>
    194c:	47 b3       	in	r20, 0x17	; 23
    194e:	21 e0       	ldi	r18, 0x01	; 1
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	b9 01       	movw	r22, r18
    1954:	02 c0       	rjmp	.+4      	; 0x195a <DIO_ConfigChannel+0x68>
    1956:	66 0f       	add	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	9a 95       	dec	r25
    195c:	e2 f7       	brpl	.-8      	; 0x1956 <DIO_ConfigChannel+0x64>
    195e:	cb 01       	movw	r24, r22
    1960:	84 2b       	or	r24, r20
    1962:	87 bb       	out	0x17, r24	; 23
    1964:	08 95       	ret
    1966:	47 b3       	in	r20, 0x17	; 23
    1968:	21 e0       	ldi	r18, 0x01	; 1
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	b9 01       	movw	r22, r18
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <DIO_ConfigChannel+0x82>
    1970:	66 0f       	add	r22, r22
    1972:	77 1f       	adc	r23, r23
    1974:	9a 95       	dec	r25
    1976:	e2 f7       	brpl	.-8      	; 0x1970 <DIO_ConfigChannel+0x7e>
    1978:	cb 01       	movw	r24, r22
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	87 bb       	out	0x17, r24	; 23
    1980:	08 95       	ret
    1982:	61 30       	cpi	r22, 0x01	; 1
    1984:	69 f4       	brne	.+26     	; 0x19a0 <DIO_ConfigChannel+0xae>
    1986:	44 b3       	in	r20, 0x14	; 20
    1988:	21 e0       	ldi	r18, 0x01	; 1
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	b9 01       	movw	r22, r18
    198e:	02 c0       	rjmp	.+4      	; 0x1994 <DIO_ConfigChannel+0xa2>
    1990:	66 0f       	add	r22, r22
    1992:	77 1f       	adc	r23, r23
    1994:	9a 95       	dec	r25
    1996:	e2 f7       	brpl	.-8      	; 0x1990 <DIO_ConfigChannel+0x9e>
    1998:	cb 01       	movw	r24, r22
    199a:	84 2b       	or	r24, r20
    199c:	84 bb       	out	0x14, r24	; 20
    199e:	08 95       	ret
    19a0:	44 b3       	in	r20, 0x14	; 20
    19a2:	21 e0       	ldi	r18, 0x01	; 1
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	b9 01       	movw	r22, r18
    19a8:	02 c0       	rjmp	.+4      	; 0x19ae <DIO_ConfigChannel+0xbc>
    19aa:	66 0f       	add	r22, r22
    19ac:	77 1f       	adc	r23, r23
    19ae:	9a 95       	dec	r25
    19b0:	e2 f7       	brpl	.-8      	; 0x19aa <DIO_ConfigChannel+0xb8>
    19b2:	cb 01       	movw	r24, r22
    19b4:	80 95       	com	r24
    19b6:	84 23       	and	r24, r20
    19b8:	84 bb       	out	0x14, r24	; 20
    19ba:	08 95       	ret
    19bc:	61 30       	cpi	r22, 0x01	; 1
    19be:	69 f4       	brne	.+26     	; 0x19da <DIO_ConfigChannel+0xe8>
    19c0:	41 b3       	in	r20, 0x11	; 17
    19c2:	21 e0       	ldi	r18, 0x01	; 1
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	b9 01       	movw	r22, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_ConfigChannel+0xdc>
    19ca:	66 0f       	add	r22, r22
    19cc:	77 1f       	adc	r23, r23
    19ce:	9a 95       	dec	r25
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_ConfigChannel+0xd8>
    19d2:	cb 01       	movw	r24, r22
    19d4:	84 2b       	or	r24, r20
    19d6:	81 bb       	out	0x11, r24	; 17
    19d8:	08 95       	ret
    19da:	41 b3       	in	r20, 0x11	; 17
    19dc:	21 e0       	ldi	r18, 0x01	; 1
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	b9 01       	movw	r22, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_ConfigChannel+0xf6>
    19e4:	66 0f       	add	r22, r22
    19e6:	77 1f       	adc	r23, r23
    19e8:	9a 95       	dec	r25
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_ConfigChannel+0xf2>
    19ec:	cb 01       	movw	r24, r22
    19ee:	80 95       	com	r24
    19f0:	84 23       	and	r24, r20
    19f2:	81 bb       	out	0x11, r24	; 17
    19f4:	08 95       	ret

000019f6 <DIO_ReadPort>:
    19f6:	81 30       	cpi	r24, 0x01	; 1
    19f8:	41 f0       	breq	.+16     	; 0x1a0a <DIO_ReadPort+0x14>
    19fa:	28 f0       	brcs	.+10     	; 0x1a06 <DIO_ReadPort+0x10>
    19fc:	82 30       	cpi	r24, 0x02	; 2
    19fe:	39 f0       	breq	.+14     	; 0x1a0e <DIO_ReadPort+0x18>
    1a00:	83 30       	cpi	r24, 0x03	; 3
    1a02:	39 f0       	breq	.+14     	; 0x1a12 <DIO_ReadPort+0x1c>
    1a04:	08 c0       	rjmp	.+16     	; 0x1a16 <DIO_ReadPort+0x20>
    1a06:	8b b3       	in	r24, 0x1b	; 27
    1a08:	08 95       	ret
    1a0a:	88 b3       	in	r24, 0x18	; 24
    1a0c:	08 95       	ret
    1a0e:	85 b3       	in	r24, 0x15	; 21
    1a10:	08 95       	ret
    1a12:	82 b3       	in	r24, 0x12	; 18
    1a14:	08 95       	ret
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	08 95       	ret

00001a1a <DIO_WritePort>:
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	41 f0       	breq	.+16     	; 0x1a2e <DIO_WritePort+0x14>
    1a1e:	28 f0       	brcs	.+10     	; 0x1a2a <DIO_WritePort+0x10>
    1a20:	82 30       	cpi	r24, 0x02	; 2
    1a22:	39 f0       	breq	.+14     	; 0x1a32 <DIO_WritePort+0x18>
    1a24:	83 30       	cpi	r24, 0x03	; 3
    1a26:	39 f0       	breq	.+14     	; 0x1a36 <DIO_WritePort+0x1c>
    1a28:	08 95       	ret
    1a2a:	6b bb       	out	0x1b, r22	; 27
    1a2c:	08 95       	ret
    1a2e:	68 bb       	out	0x18, r22	; 24
    1a30:	08 95       	ret
    1a32:	65 bb       	out	0x15, r22	; 21
    1a34:	08 95       	ret
    1a36:	62 bb       	out	0x12, r22	; 18
    1a38:	08 95       	ret

00001a3a <DIO_Init>:
    1a3a:	e4 e8       	ldi	r30, 0x84	; 132
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 e0       	ldi	r24, 0x00	; 0
    1a40:	41 e0       	ldi	r20, 0x01	; 1
    1a42:	50 e0       	ldi	r21, 0x00	; 0
    1a44:	28 2f       	mov	r18, r24
    1a46:	27 70       	andi	r18, 0x07	; 7
    1a48:	98 2f       	mov	r25, r24
    1a4a:	96 95       	lsr	r25
    1a4c:	96 95       	lsr	r25
    1a4e:	96 95       	lsr	r25
    1a50:	91 30       	cpi	r25, 0x01	; 1
    1a52:	09 f1       	breq	.+66     	; 0x1a96 <DIO_Init+0x5c>
    1a54:	30 f0       	brcs	.+12     	; 0x1a62 <DIO_Init+0x28>
    1a56:	92 30       	cpi	r25, 0x02	; 2
    1a58:	c1 f1       	breq	.+112    	; 0x1aca <DIO_Init+0x90>
    1a5a:	93 30       	cpi	r25, 0x03	; 3
    1a5c:	09 f4       	brne	.+2      	; 0x1a60 <DIO_Init+0x26>
    1a5e:	4f c0       	rjmp	.+158    	; 0x1afe <DIO_Init+0xc4>
    1a60:	67 c0       	rjmp	.+206    	; 0x1b30 <DIO_Init+0xf6>
    1a62:	90 81       	ld	r25, Z
    1a64:	91 30       	cpi	r25, 0x01	; 1
    1a66:	59 f4       	brne	.+22     	; 0x1a7e <DIO_Init+0x44>
    1a68:	9a b3       	in	r25, 0x1a	; 26
    1a6a:	ba 01       	movw	r22, r20
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <DIO_Init+0x38>
    1a6e:	66 0f       	add	r22, r22
    1a70:	77 1f       	adc	r23, r23
    1a72:	2a 95       	dec	r18
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <DIO_Init+0x34>
    1a76:	9b 01       	movw	r18, r22
    1a78:	29 2b       	or	r18, r25
    1a7a:	2a bb       	out	0x1a, r18	; 26
    1a7c:	59 c0       	rjmp	.+178    	; 0x1b30 <DIO_Init+0xf6>
    1a7e:	3a b3       	in	r19, 0x1a	; 26
    1a80:	ba 01       	movw	r22, r20
    1a82:	02 c0       	rjmp	.+4      	; 0x1a88 <DIO_Init+0x4e>
    1a84:	66 0f       	add	r22, r22
    1a86:	77 1f       	adc	r23, r23
    1a88:	2a 95       	dec	r18
    1a8a:	e2 f7       	brpl	.-8      	; 0x1a84 <DIO_Init+0x4a>
    1a8c:	96 2f       	mov	r25, r22
    1a8e:	90 95       	com	r25
    1a90:	93 23       	and	r25, r19
    1a92:	9a bb       	out	0x1a, r25	; 26
    1a94:	4d c0       	rjmp	.+154    	; 0x1b30 <DIO_Init+0xf6>
    1a96:	90 81       	ld	r25, Z
    1a98:	91 30       	cpi	r25, 0x01	; 1
    1a9a:	59 f4       	brne	.+22     	; 0x1ab2 <DIO_Init+0x78>
    1a9c:	97 b3       	in	r25, 0x17	; 23
    1a9e:	ba 01       	movw	r22, r20
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <DIO_Init+0x6c>
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	2a 95       	dec	r18
    1aa8:	e2 f7       	brpl	.-8      	; 0x1aa2 <DIO_Init+0x68>
    1aaa:	9b 01       	movw	r18, r22
    1aac:	29 2b       	or	r18, r25
    1aae:	27 bb       	out	0x17, r18	; 23
    1ab0:	3f c0       	rjmp	.+126    	; 0x1b30 <DIO_Init+0xf6>
    1ab2:	37 b3       	in	r19, 0x17	; 23
    1ab4:	ba 01       	movw	r22, r20
    1ab6:	02 c0       	rjmp	.+4      	; 0x1abc <DIO_Init+0x82>
    1ab8:	66 0f       	add	r22, r22
    1aba:	77 1f       	adc	r23, r23
    1abc:	2a 95       	dec	r18
    1abe:	e2 f7       	brpl	.-8      	; 0x1ab8 <DIO_Init+0x7e>
    1ac0:	96 2f       	mov	r25, r22
    1ac2:	90 95       	com	r25
    1ac4:	93 23       	and	r25, r19
    1ac6:	97 bb       	out	0x17, r25	; 23
    1ac8:	33 c0       	rjmp	.+102    	; 0x1b30 <DIO_Init+0xf6>
    1aca:	90 81       	ld	r25, Z
    1acc:	91 30       	cpi	r25, 0x01	; 1
    1ace:	59 f4       	brne	.+22     	; 0x1ae6 <DIO_Init+0xac>
    1ad0:	94 b3       	in	r25, 0x14	; 20
    1ad2:	ba 01       	movw	r22, r20
    1ad4:	02 c0       	rjmp	.+4      	; 0x1ada <DIO_Init+0xa0>
    1ad6:	66 0f       	add	r22, r22
    1ad8:	77 1f       	adc	r23, r23
    1ada:	2a 95       	dec	r18
    1adc:	e2 f7       	brpl	.-8      	; 0x1ad6 <DIO_Init+0x9c>
    1ade:	9b 01       	movw	r18, r22
    1ae0:	29 2b       	or	r18, r25
    1ae2:	24 bb       	out	0x14, r18	; 20
    1ae4:	25 c0       	rjmp	.+74     	; 0x1b30 <DIO_Init+0xf6>
    1ae6:	34 b3       	in	r19, 0x14	; 20
    1ae8:	ba 01       	movw	r22, r20
    1aea:	02 c0       	rjmp	.+4      	; 0x1af0 <DIO_Init+0xb6>
    1aec:	66 0f       	add	r22, r22
    1aee:	77 1f       	adc	r23, r23
    1af0:	2a 95       	dec	r18
    1af2:	e2 f7       	brpl	.-8      	; 0x1aec <DIO_Init+0xb2>
    1af4:	96 2f       	mov	r25, r22
    1af6:	90 95       	com	r25
    1af8:	93 23       	and	r25, r19
    1afa:	94 bb       	out	0x14, r25	; 20
    1afc:	19 c0       	rjmp	.+50     	; 0x1b30 <DIO_Init+0xf6>
    1afe:	90 81       	ld	r25, Z
    1b00:	91 30       	cpi	r25, 0x01	; 1
    1b02:	59 f4       	brne	.+22     	; 0x1b1a <DIO_Init+0xe0>
    1b04:	91 b3       	in	r25, 0x11	; 17
    1b06:	ba 01       	movw	r22, r20
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_Init+0xd4>
    1b0a:	66 0f       	add	r22, r22
    1b0c:	77 1f       	adc	r23, r23
    1b0e:	2a 95       	dec	r18
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_Init+0xd0>
    1b12:	9b 01       	movw	r18, r22
    1b14:	29 2b       	or	r18, r25
    1b16:	21 bb       	out	0x11, r18	; 17
    1b18:	0b c0       	rjmp	.+22     	; 0x1b30 <DIO_Init+0xf6>
    1b1a:	31 b3       	in	r19, 0x11	; 17
    1b1c:	ba 01       	movw	r22, r20
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <DIO_Init+0xea>
    1b20:	66 0f       	add	r22, r22
    1b22:	77 1f       	adc	r23, r23
    1b24:	2a 95       	dec	r18
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <DIO_Init+0xe6>
    1b28:	96 2f       	mov	r25, r22
    1b2a:	90 95       	com	r25
    1b2c:	93 23       	and	r25, r19
    1b2e:	91 bb       	out	0x11, r25	; 17
    1b30:	8f 5f       	subi	r24, 0xFF	; 255
    1b32:	32 96       	adiw	r30, 0x02	; 2
    1b34:	80 32       	cpi	r24, 0x20	; 32
    1b36:	09 f0       	breq	.+2      	; 0x1b3a <DIO_Init+0x100>
    1b38:	85 cf       	rjmp	.-246    	; 0x1a44 <DIO_Init+0xa>
    1b3a:	08 95       	ret

00001b3c <Ext_Interrupt_Enable>:
    1b3c:	81 30       	cpi	r24, 0x01	; 1
    1b3e:	41 f0       	breq	.+16     	; 0x1b50 <Ext_Interrupt_Enable+0x14>
    1b40:	18 f0       	brcs	.+6      	; 0x1b48 <Ext_Interrupt_Enable+0xc>
    1b42:	82 30       	cpi	r24, 0x02	; 2
    1b44:	49 f0       	breq	.+18     	; 0x1b58 <Ext_Interrupt_Enable+0x1c>
    1b46:	08 95       	ret
    1b48:	8b b7       	in	r24, 0x3b	; 59
    1b4a:	80 64       	ori	r24, 0x40	; 64
    1b4c:	8b bf       	out	0x3b, r24	; 59
    1b4e:	08 95       	ret
    1b50:	8b b7       	in	r24, 0x3b	; 59
    1b52:	80 68       	ori	r24, 0x80	; 128
    1b54:	8b bf       	out	0x3b, r24	; 59
    1b56:	08 95       	ret
    1b58:	8b b7       	in	r24, 0x3b	; 59
    1b5a:	80 62       	ori	r24, 0x20	; 32
    1b5c:	8b bf       	out	0x3b, r24	; 59
    1b5e:	08 95       	ret

00001b60 <Ext_Interrupt_Sncontrol>:
    1b60:	81 30       	cpi	r24, 0x01	; 1
    1b62:	41 f0       	breq	.+16     	; 0x1b74 <Ext_Interrupt_Sncontrol+0x14>
    1b64:	18 f0       	brcs	.+6      	; 0x1b6c <Ext_Interrupt_Sncontrol+0xc>
    1b66:	82 30       	cpi	r24, 0x02	; 2
    1b68:	59 f0       	breq	.+22     	; 0x1b80 <Ext_Interrupt_Sncontrol+0x20>
    1b6a:	08 95       	ret
    1b6c:	85 b7       	in	r24, 0x35	; 53
    1b6e:	68 2b       	or	r22, r24
    1b70:	65 bf       	out	0x35, r22	; 53
    1b72:	08 95       	ret
    1b74:	85 b7       	in	r24, 0x35	; 53
    1b76:	66 0f       	add	r22, r22
    1b78:	66 0f       	add	r22, r22
    1b7a:	68 2b       	or	r22, r24
    1b7c:	65 bf       	out	0x35, r22	; 53
    1b7e:	08 95       	ret
    1b80:	62 30       	cpi	r22, 0x02	; 2
    1b82:	21 f4       	brne	.+8      	; 0x1b8c <Ext_Interrupt_Sncontrol+0x2c>
    1b84:	84 b7       	in	r24, 0x34	; 52
    1b86:	8f 7b       	andi	r24, 0xBF	; 191
    1b88:	84 bf       	out	0x34, r24	; 52
    1b8a:	08 95       	ret
    1b8c:	63 30       	cpi	r22, 0x03	; 3
    1b8e:	19 f4       	brne	.+6      	; 0x1b96 <Ext_Interrupt_Sncontrol+0x36>
    1b90:	84 b7       	in	r24, 0x34	; 52
    1b92:	80 64       	ori	r24, 0x40	; 64
    1b94:	84 bf       	out	0x34, r24	; 52
    1b96:	08 95       	ret

00001b98 <Ext_Interrupt_SetCallBack>:
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	49 f0       	breq	.+18     	; 0x1bae <Ext_Interrupt_SetCallBack+0x16>
    1b9c:	18 f0       	brcs	.+6      	; 0x1ba4 <Ext_Interrupt_SetCallBack+0xc>
    1b9e:	82 30       	cpi	r24, 0x02	; 2
    1ba0:	59 f0       	breq	.+22     	; 0x1bb8 <Ext_Interrupt_SetCallBack+0x20>
    1ba2:	08 95       	ret
    1ba4:	70 93 f9 04 	sts	0x04F9, r23	; 0x8004f9 <ExtInt0FunPtr+0x1>
    1ba8:	60 93 f8 04 	sts	0x04F8, r22	; 0x8004f8 <ExtInt0FunPtr>
    1bac:	08 95       	ret
    1bae:	70 93 f7 04 	sts	0x04F7, r23	; 0x8004f7 <ExtInt1FunPtr+0x1>
    1bb2:	60 93 f6 04 	sts	0x04F6, r22	; 0x8004f6 <ExtInt1FunPtr>
    1bb6:	08 95       	ret
    1bb8:	70 93 f5 04 	sts	0x04F5, r23	; 0x8004f5 <ExtInt2FunPtr+0x1>
    1bbc:	60 93 f4 04 	sts	0x04F4, r22	; 0x8004f4 <ExtInt2FunPtr>
    1bc0:	08 95       	ret

00001bc2 <__vector_1>:
    1bc2:	1f 92       	push	r1
    1bc4:	0f 92       	push	r0
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	0f 92       	push	r0
    1bca:	11 24       	eor	r1, r1
    1bcc:	2f 93       	push	r18
    1bce:	3f 93       	push	r19
    1bd0:	4f 93       	push	r20
    1bd2:	5f 93       	push	r21
    1bd4:	6f 93       	push	r22
    1bd6:	7f 93       	push	r23
    1bd8:	8f 93       	push	r24
    1bda:	9f 93       	push	r25
    1bdc:	af 93       	push	r26
    1bde:	bf 93       	push	r27
    1be0:	ef 93       	push	r30
    1be2:	ff 93       	push	r31
    1be4:	e0 91 f8 04 	lds	r30, 0x04F8	; 0x8004f8 <ExtInt0FunPtr>
    1be8:	f0 91 f9 04 	lds	r31, 0x04F9	; 0x8004f9 <ExtInt0FunPtr+0x1>
    1bec:	09 95       	icall
    1bee:	ff 91       	pop	r31
    1bf0:	ef 91       	pop	r30
    1bf2:	bf 91       	pop	r27
    1bf4:	af 91       	pop	r26
    1bf6:	9f 91       	pop	r25
    1bf8:	8f 91       	pop	r24
    1bfa:	7f 91       	pop	r23
    1bfc:	6f 91       	pop	r22
    1bfe:	5f 91       	pop	r21
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	0f 90       	pop	r0
    1c08:	0f be       	out	0x3f, r0	; 63
    1c0a:	0f 90       	pop	r0
    1c0c:	1f 90       	pop	r1
    1c0e:	18 95       	reti

00001c10 <__vector_2>:
    1c10:	1f 92       	push	r1
    1c12:	0f 92       	push	r0
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	0f 92       	push	r0
    1c18:	11 24       	eor	r1, r1
    1c1a:	2f 93       	push	r18
    1c1c:	3f 93       	push	r19
    1c1e:	4f 93       	push	r20
    1c20:	5f 93       	push	r21
    1c22:	6f 93       	push	r22
    1c24:	7f 93       	push	r23
    1c26:	8f 93       	push	r24
    1c28:	9f 93       	push	r25
    1c2a:	af 93       	push	r26
    1c2c:	bf 93       	push	r27
    1c2e:	ef 93       	push	r30
    1c30:	ff 93       	push	r31
    1c32:	e0 91 f6 04 	lds	r30, 0x04F6	; 0x8004f6 <ExtInt1FunPtr>
    1c36:	f0 91 f7 04 	lds	r31, 0x04F7	; 0x8004f7 <ExtInt1FunPtr+0x1>
    1c3a:	09 95       	icall
    1c3c:	ff 91       	pop	r31
    1c3e:	ef 91       	pop	r30
    1c40:	bf 91       	pop	r27
    1c42:	af 91       	pop	r26
    1c44:	9f 91       	pop	r25
    1c46:	8f 91       	pop	r24
    1c48:	7f 91       	pop	r23
    1c4a:	6f 91       	pop	r22
    1c4c:	5f 91       	pop	r21
    1c4e:	4f 91       	pop	r20
    1c50:	3f 91       	pop	r19
    1c52:	2f 91       	pop	r18
    1c54:	0f 90       	pop	r0
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	0f 90       	pop	r0
    1c5a:	1f 90       	pop	r1
    1c5c:	18 95       	reti

00001c5e <__vector_3>:
    1c5e:	1f 92       	push	r1
    1c60:	0f 92       	push	r0
    1c62:	0f b6       	in	r0, 0x3f	; 63
    1c64:	0f 92       	push	r0
    1c66:	11 24       	eor	r1, r1
    1c68:	2f 93       	push	r18
    1c6a:	3f 93       	push	r19
    1c6c:	4f 93       	push	r20
    1c6e:	5f 93       	push	r21
    1c70:	6f 93       	push	r22
    1c72:	7f 93       	push	r23
    1c74:	8f 93       	push	r24
    1c76:	9f 93       	push	r25
    1c78:	af 93       	push	r26
    1c7a:	bf 93       	push	r27
    1c7c:	ef 93       	push	r30
    1c7e:	ff 93       	push	r31
    1c80:	e0 91 f4 04 	lds	r30, 0x04F4	; 0x8004f4 <ExtInt2FunPtr>
    1c84:	f0 91 f5 04 	lds	r31, 0x04F5	; 0x8004f5 <ExtInt2FunPtr+0x1>
    1c88:	09 95       	icall
    1c8a:	ff 91       	pop	r31
    1c8c:	ef 91       	pop	r30
    1c8e:	bf 91       	pop	r27
    1c90:	af 91       	pop	r26
    1c92:	9f 91       	pop	r25
    1c94:	8f 91       	pop	r24
    1c96:	7f 91       	pop	r23
    1c98:	6f 91       	pop	r22
    1c9a:	5f 91       	pop	r21
    1c9c:	4f 91       	pop	r20
    1c9e:	3f 91       	pop	r19
    1ca0:	2f 91       	pop	r18
    1ca2:	0f 90       	pop	r0
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	0f 90       	pop	r0
    1ca8:	1f 90       	pop	r1
    1caa:	18 95       	reti

00001cac <EnableAllInterrupts>:
    1cac:	8f b7       	in	r24, 0x3f	; 63
    1cae:	80 68       	ori	r24, 0x80	; 128
    1cb0:	8f bf       	out	0x3f, r24	; 63
    1cb2:	08 95       	ret

00001cb4 <Timer1_Init>:
    1cb4:	fc 01       	movw	r30, r24
    1cb6:	9f b5       	in	r25, 0x2f	; 47
    1cb8:	80 81       	ld	r24, Z
    1cba:	83 70       	andi	r24, 0x03	; 3
    1cbc:	89 2b       	or	r24, r25
    1cbe:	8f bd       	out	0x2f, r24	; 47
    1cc0:	9e b5       	in	r25, 0x2e	; 46
    1cc2:	80 81       	ld	r24, Z
    1cc4:	86 95       	lsr	r24
    1cc6:	86 95       	lsr	r24
    1cc8:	88 0f       	add	r24, r24
    1cca:	88 0f       	add	r24, r24
    1ccc:	88 0f       	add	r24, r24
    1cce:	89 2b       	or	r24, r25
    1cd0:	8e bd       	out	0x2e, r24	; 46
    1cd2:	9e b5       	in	r25, 0x2e	; 46
    1cd4:	81 81       	ldd	r24, Z+1	; 0x01
    1cd6:	89 2b       	or	r24, r25
    1cd8:	8e bd       	out	0x2e, r24	; 46
    1cda:	2f b5       	in	r18, 0x2f	; 47
    1cdc:	92 81       	ldd	r25, Z+2	; 0x02
    1cde:	30 e4       	ldi	r19, 0x40	; 64
    1ce0:	93 9f       	mul	r25, r19
    1ce2:	c0 01       	movw	r24, r0
    1ce4:	11 24       	eor	r1, r1
    1ce6:	82 2b       	or	r24, r18
    1ce8:	8f bd       	out	0x2f, r24	; 47
    1cea:	2f b5       	in	r18, 0x2f	; 47
    1cec:	93 81       	ldd	r25, Z+3	; 0x03
    1cee:	30 e1       	ldi	r19, 0x10	; 16
    1cf0:	93 9f       	mul	r25, r19
    1cf2:	c0 01       	movw	r24, r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	82 2b       	or	r24, r18
    1cf8:	8f bd       	out	0x2f, r24	; 47
    1cfa:	99 b7       	in	r25, 0x39	; 57
    1cfc:	84 81       	ldd	r24, Z+4	; 0x04
    1cfe:	88 0f       	add	r24, r24
    1d00:	88 0f       	add	r24, r24
    1d02:	89 2b       	or	r24, r25
    1d04:	89 bf       	out	0x39, r24	; 57
    1d06:	99 b7       	in	r25, 0x39	; 57
    1d08:	86 81       	ldd	r24, Z+6	; 0x06
    1d0a:	88 0f       	add	r24, r24
    1d0c:	88 0f       	add	r24, r24
    1d0e:	88 0f       	add	r24, r24
    1d10:	89 2b       	or	r24, r25
    1d12:	89 bf       	out	0x39, r24	; 57
    1d14:	29 b7       	in	r18, 0x39	; 57
    1d16:	95 81       	ldd	r25, Z+5	; 0x05
    1d18:	30 e1       	ldi	r19, 0x10	; 16
    1d1a:	93 9f       	mul	r25, r19
    1d1c:	c0 01       	movw	r24, r0
    1d1e:	11 24       	eor	r1, r1
    1d20:	82 2b       	or	r24, r18
    1d22:	89 bf       	out	0x39, r24	; 57
    1d24:	29 b7       	in	r18, 0x39	; 57
    1d26:	97 81       	ldd	r25, Z+7	; 0x07
    1d28:	30 e2       	ldi	r19, 0x20	; 32
    1d2a:	93 9f       	mul	r25, r19
    1d2c:	c0 01       	movw	r24, r0
    1d2e:	11 24       	eor	r1, r1
    1d30:	82 2b       	or	r24, r18
    1d32:	89 bf       	out	0x39, r24	; 57
    1d34:	08 95       	ret

00001d36 <Timer1_SetValue>:
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	39 f0       	breq	.+14     	; 0x1d48 <Timer1_SetValue+0x12>
    1d3a:	18 f0       	brcs	.+6      	; 0x1d42 <Timer1_SetValue+0xc>
    1d3c:	82 30       	cpi	r24, 0x02	; 2
    1d3e:	39 f0       	breq	.+14     	; 0x1d4e <Timer1_SetValue+0x18>
    1d40:	08 95       	ret
    1d42:	7b bd       	out	0x2b, r23	; 43
    1d44:	6a bd       	out	0x2a, r22	; 42
    1d46:	08 95       	ret
    1d48:	79 bd       	out	0x29, r23	; 41
    1d4a:	68 bd       	out	0x28, r22	; 40
    1d4c:	08 95       	ret
    1d4e:	77 bd       	out	0x27, r23	; 39
    1d50:	66 bd       	out	0x26, r22	; 38
    1d52:	08 95       	ret

00001d54 <__vector_9>:
    1d54:	1f 92       	push	r1
    1d56:	0f 92       	push	r0
    1d58:	0f b6       	in	r0, 0x3f	; 63
    1d5a:	0f 92       	push	r0
    1d5c:	11 24       	eor	r1, r1
    1d5e:	2f 93       	push	r18
    1d60:	3f 93       	push	r19
    1d62:	4f 93       	push	r20
    1d64:	5f 93       	push	r21
    1d66:	6f 93       	push	r22
    1d68:	7f 93       	push	r23
    1d6a:	8f 93       	push	r24
    1d6c:	9f 93       	push	r25
    1d6e:	af 93       	push	r26
    1d70:	bf 93       	push	r27
    1d72:	ef 93       	push	r30
    1d74:	ff 93       	push	r31
    1d76:	e0 91 fe 04 	lds	r30, 0x04FE	; 0x8004fe <TOVIntFunPtr>
    1d7a:	f0 91 ff 04 	lds	r31, 0x04FF	; 0x8004ff <TOVIntFunPtr+0x1>
    1d7e:	09 95       	icall
    1d80:	ff 91       	pop	r31
    1d82:	ef 91       	pop	r30
    1d84:	bf 91       	pop	r27
    1d86:	af 91       	pop	r26
    1d88:	9f 91       	pop	r25
    1d8a:	8f 91       	pop	r24
    1d8c:	7f 91       	pop	r23
    1d8e:	6f 91       	pop	r22
    1d90:	5f 91       	pop	r21
    1d92:	4f 91       	pop	r20
    1d94:	3f 91       	pop	r19
    1d96:	2f 91       	pop	r18
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	0f 90       	pop	r0
    1d9e:	1f 90       	pop	r1
    1da0:	18 95       	reti

00001da2 <__vector_8>:
    1da2:	1f 92       	push	r1
    1da4:	0f 92       	push	r0
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	0f 92       	push	r0
    1daa:	11 24       	eor	r1, r1
    1dac:	2f 93       	push	r18
    1dae:	3f 93       	push	r19
    1db0:	4f 93       	push	r20
    1db2:	5f 93       	push	r21
    1db4:	6f 93       	push	r22
    1db6:	7f 93       	push	r23
    1db8:	8f 93       	push	r24
    1dba:	9f 93       	push	r25
    1dbc:	af 93       	push	r26
    1dbe:	bf 93       	push	r27
    1dc0:	ef 93       	push	r30
    1dc2:	ff 93       	push	r31
    1dc4:	e0 91 fc 04 	lds	r30, 0x04FC	; 0x8004fc <OC1BIntFunPtr>
    1dc8:	f0 91 fd 04 	lds	r31, 0x04FD	; 0x8004fd <OC1BIntFunPtr+0x1>
    1dcc:	09 95       	icall
    1dce:	ff 91       	pop	r31
    1dd0:	ef 91       	pop	r30
    1dd2:	bf 91       	pop	r27
    1dd4:	af 91       	pop	r26
    1dd6:	9f 91       	pop	r25
    1dd8:	8f 91       	pop	r24
    1dda:	7f 91       	pop	r23
    1ddc:	6f 91       	pop	r22
    1dde:	5f 91       	pop	r21
    1de0:	4f 91       	pop	r20
    1de2:	3f 91       	pop	r19
    1de4:	2f 91       	pop	r18
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	0f 90       	pop	r0
    1dec:	1f 90       	pop	r1
    1dee:	18 95       	reti

00001df0 <__vector_6>:
    1df0:	1f 92       	push	r1
    1df2:	0f 92       	push	r0
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	0f 92       	push	r0
    1df8:	11 24       	eor	r1, r1
    1dfa:	2f 93       	push	r18
    1dfc:	3f 93       	push	r19
    1dfe:	4f 93       	push	r20
    1e00:	5f 93       	push	r21
    1e02:	6f 93       	push	r22
    1e04:	7f 93       	push	r23
    1e06:	8f 93       	push	r24
    1e08:	9f 93       	push	r25
    1e0a:	af 93       	push	r26
    1e0c:	bf 93       	push	r27
    1e0e:	ef 93       	push	r30
    1e10:	ff 93       	push	r31
    1e12:	e0 91 fa 04 	lds	r30, 0x04FA	; 0x8004fa <ICIntFunPtr>
    1e16:	f0 91 fb 04 	lds	r31, 0x04FB	; 0x8004fb <ICIntFunPtr+0x1>
    1e1a:	09 95       	icall
    1e1c:	ff 91       	pop	r31
    1e1e:	ef 91       	pop	r30
    1e20:	bf 91       	pop	r27
    1e22:	af 91       	pop	r26
    1e24:	9f 91       	pop	r25
    1e26:	8f 91       	pop	r24
    1e28:	7f 91       	pop	r23
    1e2a:	6f 91       	pop	r22
    1e2c:	5f 91       	pop	r21
    1e2e:	4f 91       	pop	r20
    1e30:	3f 91       	pop	r19
    1e32:	2f 91       	pop	r18
    1e34:	0f 90       	pop	r0
    1e36:	0f be       	out	0x3f, r0	; 63
    1e38:	0f 90       	pop	r0
    1e3a:	1f 90       	pop	r1
    1e3c:	18 95       	reti

00001e3e <UART_Init>:
    1e3e:	cf 93       	push	r28
    1e40:	df 93       	push	r29
    1e42:	ec 01       	movw	r28, r24
    1e44:	8a 81       	ldd	r24, Y+2	; 0x02
    1e46:	81 30       	cpi	r24, 0x01	; 1
    1e48:	e9 f4       	brne	.+58     	; 0x1e84 <UART_Init+0x46>
    1e4a:	59 9a       	sbi	0x0b, 1	; 11
    1e4c:	28 81       	ld	r18, Y
    1e4e:	39 81       	ldd	r19, Y+1	; 0x01
    1e50:	c9 01       	movw	r24, r18
    1e52:	a0 e0       	ldi	r26, 0x00	; 0
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	aa 1f       	adc	r26, r26
    1e5c:	bb 1f       	adc	r27, r27
    1e5e:	88 0f       	add	r24, r24
    1e60:	99 1f       	adc	r25, r25
    1e62:	aa 1f       	adc	r26, r26
    1e64:	bb 1f       	adc	r27, r27
    1e66:	9c 01       	movw	r18, r24
    1e68:	ad 01       	movw	r20, r26
    1e6a:	22 0f       	add	r18, r18
    1e6c:	33 1f       	adc	r19, r19
    1e6e:	44 1f       	adc	r20, r20
    1e70:	55 1f       	adc	r21, r21
    1e72:	60 e0       	ldi	r22, 0x00	; 0
    1e74:	74 e2       	ldi	r23, 0x24	; 36
    1e76:	84 ef       	ldi	r24, 0xF4	; 244
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodsi4>
    1e7e:	21 50       	subi	r18, 0x01	; 1
    1e80:	31 09       	sbc	r19, r1
    1e82:	20 c0       	rjmp	.+64     	; 0x1ec4 <UART_Init+0x86>
    1e84:	59 98       	cbi	0x0b, 1	; 11
    1e86:	28 81       	ld	r18, Y
    1e88:	39 81       	ldd	r19, Y+1	; 0x01
    1e8a:	c9 01       	movw	r24, r18
    1e8c:	a0 e0       	ldi	r26, 0x00	; 0
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	88 0f       	add	r24, r24
    1e92:	99 1f       	adc	r25, r25
    1e94:	aa 1f       	adc	r26, r26
    1e96:	bb 1f       	adc	r27, r27
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	aa 1f       	adc	r26, r26
    1e9e:	bb 1f       	adc	r27, r27
    1ea0:	9c 01       	movw	r18, r24
    1ea2:	ad 01       	movw	r20, r26
    1ea4:	22 0f       	add	r18, r18
    1ea6:	33 1f       	adc	r19, r19
    1ea8:	44 1f       	adc	r20, r20
    1eaa:	55 1f       	adc	r21, r21
    1eac:	22 0f       	add	r18, r18
    1eae:	33 1f       	adc	r19, r19
    1eb0:	44 1f       	adc	r20, r20
    1eb2:	55 1f       	adc	r21, r21
    1eb4:	60 e0       	ldi	r22, 0x00	; 0
    1eb6:	74 e2       	ldi	r23, 0x24	; 36
    1eb8:	84 ef       	ldi	r24, 0xF4	; 244
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 0d 13 	call	0x261a	; 0x261a <__udivmodsi4>
    1ec0:	21 50       	subi	r18, 0x01	; 1
    1ec2:	31 09       	sbc	r19, r1
    1ec4:	29 b9       	out	0x09, r18	; 9
    1ec6:	30 bd       	out	0x20, r19	; 32
    1ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eca:	97 30       	cpi	r25, 0x07	; 7
    1ecc:	29 f4       	brne	.+10     	; 0x1ed8 <UART_Init+0x9a>
    1ece:	52 9a       	sbi	0x0a, 2	; 10
    1ed0:	80 b5       	in	r24, 0x20	; 32
    1ed2:	86 68       	ori	r24, 0x86	; 134
    1ed4:	80 bd       	out	0x20, r24	; 32
    1ed6:	05 c0       	rjmp	.+10     	; 0x1ee2 <UART_Init+0xa4>
    1ed8:	80 b5       	in	r24, 0x20	; 32
    1eda:	99 0f       	add	r25, r25
    1edc:	80 68       	ori	r24, 0x80	; 128
    1ede:	89 2b       	or	r24, r25
    1ee0:	80 bd       	out	0x20, r24	; 32
    1ee2:	20 b5       	in	r18, 0x20	; 32
    1ee4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ee6:	30 e1       	ldi	r19, 0x10	; 16
    1ee8:	93 9f       	mul	r25, r19
    1eea:	c0 01       	movw	r24, r0
    1eec:	11 24       	eor	r1, r1
    1eee:	92 2f       	mov	r25, r18
    1ef0:	90 68       	ori	r25, 0x80	; 128
    1ef2:	89 2b       	or	r24, r25
    1ef4:	80 bd       	out	0x20, r24	; 32
    1ef6:	80 b5       	in	r24, 0x20	; 32
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	99 0f       	add	r25, r25
    1efc:	99 0f       	add	r25, r25
    1efe:	99 0f       	add	r25, r25
    1f00:	80 68       	ori	r24, 0x80	; 128
    1f02:	89 2b       	or	r24, r25
    1f04:	80 bd       	out	0x20, r24	; 32
    1f06:	9a b1       	in	r25, 0x0a	; 10
    1f08:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0a:	88 0f       	add	r24, r24
    1f0c:	88 0f       	add	r24, r24
    1f0e:	88 0f       	add	r24, r24
    1f10:	89 2b       	or	r24, r25
    1f12:	8a b9       	out	0x0a, r24	; 10
    1f14:	2a b1       	in	r18, 0x0a	; 10
    1f16:	9f 81       	ldd	r25, Y+7	; 0x07
    1f18:	30 e1       	ldi	r19, 0x10	; 16
    1f1a:	93 9f       	mul	r25, r19
    1f1c:	c0 01       	movw	r24, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	82 2b       	or	r24, r18
    1f22:	8a b9       	out	0x0a, r24	; 10
    1f24:	df 91       	pop	r29
    1f26:	cf 91       	pop	r28
    1f28:	08 95       	ret

00001f2a <UART_TransmaitChar>:
    1f2a:	5d 9b       	sbis	0x0b, 5	; 11
    1f2c:	fe cf       	rjmp	.-4      	; 0x1f2a <UART_TransmaitChar>
    1f2e:	8c b9       	out	0x0c, r24	; 12
    1f30:	08 95       	ret

00001f32 <UART_TransmaitString>:
    1f32:	0f 93       	push	r16
    1f34:	1f 93       	push	r17
    1f36:	cf 93       	push	r28
    1f38:	fc 01       	movw	r30, r24
    1f3a:	80 81       	ld	r24, Z
    1f3c:	88 23       	and	r24, r24
    1f3e:	59 f0       	breq	.+22     	; 0x1f56 <UART_TransmaitString+0x24>
    1f40:	8f 01       	movw	r16, r30
    1f42:	c0 e0       	ldi	r28, 0x00	; 0
    1f44:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <UART_TransmaitChar>
    1f48:	cf 5f       	subi	r28, 0xFF	; 255
    1f4a:	f8 01       	movw	r30, r16
    1f4c:	ec 0f       	add	r30, r28
    1f4e:	f1 1d       	adc	r31, r1
    1f50:	80 81       	ld	r24, Z
    1f52:	81 11       	cpse	r24, r1
    1f54:	f7 cf       	rjmp	.-18     	; 0x1f44 <UART_TransmaitString+0x12>
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	08 95       	ret

00001f5e <UART_Receive>:
    1f5e:	5f 9b       	sbis	0x0b, 7	; 11
    1f60:	fe cf       	rjmp	.-4      	; 0x1f5e <UART_Receive>
    1f62:	8c b1       	in	r24, 0x0c	; 12
    1f64:	08 95       	ret

00001f66 <prvResetNextTaskUnblockTime>:
    1f66:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxDelayedTaskList>
    1f6a:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxDelayedTaskList+0x1>
    1f6e:	80 81       	ld	r24, Z
    1f70:	81 11       	cpse	r24, r1
    1f72:	07 c0       	rjmp	.+14     	; 0x1f82 <prvResetNextTaskUnblockTime+0x1c>
    1f74:	8f ef       	ldi	r24, 0xFF	; 255
    1f76:	9f ef       	ldi	r25, 0xFF	; 255
    1f78:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <xNextTaskUnblockTime+0x1>
    1f7c:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <xNextTaskUnblockTime>
    1f80:	08 95       	ret
    1f82:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxDelayedTaskList>
    1f86:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxDelayedTaskList+0x1>
    1f8a:	05 80       	ldd	r0, Z+5	; 0x05
    1f8c:	f6 81       	ldd	r31, Z+6	; 0x06
    1f8e:	e0 2d       	mov	r30, r0
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	90 93 02 05 	sts	0x0502, r25	; 0x800502 <xNextTaskUnblockTime+0x1>
    1f98:	80 93 01 05 	sts	0x0501, r24	; 0x800501 <xNextTaskUnblockTime>
    1f9c:	08 95       	ret

00001f9e <xTaskIncrementTick>:
    1f9e:	ef 92       	push	r14
    1fa0:	ff 92       	push	r15
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	cf 93       	push	r28
    1fa8:	df 93       	push	r29
    1faa:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <uxSchedulerSuspended>
    1fae:	81 11       	cpse	r24, r1
    1fb0:	04 c1       	rjmp	.+520    	; 0x21ba <xTaskIncrementTick+0x21c>
    1fb2:	c0 91 08 05 	lds	r28, 0x0508	; 0x800508 <xTickCount>
    1fb6:	d0 91 09 05 	lds	r29, 0x0509	; 0x800509 <xTickCount+0x1>
    1fba:	7e 01       	movw	r14, r28
    1fbc:	8f ef       	ldi	r24, 0xFF	; 255
    1fbe:	e8 1a       	sub	r14, r24
    1fc0:	f8 0a       	sbc	r15, r24
    1fc2:	f0 92 09 05 	sts	0x0509, r15	; 0x800509 <xTickCount+0x1>
    1fc6:	e0 92 08 05 	sts	0x0508, r14	; 0x800508 <xTickCount>
    1fca:	e1 14       	cp	r14, r1
    1fcc:	f1 04       	cpc	r15, r1
    1fce:	b9 f4       	brne	.+46     	; 0x1ffe <xTaskIncrementTick+0x60>
    1fd0:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <pxDelayedTaskList>
    1fd4:	90 91 0d 05 	lds	r25, 0x050D	; 0x80050d <pxDelayedTaskList+0x1>
    1fd8:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <pxOverflowDelayedTaskList>
    1fdc:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <pxOverflowDelayedTaskList+0x1>
    1fe0:	30 93 0d 05 	sts	0x050D, r19	; 0x80050d <pxDelayedTaskList+0x1>
    1fe4:	20 93 0c 05 	sts	0x050C, r18	; 0x80050c <pxDelayedTaskList>
    1fe8:	90 93 0b 05 	sts	0x050B, r25	; 0x80050b <pxOverflowDelayedTaskList+0x1>
    1fec:	80 93 0a 05 	sts	0x050A, r24	; 0x80050a <pxOverflowDelayedTaskList>
    1ff0:	80 91 03 05 	lds	r24, 0x0503	; 0x800503 <xNumOfOverflows>
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	80 93 03 05 	sts	0x0503, r24	; 0x800503 <xNumOfOverflows>
    1ffa:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <prvResetNextTaskUnblockTime>
    1ffe:	80 91 01 05 	lds	r24, 0x0501	; 0x800501 <xNextTaskUnblockTime>
    2002:	90 91 02 05 	lds	r25, 0x0502	; 0x800502 <xNextTaskUnblockTime+0x1>
    2006:	e8 16       	cp	r14, r24
    2008:	f9 06       	cpc	r15, r25
    200a:	10 f4       	brcc	.+4      	; 0x2010 <xTaskIncrementTick+0x72>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	b9 c0       	rjmp	.+370    	; 0x2182 <xTaskIncrementTick+0x1e4>
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	61 e0       	ldi	r22, 0x01	; 1
    2014:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxDelayedTaskList>
    2018:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxDelayedTaskList+0x1>
    201c:	90 81       	ld	r25, Z
    201e:	91 11       	cpse	r25, r1
    2020:	07 c0       	rjmp	.+14     	; 0x2030 <xTaskIncrementTick+0x92>
    2022:	2f ef       	ldi	r18, 0xFF	; 255
    2024:	3f ef       	ldi	r19, 0xFF	; 255
    2026:	30 93 02 05 	sts	0x0502, r19	; 0x800502 <xNextTaskUnblockTime+0x1>
    202a:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <xNextTaskUnblockTime>
    202e:	a9 c0       	rjmp	.+338    	; 0x2182 <xTaskIncrementTick+0x1e4>
    2030:	e0 91 0c 05 	lds	r30, 0x050C	; 0x80050c <pxDelayedTaskList>
    2034:	f0 91 0d 05 	lds	r31, 0x050D	; 0x80050d <pxDelayedTaskList+0x1>
    2038:	05 80       	ldd	r0, Z+5	; 0x05
    203a:	f6 81       	ldd	r31, Z+6	; 0x06
    203c:	e0 2d       	mov	r30, r0
    203e:	06 80       	ldd	r0, Z+6	; 0x06
    2040:	f7 81       	ldd	r31, Z+7	; 0x07
    2042:	e0 2d       	mov	r30, r0
    2044:	22 81       	ldd	r18, Z+2	; 0x02
    2046:	33 81       	ldd	r19, Z+3	; 0x03
    2048:	e2 16       	cp	r14, r18
    204a:	f3 06       	cpc	r15, r19
    204c:	28 f4       	brcc	.+10     	; 0x2058 <xTaskIncrementTick+0xba>
    204e:	30 93 02 05 	sts	0x0502, r19	; 0x800502 <xNextTaskUnblockTime+0x1>
    2052:	20 93 01 05 	sts	0x0501, r18	; 0x800501 <xNextTaskUnblockTime>
    2056:	95 c0       	rjmp	.+298    	; 0x2182 <xTaskIncrementTick+0x1e4>
    2058:	a2 85       	ldd	r26, Z+10	; 0x0a
    205a:	b3 85       	ldd	r27, Z+11	; 0x0b
    205c:	24 81       	ldd	r18, Z+4	; 0x04
    205e:	35 81       	ldd	r19, Z+5	; 0x05
    2060:	46 81       	ldd	r20, Z+6	; 0x06
    2062:	57 81       	ldd	r21, Z+7	; 0x07
    2064:	e9 01       	movw	r28, r18
    2066:	5d 83       	std	Y+5, r21	; 0x05
    2068:	4c 83       	std	Y+4, r20	; 0x04
    206a:	26 81       	ldd	r18, Z+6	; 0x06
    206c:	37 81       	ldd	r19, Z+7	; 0x07
    206e:	44 81       	ldd	r20, Z+4	; 0x04
    2070:	55 81       	ldd	r21, Z+5	; 0x05
    2072:	e9 01       	movw	r28, r18
    2074:	5b 83       	std	Y+3, r21	; 0x03
    2076:	4a 83       	std	Y+2, r20	; 0x02
    2078:	af 01       	movw	r20, r30
    207a:	4e 5f       	subi	r20, 0xFE	; 254
    207c:	5f 4f       	sbci	r21, 0xFF	; 255
    207e:	11 96       	adiw	r26, 0x01	; 1
    2080:	2d 91       	ld	r18, X+
    2082:	3c 91       	ld	r19, X
    2084:	12 97       	sbiw	r26, 0x02	; 2
    2086:	24 17       	cp	r18, r20
    2088:	35 07       	cpc	r19, r21
    208a:	31 f4       	brne	.+12     	; 0x2098 <xTaskIncrementTick+0xfa>
    208c:	26 81       	ldd	r18, Z+6	; 0x06
    208e:	37 81       	ldd	r19, Z+7	; 0x07
    2090:	12 96       	adiw	r26, 0x02	; 2
    2092:	3c 93       	st	X, r19
    2094:	2e 93       	st	-X, r18
    2096:	11 97       	sbiw	r26, 0x01	; 1
    2098:	13 86       	std	Z+11, r1	; 0x0b
    209a:	12 86       	std	Z+10, r1	; 0x0a
    209c:	9c 91       	ld	r25, X
    209e:	91 50       	subi	r25, 0x01	; 1
    20a0:	9c 93       	st	X, r25
    20a2:	a4 89       	ldd	r26, Z+20	; 0x14
    20a4:	b5 89       	ldd	r27, Z+21	; 0x15
    20a6:	10 97       	sbiw	r26, 0x00	; 0
    20a8:	19 f1       	breq	.+70     	; 0x20f0 <xTaskIncrementTick+0x152>
    20aa:	26 85       	ldd	r18, Z+14	; 0x0e
    20ac:	37 85       	ldd	r19, Z+15	; 0x0f
    20ae:	00 89       	ldd	r16, Z+16	; 0x10
    20b0:	11 89       	ldd	r17, Z+17	; 0x11
    20b2:	e9 01       	movw	r28, r18
    20b4:	1d 83       	std	Y+5, r17	; 0x05
    20b6:	0c 83       	std	Y+4, r16	; 0x04
    20b8:	20 89       	ldd	r18, Z+16	; 0x10
    20ba:	31 89       	ldd	r19, Z+17	; 0x11
    20bc:	06 85       	ldd	r16, Z+14	; 0x0e
    20be:	17 85       	ldd	r17, Z+15	; 0x0f
    20c0:	e9 01       	movw	r28, r18
    20c2:	1b 83       	std	Y+3, r17	; 0x03
    20c4:	0a 83       	std	Y+2, r16	; 0x02
    20c6:	11 96       	adiw	r26, 0x01	; 1
    20c8:	0d 91       	ld	r16, X+
    20ca:	1c 91       	ld	r17, X
    20cc:	12 97       	sbiw	r26, 0x02	; 2
    20ce:	9f 01       	movw	r18, r30
    20d0:	24 5f       	subi	r18, 0xF4	; 244
    20d2:	3f 4f       	sbci	r19, 0xFF	; 255
    20d4:	02 17       	cp	r16, r18
    20d6:	13 07       	cpc	r17, r19
    20d8:	31 f4       	brne	.+12     	; 0x20e6 <xTaskIncrementTick+0x148>
    20da:	20 89       	ldd	r18, Z+16	; 0x10
    20dc:	31 89       	ldd	r19, Z+17	; 0x11
    20de:	12 96       	adiw	r26, 0x02	; 2
    20e0:	3c 93       	st	X, r19
    20e2:	2e 93       	st	-X, r18
    20e4:	11 97       	sbiw	r26, 0x01	; 1
    20e6:	15 8a       	std	Z+21, r1	; 0x15
    20e8:	14 8a       	std	Z+20, r1	; 0x14
    20ea:	9c 91       	ld	r25, X
    20ec:	91 50       	subi	r25, 0x01	; 1
    20ee:	9c 93       	st	X, r25
    20f0:	26 89       	ldd	r18, Z+22	; 0x16
    20f2:	90 91 07 05 	lds	r25, 0x0507	; 0x800507 <uxTopReadyPriority>
    20f6:	92 17       	cp	r25, r18
    20f8:	10 f4       	brcc	.+4      	; 0x20fe <xTaskIncrementTick+0x160>
    20fa:	20 93 07 05 	sts	0x0507, r18	; 0x800507 <uxTopReadyPriority>
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	d9 01       	movw	r26, r18
    2102:	aa 0f       	add	r26, r26
    2104:	bb 1f       	adc	r27, r27
    2106:	aa 0f       	add	r26, r26
    2108:	bb 1f       	adc	r27, r27
    210a:	aa 0f       	add	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	2a 0f       	add	r18, r26
    2110:	3b 1f       	adc	r19, r27
    2112:	d9 01       	movw	r26, r18
    2114:	a2 5f       	subi	r26, 0xF2	; 242
    2116:	ba 4f       	sbci	r27, 0xFA	; 250
    2118:	11 96       	adiw	r26, 0x01	; 1
    211a:	0d 90       	ld	r0, X+
    211c:	bc 91       	ld	r27, X
    211e:	a0 2d       	mov	r26, r0
    2120:	b5 83       	std	Z+5, r27	; 0x05
    2122:	a4 83       	std	Z+4, r26	; 0x04
    2124:	14 96       	adiw	r26, 0x04	; 4
    2126:	2d 91       	ld	r18, X+
    2128:	3c 91       	ld	r19, X
    212a:	15 97       	sbiw	r26, 0x05	; 5
    212c:	37 83       	std	Z+7, r19	; 0x07
    212e:	26 83       	std	Z+6, r18	; 0x06
    2130:	14 96       	adiw	r26, 0x04	; 4
    2132:	2d 91       	ld	r18, X+
    2134:	3c 91       	ld	r19, X
    2136:	15 97       	sbiw	r26, 0x05	; 5
    2138:	e9 01       	movw	r28, r18
    213a:	5b 83       	std	Y+3, r21	; 0x03
    213c:	4a 83       	std	Y+2, r20	; 0x02
    213e:	15 96       	adiw	r26, 0x05	; 5
    2140:	5c 93       	st	X, r21
    2142:	4e 93       	st	-X, r20
    2144:	14 97       	sbiw	r26, 0x04	; 4
    2146:	a6 89       	ldd	r26, Z+22	; 0x16
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	9d 01       	movw	r18, r26
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	22 0f       	add	r18, r18
    2152:	33 1f       	adc	r19, r19
    2154:	22 0f       	add	r18, r18
    2156:	33 1f       	adc	r19, r19
    2158:	a2 0f       	add	r26, r18
    215a:	b3 1f       	adc	r27, r19
    215c:	a2 5f       	subi	r26, 0xF2	; 242
    215e:	ba 4f       	sbci	r27, 0xFA	; 250
    2160:	b3 87       	std	Z+11, r27	; 0x0b
    2162:	a2 87       	std	Z+10, r26	; 0x0a
    2164:	9c 91       	ld	r25, X
    2166:	9f 5f       	subi	r25, 0xFF	; 255
    2168:	9c 93       	st	X, r25
    216a:	a0 91 32 05 	lds	r26, 0x0532	; 0x800532 <pxCurrentTCB>
    216e:	b0 91 33 05 	lds	r27, 0x0533	; 0x800533 <pxCurrentTCB+0x1>
    2172:	26 89       	ldd	r18, Z+22	; 0x16
    2174:	56 96       	adiw	r26, 0x16	; 22
    2176:	9c 91       	ld	r25, X
    2178:	92 17       	cp	r25, r18
    217a:	08 f0       	brcs	.+2      	; 0x217e <xTaskIncrementTick+0x1e0>
    217c:	4b cf       	rjmp	.-362    	; 0x2014 <xTaskIncrementTick+0x76>
    217e:	86 2f       	mov	r24, r22
    2180:	49 cf       	rjmp	.-366    	; 0x2014 <xTaskIncrementTick+0x76>
    2182:	e0 91 32 05 	lds	r30, 0x0532	; 0x800532 <pxCurrentTCB>
    2186:	f0 91 33 05 	lds	r31, 0x0533	; 0x800533 <pxCurrentTCB+0x1>
    218a:	26 89       	ldd	r18, Z+22	; 0x16
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	f9 01       	movw	r30, r18
    2190:	ee 0f       	add	r30, r30
    2192:	ff 1f       	adc	r31, r31
    2194:	ee 0f       	add	r30, r30
    2196:	ff 1f       	adc	r31, r31
    2198:	ee 0f       	add	r30, r30
    219a:	ff 1f       	adc	r31, r31
    219c:	2e 0f       	add	r18, r30
    219e:	3f 1f       	adc	r19, r31
    21a0:	f9 01       	movw	r30, r18
    21a2:	e2 5f       	subi	r30, 0xF2	; 242
    21a4:	fa 4f       	sbci	r31, 0xFA	; 250
    21a6:	90 81       	ld	r25, Z
    21a8:	92 30       	cpi	r25, 0x02	; 2
    21aa:	08 f0       	brcs	.+2      	; 0x21ae <xTaskIncrementTick+0x210>
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	90 91 04 05 	lds	r25, 0x0504	; 0x800504 <xYieldPending>
    21b2:	99 23       	and	r25, r25
    21b4:	61 f0       	breq	.+24     	; 0x21ce <xTaskIncrementTick+0x230>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	0a c0       	rjmp	.+20     	; 0x21ce <xTaskIncrementTick+0x230>
    21ba:	80 91 05 05 	lds	r24, 0x0505	; 0x800505 <xPendedTicks>
    21be:	90 91 06 05 	lds	r25, 0x0506	; 0x800506 <xPendedTicks+0x1>
    21c2:	01 96       	adiw	r24, 0x01	; 1
    21c4:	90 93 06 05 	sts	0x0506, r25	; 0x800506 <xPendedTicks+0x1>
    21c8:	80 93 05 05 	sts	0x0505, r24	; 0x800505 <xPendedTicks>
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	ff 90       	pop	r15
    21d8:	ef 90       	pop	r14
    21da:	08 95       	ret

000021dc <vTaskSwitchContext>:
    21dc:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <uxSchedulerSuspended>
    21e0:	88 23       	and	r24, r24
    21e2:	21 f0       	breq	.+8      	; 0x21ec <vTaskSwitchContext+0x10>
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <xYieldPending>
    21ea:	08 95       	ret
    21ec:	10 92 04 05 	sts	0x0504, r1	; 0x800504 <xYieldPending>
    21f0:	20 91 07 05 	lds	r18, 0x0507	; 0x800507 <uxTopReadyPriority>
    21f4:	82 2f       	mov	r24, r18
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	fc 01       	movw	r30, r24
    21fa:	ee 0f       	add	r30, r30
    21fc:	ff 1f       	adc	r31, r31
    21fe:	ee 0f       	add	r30, r30
    2200:	ff 1f       	adc	r31, r31
    2202:	ee 0f       	add	r30, r30
    2204:	ff 1f       	adc	r31, r31
    2206:	e8 0f       	add	r30, r24
    2208:	f9 1f       	adc	r31, r25
    220a:	e2 5f       	subi	r30, 0xF2	; 242
    220c:	fa 4f       	sbci	r31, 0xFA	; 250
    220e:	30 81       	ld	r19, Z
    2210:	31 11       	cpse	r19, r1
    2212:	11 c0       	rjmp	.+34     	; 0x2236 <vTaskSwitchContext+0x5a>
    2214:	21 50       	subi	r18, 0x01	; 1
    2216:	82 2f       	mov	r24, r18
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	fc 01       	movw	r30, r24
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ee 0f       	add	r30, r30
    2226:	ff 1f       	adc	r31, r31
    2228:	e8 0f       	add	r30, r24
    222a:	f9 1f       	adc	r31, r25
    222c:	e2 5f       	subi	r30, 0xF2	; 242
    222e:	fa 4f       	sbci	r31, 0xFA	; 250
    2230:	30 81       	ld	r19, Z
    2232:	33 23       	and	r19, r19
    2234:	79 f3       	breq	.-34     	; 0x2214 <vTaskSwitchContext+0x38>
    2236:	ac 01       	movw	r20, r24
    2238:	44 0f       	add	r20, r20
    223a:	55 1f       	adc	r21, r21
    223c:	44 0f       	add	r20, r20
    223e:	55 1f       	adc	r21, r21
    2240:	44 0f       	add	r20, r20
    2242:	55 1f       	adc	r21, r21
    2244:	48 0f       	add	r20, r24
    2246:	59 1f       	adc	r21, r25
    2248:	da 01       	movw	r26, r20
    224a:	a2 5f       	subi	r26, 0xF2	; 242
    224c:	ba 4f       	sbci	r27, 0xFA	; 250
    224e:	11 96       	adiw	r26, 0x01	; 1
    2250:	ed 91       	ld	r30, X+
    2252:	fc 91       	ld	r31, X
    2254:	12 97       	sbiw	r26, 0x02	; 2
    2256:	02 80       	ldd	r0, Z+2	; 0x02
    2258:	f3 81       	ldd	r31, Z+3	; 0x03
    225a:	e0 2d       	mov	r30, r0
    225c:	12 96       	adiw	r26, 0x02	; 2
    225e:	fc 93       	st	X, r31
    2260:	ee 93       	st	-X, r30
    2262:	11 97       	sbiw	r26, 0x01	; 1
    2264:	4f 5e       	subi	r20, 0xEF	; 239
    2266:	5a 4f       	sbci	r21, 0xFA	; 250
    2268:	e4 17       	cp	r30, r20
    226a:	f5 07       	cpc	r31, r21
    226c:	29 f4       	brne	.+10     	; 0x2278 <vTaskSwitchContext+0x9c>
    226e:	42 81       	ldd	r20, Z+2	; 0x02
    2270:	53 81       	ldd	r21, Z+3	; 0x03
    2272:	fd 01       	movw	r30, r26
    2274:	52 83       	std	Z+2, r21	; 0x02
    2276:	41 83       	std	Z+1, r20	; 0x01
    2278:	fc 01       	movw	r30, r24
    227a:	ee 0f       	add	r30, r30
    227c:	ff 1f       	adc	r31, r31
    227e:	ee 0f       	add	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	ee 0f       	add	r30, r30
    2284:	ff 1f       	adc	r31, r31
    2286:	8e 0f       	add	r24, r30
    2288:	9f 1f       	adc	r25, r31
    228a:	fc 01       	movw	r30, r24
    228c:	e2 5f       	subi	r30, 0xF2	; 242
    228e:	fa 4f       	sbci	r31, 0xFA	; 250
    2290:	01 80       	ldd	r0, Z+1	; 0x01
    2292:	f2 81       	ldd	r31, Z+2	; 0x02
    2294:	e0 2d       	mov	r30, r0
    2296:	86 81       	ldd	r24, Z+6	; 0x06
    2298:	97 81       	ldd	r25, Z+7	; 0x07
    229a:	90 93 33 05 	sts	0x0533, r25	; 0x800533 <pxCurrentTCB+0x1>
    229e:	80 93 32 05 	sts	0x0532, r24	; 0x800532 <pxCurrentTCB>
    22a2:	20 93 07 05 	sts	0x0507, r18	; 0x800507 <uxTopReadyPriority>
    22a6:	08 95       	ret

000022a8 <vPortYieldFromTick>:
    22a8:	0f 92       	push	r0
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	0f 92       	push	r0
    22b0:	1f 92       	push	r1
    22b2:	11 24       	eor	r1, r1
    22b4:	2f 92       	push	r2
    22b6:	3f 92       	push	r3
    22b8:	4f 92       	push	r4
    22ba:	5f 92       	push	r5
    22bc:	6f 92       	push	r6
    22be:	7f 92       	push	r7
    22c0:	8f 92       	push	r8
    22c2:	9f 92       	push	r9
    22c4:	af 92       	push	r10
    22c6:	bf 92       	push	r11
    22c8:	cf 92       	push	r12
    22ca:	df 92       	push	r13
    22cc:	ef 92       	push	r14
    22ce:	ff 92       	push	r15
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	2f 93       	push	r18
    22d6:	3f 93       	push	r19
    22d8:	4f 93       	push	r20
    22da:	5f 93       	push	r21
    22dc:	6f 93       	push	r22
    22de:	7f 93       	push	r23
    22e0:	8f 93       	push	r24
    22e2:	9f 93       	push	r25
    22e4:	af 93       	push	r26
    22e6:	bf 93       	push	r27
    22e8:	cf 93       	push	r28
    22ea:	df 93       	push	r29
    22ec:	ef 93       	push	r30
    22ee:	ff 93       	push	r31
    22f0:	a0 91 32 05 	lds	r26, 0x0532	; 0x800532 <pxCurrentTCB>
    22f4:	b0 91 33 05 	lds	r27, 0x0533	; 0x800533 <pxCurrentTCB+0x1>
    22f8:	0d b6       	in	r0, 0x3d	; 61
    22fa:	0d 92       	st	X+, r0
    22fc:	0e b6       	in	r0, 0x3e	; 62
    22fe:	0d 92       	st	X+, r0
    2300:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <xTaskIncrementTick>
    2304:	81 11       	cpse	r24, r1
    2306:	0e 94 ee 10 	call	0x21dc	; 0x21dc <vTaskSwitchContext>
    230a:	a0 91 32 05 	lds	r26, 0x0532	; 0x800532 <pxCurrentTCB>
    230e:	b0 91 33 05 	lds	r27, 0x0533	; 0x800533 <pxCurrentTCB+0x1>
    2312:	cd 91       	ld	r28, X+
    2314:	cd bf       	out	0x3d, r28	; 61
    2316:	dd 91       	ld	r29, X+
    2318:	de bf       	out	0x3e, r29	; 62
    231a:	ff 91       	pop	r31
    231c:	ef 91       	pop	r30
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	bf 91       	pop	r27
    2324:	af 91       	pop	r26
    2326:	9f 91       	pop	r25
    2328:	8f 91       	pop	r24
    232a:	7f 91       	pop	r23
    232c:	6f 91       	pop	r22
    232e:	5f 91       	pop	r21
    2330:	4f 91       	pop	r20
    2332:	3f 91       	pop	r19
    2334:	2f 91       	pop	r18
    2336:	1f 91       	pop	r17
    2338:	0f 91       	pop	r16
    233a:	ff 90       	pop	r15
    233c:	ef 90       	pop	r14
    233e:	df 90       	pop	r13
    2340:	cf 90       	pop	r12
    2342:	bf 90       	pop	r11
    2344:	af 90       	pop	r10
    2346:	9f 90       	pop	r9
    2348:	8f 90       	pop	r8
    234a:	7f 90       	pop	r7
    234c:	6f 90       	pop	r6
    234e:	5f 90       	pop	r5
    2350:	4f 90       	pop	r4
    2352:	3f 90       	pop	r3
    2354:	2f 90       	pop	r2
    2356:	1f 90       	pop	r1
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	08 95       	ret

00002360 <__vector_7>:
    2360:	0e 94 54 11 	call	0x22a8	; 0x22a8 <vPortYieldFromTick>
    2364:	18 95       	reti

00002366 <__subsf3>:
    2366:	50 58       	subi	r21, 0x80	; 128

00002368 <__addsf3>:
    2368:	bb 27       	eor	r27, r27
    236a:	aa 27       	eor	r26, r26
    236c:	0e 94 cb 11 	call	0x2396	; 0x2396 <__addsf3x>
    2370:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__fp_round>
    2374:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__fp_pscA>
    2378:	38 f0       	brcs	.+14     	; 0x2388 <__addsf3+0x20>
    237a:	0e 94 5f 12 	call	0x24be	; 0x24be <__fp_pscB>
    237e:	20 f0       	brcs	.+8      	; 0x2388 <__addsf3+0x20>
    2380:	39 f4       	brne	.+14     	; 0x2390 <__addsf3+0x28>
    2382:	9f 3f       	cpi	r25, 0xFF	; 255
    2384:	19 f4       	brne	.+6      	; 0x238c <__addsf3+0x24>
    2386:	26 f4       	brtc	.+8      	; 0x2390 <__addsf3+0x28>
    2388:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__fp_nan>
    238c:	0e f4       	brtc	.+2      	; 0x2390 <__addsf3+0x28>
    238e:	e0 95       	com	r30
    2390:	e7 fb       	bst	r30, 7
    2392:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__fp_inf>

00002396 <__addsf3x>:
    2396:	e9 2f       	mov	r30, r25
    2398:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fp_split3>
    239c:	58 f3       	brcs	.-42     	; 0x2374 <__addsf3+0xc>
    239e:	ba 17       	cp	r27, r26
    23a0:	62 07       	cpc	r22, r18
    23a2:	73 07       	cpc	r23, r19
    23a4:	84 07       	cpc	r24, r20
    23a6:	95 07       	cpc	r25, r21
    23a8:	20 f0       	brcs	.+8      	; 0x23b2 <__addsf3x+0x1c>
    23aa:	79 f4       	brne	.+30     	; 0x23ca <__addsf3x+0x34>
    23ac:	a6 f5       	brtc	.+104    	; 0x2416 <__addsf3x+0x80>
    23ae:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__fp_zero>
    23b2:	0e f4       	brtc	.+2      	; 0x23b6 <__addsf3x+0x20>
    23b4:	e0 95       	com	r30
    23b6:	0b 2e       	mov	r0, r27
    23b8:	ba 2f       	mov	r27, r26
    23ba:	a0 2d       	mov	r26, r0
    23bc:	0b 01       	movw	r0, r22
    23be:	b9 01       	movw	r22, r18
    23c0:	90 01       	movw	r18, r0
    23c2:	0c 01       	movw	r0, r24
    23c4:	ca 01       	movw	r24, r20
    23c6:	a0 01       	movw	r20, r0
    23c8:	11 24       	eor	r1, r1
    23ca:	ff 27       	eor	r31, r31
    23cc:	59 1b       	sub	r21, r25
    23ce:	99 f0       	breq	.+38     	; 0x23f6 <__addsf3x+0x60>
    23d0:	59 3f       	cpi	r21, 0xF9	; 249
    23d2:	50 f4       	brcc	.+20     	; 0x23e8 <__addsf3x+0x52>
    23d4:	50 3e       	cpi	r21, 0xE0	; 224
    23d6:	68 f1       	brcs	.+90     	; 0x2432 <__addsf3x+0x9c>
    23d8:	1a 16       	cp	r1, r26
    23da:	f0 40       	sbci	r31, 0x00	; 0
    23dc:	a2 2f       	mov	r26, r18
    23de:	23 2f       	mov	r18, r19
    23e0:	34 2f       	mov	r19, r20
    23e2:	44 27       	eor	r20, r20
    23e4:	58 5f       	subi	r21, 0xF8	; 248
    23e6:	f3 cf       	rjmp	.-26     	; 0x23ce <__addsf3x+0x38>
    23e8:	46 95       	lsr	r20
    23ea:	37 95       	ror	r19
    23ec:	27 95       	ror	r18
    23ee:	a7 95       	ror	r26
    23f0:	f0 40       	sbci	r31, 0x00	; 0
    23f2:	53 95       	inc	r21
    23f4:	c9 f7       	brne	.-14     	; 0x23e8 <__addsf3x+0x52>
    23f6:	7e f4       	brtc	.+30     	; 0x2416 <__addsf3x+0x80>
    23f8:	1f 16       	cp	r1, r31
    23fa:	ba 0b       	sbc	r27, r26
    23fc:	62 0b       	sbc	r22, r18
    23fe:	73 0b       	sbc	r23, r19
    2400:	84 0b       	sbc	r24, r20
    2402:	ba f0       	brmi	.+46     	; 0x2432 <__addsf3x+0x9c>
    2404:	91 50       	subi	r25, 0x01	; 1
    2406:	a1 f0       	breq	.+40     	; 0x2430 <__addsf3x+0x9a>
    2408:	ff 0f       	add	r31, r31
    240a:	bb 1f       	adc	r27, r27
    240c:	66 1f       	adc	r22, r22
    240e:	77 1f       	adc	r23, r23
    2410:	88 1f       	adc	r24, r24
    2412:	c2 f7       	brpl	.-16     	; 0x2404 <__addsf3x+0x6e>
    2414:	0e c0       	rjmp	.+28     	; 0x2432 <__addsf3x+0x9c>
    2416:	ba 0f       	add	r27, r26
    2418:	62 1f       	adc	r22, r18
    241a:	73 1f       	adc	r23, r19
    241c:	84 1f       	adc	r24, r20
    241e:	48 f4       	brcc	.+18     	; 0x2432 <__addsf3x+0x9c>
    2420:	87 95       	ror	r24
    2422:	77 95       	ror	r23
    2424:	67 95       	ror	r22
    2426:	b7 95       	ror	r27
    2428:	f7 95       	ror	r31
    242a:	9e 3f       	cpi	r25, 0xFE	; 254
    242c:	08 f0       	brcs	.+2      	; 0x2430 <__addsf3x+0x9a>
    242e:	b0 cf       	rjmp	.-160    	; 0x2390 <__addsf3+0x28>
    2430:	93 95       	inc	r25
    2432:	88 0f       	add	r24, r24
    2434:	08 f0       	brcs	.+2      	; 0x2438 <__addsf3x+0xa2>
    2436:	99 27       	eor	r25, r25
    2438:	ee 0f       	add	r30, r30
    243a:	97 95       	ror	r25
    243c:	87 95       	ror	r24
    243e:	08 95       	ret

00002440 <__fixunssfsi>:
    2440:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__fp_splitA>
    2444:	88 f0       	brcs	.+34     	; 0x2468 <__fixunssfsi+0x28>
    2446:	9f 57       	subi	r25, 0x7F	; 127
    2448:	98 f0       	brcs	.+38     	; 0x2470 <__fixunssfsi+0x30>
    244a:	b9 2f       	mov	r27, r25
    244c:	99 27       	eor	r25, r25
    244e:	b7 51       	subi	r27, 0x17	; 23
    2450:	b0 f0       	brcs	.+44     	; 0x247e <__fixunssfsi+0x3e>
    2452:	e1 f0       	breq	.+56     	; 0x248c <__fixunssfsi+0x4c>
    2454:	66 0f       	add	r22, r22
    2456:	77 1f       	adc	r23, r23
    2458:	88 1f       	adc	r24, r24
    245a:	99 1f       	adc	r25, r25
    245c:	1a f0       	brmi	.+6      	; 0x2464 <__fixunssfsi+0x24>
    245e:	ba 95       	dec	r27
    2460:	c9 f7       	brne	.-14     	; 0x2454 <__fixunssfsi+0x14>
    2462:	14 c0       	rjmp	.+40     	; 0x248c <__fixunssfsi+0x4c>
    2464:	b1 30       	cpi	r27, 0x01	; 1
    2466:	91 f0       	breq	.+36     	; 0x248c <__fixunssfsi+0x4c>
    2468:	0e 94 99 12 	call	0x2532	; 0x2532 <__fp_zero>
    246c:	b1 e0       	ldi	r27, 0x01	; 1
    246e:	08 95       	ret
    2470:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__fp_zero>
    2474:	67 2f       	mov	r22, r23
    2476:	78 2f       	mov	r23, r24
    2478:	88 27       	eor	r24, r24
    247a:	b8 5f       	subi	r27, 0xF8	; 248
    247c:	39 f0       	breq	.+14     	; 0x248c <__fixunssfsi+0x4c>
    247e:	b9 3f       	cpi	r27, 0xF9	; 249
    2480:	cc f3       	brlt	.-14     	; 0x2474 <__fixunssfsi+0x34>
    2482:	86 95       	lsr	r24
    2484:	77 95       	ror	r23
    2486:	67 95       	ror	r22
    2488:	b3 95       	inc	r27
    248a:	d9 f7       	brne	.-10     	; 0x2482 <__fixunssfsi+0x42>
    248c:	3e f4       	brtc	.+14     	; 0x249c <__fixunssfsi+0x5c>
    248e:	90 95       	com	r25
    2490:	80 95       	com	r24
    2492:	70 95       	com	r23
    2494:	61 95       	neg	r22
    2496:	7f 4f       	sbci	r23, 0xFF	; 255
    2498:	8f 4f       	sbci	r24, 0xFF	; 255
    249a:	9f 4f       	sbci	r25, 0xFF	; 255
    249c:	08 95       	ret

0000249e <__fp_inf>:
    249e:	97 f9       	bld	r25, 7
    24a0:	9f 67       	ori	r25, 0x7F	; 127
    24a2:	80 e8       	ldi	r24, 0x80	; 128
    24a4:	70 e0       	ldi	r23, 0x00	; 0
    24a6:	60 e0       	ldi	r22, 0x00	; 0
    24a8:	08 95       	ret

000024aa <__fp_nan>:
    24aa:	9f ef       	ldi	r25, 0xFF	; 255
    24ac:	80 ec       	ldi	r24, 0xC0	; 192
    24ae:	08 95       	ret

000024b0 <__fp_pscA>:
    24b0:	00 24       	eor	r0, r0
    24b2:	0a 94       	dec	r0
    24b4:	16 16       	cp	r1, r22
    24b6:	17 06       	cpc	r1, r23
    24b8:	18 06       	cpc	r1, r24
    24ba:	09 06       	cpc	r0, r25
    24bc:	08 95       	ret

000024be <__fp_pscB>:
    24be:	00 24       	eor	r0, r0
    24c0:	0a 94       	dec	r0
    24c2:	12 16       	cp	r1, r18
    24c4:	13 06       	cpc	r1, r19
    24c6:	14 06       	cpc	r1, r20
    24c8:	05 06       	cpc	r0, r21
    24ca:	08 95       	ret

000024cc <__fp_round>:
    24cc:	09 2e       	mov	r0, r25
    24ce:	03 94       	inc	r0
    24d0:	00 0c       	add	r0, r0
    24d2:	11 f4       	brne	.+4      	; 0x24d8 <__fp_round+0xc>
    24d4:	88 23       	and	r24, r24
    24d6:	52 f0       	brmi	.+20     	; 0x24ec <__fp_round+0x20>
    24d8:	bb 0f       	add	r27, r27
    24da:	40 f4       	brcc	.+16     	; 0x24ec <__fp_round+0x20>
    24dc:	bf 2b       	or	r27, r31
    24de:	11 f4       	brne	.+4      	; 0x24e4 <__fp_round+0x18>
    24e0:	60 ff       	sbrs	r22, 0
    24e2:	04 c0       	rjmp	.+8      	; 0x24ec <__fp_round+0x20>
    24e4:	6f 5f       	subi	r22, 0xFF	; 255
    24e6:	7f 4f       	sbci	r23, 0xFF	; 255
    24e8:	8f 4f       	sbci	r24, 0xFF	; 255
    24ea:	9f 4f       	sbci	r25, 0xFF	; 255
    24ec:	08 95       	ret

000024ee <__fp_split3>:
    24ee:	57 fd       	sbrc	r21, 7
    24f0:	90 58       	subi	r25, 0x80	; 128
    24f2:	44 0f       	add	r20, r20
    24f4:	55 1f       	adc	r21, r21
    24f6:	59 f0       	breq	.+22     	; 0x250e <__fp_splitA+0x10>
    24f8:	5f 3f       	cpi	r21, 0xFF	; 255
    24fa:	71 f0       	breq	.+28     	; 0x2518 <__fp_splitA+0x1a>
    24fc:	47 95       	ror	r20

000024fe <__fp_splitA>:
    24fe:	88 0f       	add	r24, r24
    2500:	97 fb       	bst	r25, 7
    2502:	99 1f       	adc	r25, r25
    2504:	61 f0       	breq	.+24     	; 0x251e <__fp_splitA+0x20>
    2506:	9f 3f       	cpi	r25, 0xFF	; 255
    2508:	79 f0       	breq	.+30     	; 0x2528 <__fp_splitA+0x2a>
    250a:	87 95       	ror	r24
    250c:	08 95       	ret
    250e:	12 16       	cp	r1, r18
    2510:	13 06       	cpc	r1, r19
    2512:	14 06       	cpc	r1, r20
    2514:	55 1f       	adc	r21, r21
    2516:	f2 cf       	rjmp	.-28     	; 0x24fc <__fp_split3+0xe>
    2518:	46 95       	lsr	r20
    251a:	f1 df       	rcall	.-30     	; 0x24fe <__fp_splitA>
    251c:	08 c0       	rjmp	.+16     	; 0x252e <__fp_splitA+0x30>
    251e:	16 16       	cp	r1, r22
    2520:	17 06       	cpc	r1, r23
    2522:	18 06       	cpc	r1, r24
    2524:	99 1f       	adc	r25, r25
    2526:	f1 cf       	rjmp	.-30     	; 0x250a <__fp_splitA+0xc>
    2528:	86 95       	lsr	r24
    252a:	71 05       	cpc	r23, r1
    252c:	61 05       	cpc	r22, r1
    252e:	08 94       	sec
    2530:	08 95       	ret

00002532 <__fp_zero>:
    2532:	e8 94       	clt

00002534 <__fp_szero>:
    2534:	bb 27       	eor	r27, r27
    2536:	66 27       	eor	r22, r22
    2538:	77 27       	eor	r23, r23
    253a:	cb 01       	movw	r24, r22
    253c:	97 f9       	bld	r25, 7
    253e:	08 95       	ret

00002540 <__mulsf3>:
    2540:	0e 94 b3 12 	call	0x2566	; 0x2566 <__mulsf3x>
    2544:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <__fp_round>
    2548:	0e 94 58 12 	call	0x24b0	; 0x24b0 <__fp_pscA>
    254c:	38 f0       	brcs	.+14     	; 0x255c <__mulsf3+0x1c>
    254e:	0e 94 5f 12 	call	0x24be	; 0x24be <__fp_pscB>
    2552:	20 f0       	brcs	.+8      	; 0x255c <__mulsf3+0x1c>
    2554:	95 23       	and	r25, r21
    2556:	11 f0       	breq	.+4      	; 0x255c <__mulsf3+0x1c>
    2558:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__fp_inf>
    255c:	0c 94 55 12 	jmp	0x24aa	; 0x24aa <__fp_nan>
    2560:	11 24       	eor	r1, r1
    2562:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__fp_szero>

00002566 <__mulsf3x>:
    2566:	0e 94 77 12 	call	0x24ee	; 0x24ee <__fp_split3>
    256a:	70 f3       	brcs	.-36     	; 0x2548 <__mulsf3+0x8>

0000256c <__mulsf3_pse>:
    256c:	95 9f       	mul	r25, r21
    256e:	c1 f3       	breq	.-16     	; 0x2560 <__mulsf3+0x20>
    2570:	95 0f       	add	r25, r21
    2572:	50 e0       	ldi	r21, 0x00	; 0
    2574:	55 1f       	adc	r21, r21
    2576:	62 9f       	mul	r22, r18
    2578:	f0 01       	movw	r30, r0
    257a:	72 9f       	mul	r23, r18
    257c:	bb 27       	eor	r27, r27
    257e:	f0 0d       	add	r31, r0
    2580:	b1 1d       	adc	r27, r1
    2582:	63 9f       	mul	r22, r19
    2584:	aa 27       	eor	r26, r26
    2586:	f0 0d       	add	r31, r0
    2588:	b1 1d       	adc	r27, r1
    258a:	aa 1f       	adc	r26, r26
    258c:	64 9f       	mul	r22, r20
    258e:	66 27       	eor	r22, r22
    2590:	b0 0d       	add	r27, r0
    2592:	a1 1d       	adc	r26, r1
    2594:	66 1f       	adc	r22, r22
    2596:	82 9f       	mul	r24, r18
    2598:	22 27       	eor	r18, r18
    259a:	b0 0d       	add	r27, r0
    259c:	a1 1d       	adc	r26, r1
    259e:	62 1f       	adc	r22, r18
    25a0:	73 9f       	mul	r23, r19
    25a2:	b0 0d       	add	r27, r0
    25a4:	a1 1d       	adc	r26, r1
    25a6:	62 1f       	adc	r22, r18
    25a8:	83 9f       	mul	r24, r19
    25aa:	a0 0d       	add	r26, r0
    25ac:	61 1d       	adc	r22, r1
    25ae:	22 1f       	adc	r18, r18
    25b0:	74 9f       	mul	r23, r20
    25b2:	33 27       	eor	r19, r19
    25b4:	a0 0d       	add	r26, r0
    25b6:	61 1d       	adc	r22, r1
    25b8:	23 1f       	adc	r18, r19
    25ba:	84 9f       	mul	r24, r20
    25bc:	60 0d       	add	r22, r0
    25be:	21 1d       	adc	r18, r1
    25c0:	82 2f       	mov	r24, r18
    25c2:	76 2f       	mov	r23, r22
    25c4:	6a 2f       	mov	r22, r26
    25c6:	11 24       	eor	r1, r1
    25c8:	9f 57       	subi	r25, 0x7F	; 127
    25ca:	50 40       	sbci	r21, 0x00	; 0
    25cc:	9a f0       	brmi	.+38     	; 0x25f4 <__mulsf3_pse+0x88>
    25ce:	f1 f0       	breq	.+60     	; 0x260c <__mulsf3_pse+0xa0>
    25d0:	88 23       	and	r24, r24
    25d2:	4a f0       	brmi	.+18     	; 0x25e6 <__mulsf3_pse+0x7a>
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	bb 1f       	adc	r27, r27
    25da:	66 1f       	adc	r22, r22
    25dc:	77 1f       	adc	r23, r23
    25de:	88 1f       	adc	r24, r24
    25e0:	91 50       	subi	r25, 0x01	; 1
    25e2:	50 40       	sbci	r21, 0x00	; 0
    25e4:	a9 f7       	brne	.-22     	; 0x25d0 <__mulsf3_pse+0x64>
    25e6:	9e 3f       	cpi	r25, 0xFE	; 254
    25e8:	51 05       	cpc	r21, r1
    25ea:	80 f0       	brcs	.+32     	; 0x260c <__mulsf3_pse+0xa0>
    25ec:	0c 94 4f 12 	jmp	0x249e	; 0x249e <__fp_inf>
    25f0:	0c 94 9a 12 	jmp	0x2534	; 0x2534 <__fp_szero>
    25f4:	5f 3f       	cpi	r21, 0xFF	; 255
    25f6:	e4 f3       	brlt	.-8      	; 0x25f0 <__mulsf3_pse+0x84>
    25f8:	98 3e       	cpi	r25, 0xE8	; 232
    25fa:	d4 f3       	brlt	.-12     	; 0x25f0 <__mulsf3_pse+0x84>
    25fc:	86 95       	lsr	r24
    25fe:	77 95       	ror	r23
    2600:	67 95       	ror	r22
    2602:	b7 95       	ror	r27
    2604:	f7 95       	ror	r31
    2606:	e7 95       	ror	r30
    2608:	9f 5f       	subi	r25, 0xFF	; 255
    260a:	c1 f7       	brne	.-16     	; 0x25fc <__mulsf3_pse+0x90>
    260c:	fe 2b       	or	r31, r30
    260e:	88 0f       	add	r24, r24
    2610:	91 1d       	adc	r25, r1
    2612:	96 95       	lsr	r25
    2614:	87 95       	ror	r24
    2616:	97 f9       	bld	r25, 7
    2618:	08 95       	ret

0000261a <__udivmodsi4>:
    261a:	a1 e2       	ldi	r26, 0x21	; 33
    261c:	1a 2e       	mov	r1, r26
    261e:	aa 1b       	sub	r26, r26
    2620:	bb 1b       	sub	r27, r27
    2622:	fd 01       	movw	r30, r26
    2624:	0d c0       	rjmp	.+26     	; 0x2640 <__udivmodsi4_ep>

00002626 <__udivmodsi4_loop>:
    2626:	aa 1f       	adc	r26, r26
    2628:	bb 1f       	adc	r27, r27
    262a:	ee 1f       	adc	r30, r30
    262c:	ff 1f       	adc	r31, r31
    262e:	a2 17       	cp	r26, r18
    2630:	b3 07       	cpc	r27, r19
    2632:	e4 07       	cpc	r30, r20
    2634:	f5 07       	cpc	r31, r21
    2636:	20 f0       	brcs	.+8      	; 0x2640 <__udivmodsi4_ep>
    2638:	a2 1b       	sub	r26, r18
    263a:	b3 0b       	sbc	r27, r19
    263c:	e4 0b       	sbc	r30, r20
    263e:	f5 0b       	sbc	r31, r21

00002640 <__udivmodsi4_ep>:
    2640:	66 1f       	adc	r22, r22
    2642:	77 1f       	adc	r23, r23
    2644:	88 1f       	adc	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	1a 94       	dec	r1
    264a:	69 f7       	brne	.-38     	; 0x2626 <__udivmodsi4_loop>
    264c:	60 95       	com	r22
    264e:	70 95       	com	r23
    2650:	80 95       	com	r24
    2652:	90 95       	com	r25
    2654:	9b 01       	movw	r18, r22
    2656:	ac 01       	movw	r20, r24
    2658:	bd 01       	movw	r22, r26
    265a:	cf 01       	movw	r24, r30
    265c:	08 95       	ret

0000265e <__tablejump2__>:
    265e:	ee 0f       	add	r30, r30
    2660:	ff 1f       	adc	r31, r31
    2662:	05 90       	lpm	r0, Z+
    2664:	f4 91       	lpm	r31, Z
    2666:	e0 2d       	mov	r30, r0
    2668:	09 94       	ijmp

0000266a <memcmp>:
    266a:	fb 01       	movw	r30, r22
    266c:	dc 01       	movw	r26, r24
    266e:	04 c0       	rjmp	.+8      	; 0x2678 <memcmp+0xe>
    2670:	8d 91       	ld	r24, X+
    2672:	01 90       	ld	r0, Z+
    2674:	80 19       	sub	r24, r0
    2676:	21 f4       	brne	.+8      	; 0x2680 <memcmp+0x16>
    2678:	41 50       	subi	r20, 0x01	; 1
    267a:	50 40       	sbci	r21, 0x00	; 0
    267c:	c8 f7       	brcc	.-14     	; 0x2670 <memcmp+0x6>
    267e:	88 1b       	sub	r24, r24
    2680:	99 0b       	sbc	r25, r25
    2682:	08 95       	ret

00002684 <__itoa_ncheck>:
    2684:	bb 27       	eor	r27, r27
    2686:	4a 30       	cpi	r20, 0x0A	; 10
    2688:	31 f4       	brne	.+12     	; 0x2696 <__itoa_ncheck+0x12>
    268a:	99 23       	and	r25, r25
    268c:	22 f4       	brpl	.+8      	; 0x2696 <__itoa_ncheck+0x12>
    268e:	bd e2       	ldi	r27, 0x2D	; 45
    2690:	90 95       	com	r25
    2692:	81 95       	neg	r24
    2694:	9f 4f       	sbci	r25, 0xFF	; 255
    2696:	0c 94 4e 13 	jmp	0x269c	; 0x269c <__utoa_common>

0000269a <__utoa_ncheck>:
    269a:	bb 27       	eor	r27, r27

0000269c <__utoa_common>:
    269c:	fb 01       	movw	r30, r22
    269e:	55 27       	eor	r21, r21
    26a0:	aa 27       	eor	r26, r26
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	aa 1f       	adc	r26, r26
    26a8:	a4 17       	cp	r26, r20
    26aa:	10 f0       	brcs	.+4      	; 0x26b0 <__utoa_common+0x14>
    26ac:	a4 1b       	sub	r26, r20
    26ae:	83 95       	inc	r24
    26b0:	50 51       	subi	r21, 0x10	; 16
    26b2:	b9 f7       	brne	.-18     	; 0x26a2 <__utoa_common+0x6>
    26b4:	a0 5d       	subi	r26, 0xD0	; 208
    26b6:	aa 33       	cpi	r26, 0x3A	; 58
    26b8:	08 f0       	brcs	.+2      	; 0x26bc <__utoa_common+0x20>
    26ba:	a9 5d       	subi	r26, 0xD9	; 217
    26bc:	a1 93       	st	Z+, r26
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	79 f7       	brne	.-34     	; 0x26a0 <__utoa_common+0x4>
    26c2:	b1 11       	cpse	r27, r1
    26c4:	b1 93       	st	Z+, r27
    26c6:	11 92       	st	Z+, r1
    26c8:	cb 01       	movw	r24, r22
    26ca:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <strrev>

000026ce <strrev>:
    26ce:	dc 01       	movw	r26, r24
    26d0:	fc 01       	movw	r30, r24
    26d2:	67 2f       	mov	r22, r23
    26d4:	71 91       	ld	r23, Z+
    26d6:	77 23       	and	r23, r23
    26d8:	e1 f7       	brne	.-8      	; 0x26d2 <strrev+0x4>
    26da:	32 97       	sbiw	r30, 0x02	; 2
    26dc:	04 c0       	rjmp	.+8      	; 0x26e6 <strrev+0x18>
    26de:	7c 91       	ld	r23, X
    26e0:	6d 93       	st	X+, r22
    26e2:	70 83       	st	Z, r23
    26e4:	62 91       	ld	r22, -Z
    26e6:	ae 17       	cp	r26, r30
    26e8:	bf 07       	cpc	r27, r31
    26ea:	c8 f3       	brcs	.-14     	; 0x26de <strrev+0x10>
    26ec:	08 95       	ret

000026ee <_exit>:
    26ee:	f8 94       	cli

000026f0 <__stop_program>:
    26f0:	ff cf       	rjmp	.-2      	; 0x26f0 <__stop_program>
