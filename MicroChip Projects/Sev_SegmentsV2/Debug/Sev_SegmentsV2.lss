
Sev_SegmentsV2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007fc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000082c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000868  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000109c  00000000  00000000  000008f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000076f  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005bf  00000000  00000000  00002103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000026c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000447  00000000  00000000  000027b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000616  00000000  00000000  00002bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003215  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	7f 01       	movw	r14, r30
  56:	94 01       	movw	r18, r8
  58:	a9 01       	movw	r20, r18
  5a:	be 01       	movw	r22, r28
  5c:	d3 01       	movw	r26, r6
  5e:	e8 01       	movw	r28, r16
  60:	fd 01       	movw	r30, r26
  62:	12 02       	muls	r17, r18
  64:	27 02       	muls	r18, r23
  66:	3c 02       	muls	r19, r28

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 d2 03 	jmp	0x7a4	; 0x7a4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
    /* Replace with your application code */
	Seg_Init(1);
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	0e 94 2d 01 	call	0x25a	; 0x25a <Seg_Init>
	Seg_Init(2);
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	0e 94 2d 01 	call	0x25a	; 0x25a <Seg_Init>
    while (1)
	{
		for (uint8 i = 0; i < 100; i++)
  8c:	c0 e0       	ldi	r28, 0x00	; 0
  8e:	08 c0       	rjmp	.+16     	; 0xa0 <main+0x20>
		{
			Seg_Counter(i, 5);
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	50 e0       	ldi	r21, 0x00	; 0
  94:	60 ea       	ldi	r22, 0xA0	; 160
  96:	70 e4       	ldi	r23, 0x40	; 64
  98:	8c 2f       	mov	r24, r28
  9a:	0e 94 6f 02 	call	0x4de	; 0x4de <Seg_Counter>
    /* Replace with your application code */
	Seg_Init(1);
	Seg_Init(2);
    while (1)
	{
		for (uint8 i = 0; i < 100; i++)
  9e:	cf 5f       	subi	r28, 0xFF	; 255
  a0:	c4 36       	cpi	r28, 0x64	; 100
  a2:	b0 f3       	brcs	.-20     	; 0x90 <main+0x10>
  a4:	f3 cf       	rjmp	.-26     	; 0x8c <main+0xc>

000000a6 <DIO_voidSetPinDirection>:
    case PortB: Loc_uint8Result = Get( PinB_Reg,  Pin); break;
    case PortC: Loc_uint8Result = Get( PinC_Reg,  Pin); break;
    case PortD: Loc_uint8Result = Get( PinD_Reg,  Pin); break;
    }
    return Loc_uint8Result;
}
  a6:	81 30       	cpi	r24, 0x01	; 1
  a8:	01 f1       	breq	.+64     	; 0xea <DIO_voidSetPinDirection+0x44>
  aa:	30 f0       	brcs	.+12     	; 0xb8 <DIO_voidSetPinDirection+0x12>
  ac:	82 30       	cpi	r24, 0x02	; 2
  ae:	b1 f1       	breq	.+108    	; 0x11c <DIO_voidSetPinDirection+0x76>
  b0:	83 30       	cpi	r24, 0x03	; 3
  b2:	09 f4       	brne	.+2      	; 0xb6 <DIO_voidSetPinDirection+0x10>
  b4:	4c c0       	rjmp	.+152    	; 0x14e <DIO_voidSetPinDirection+0xa8>
  b6:	08 95       	ret
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	59 f4       	brne	.+22     	; 0xd2 <DIO_voidSetPinDirection+0x2c>
  bc:	2a b3       	in	r18, 0x1a	; 26
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <DIO_voidSetPinDirection+0x22>
  c4:	88 0f       	add	r24, r24
  c6:	99 1f       	adc	r25, r25
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <DIO_voidSetPinDirection+0x1e>
  cc:	82 2b       	or	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
  d2:	2a b3       	in	r18, 0x1a	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	02 c0       	rjmp	.+4      	; 0xde <DIO_voidSetPinDirection+0x38>
  da:	88 0f       	add	r24, r24
  dc:	99 1f       	adc	r25, r25
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <DIO_voidSetPinDirection+0x34>
  e2:	80 95       	com	r24
  e4:	82 23       	and	r24, r18
  e6:	8a bb       	out	0x1a, r24	; 26
  e8:	08 95       	ret
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	59 f4       	brne	.+22     	; 0x104 <DIO_voidSetPinDirection+0x5e>
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinDirection+0x54>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinDirection+0x50>
  fe:	82 2b       	or	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
 104:	27 b3       	in	r18, 0x17	; 23
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_voidSetPinDirection+0x6a>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_voidSetPinDirection+0x66>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	87 bb       	out	0x17, r24	; 23
 11a:	08 95       	ret
 11c:	41 30       	cpi	r20, 0x01	; 1
 11e:	59 f4       	brne	.+22     	; 0x136 <DIO_voidSetPinDirection+0x90>
 120:	24 b3       	in	r18, 0x14	; 20
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0x86>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0x82>
 130:	82 2b       	or	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
 136:	24 b3       	in	r18, 0x14	; 20
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 c0       	rjmp	.+4      	; 0x142 <DIO_voidSetPinDirection+0x9c>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	e2 f7       	brpl	.-8      	; 0x13e <DIO_voidSetPinDirection+0x98>
 146:	80 95       	com	r24
 148:	82 23       	and	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
 14c:	08 95       	ret
 14e:	41 30       	cpi	r20, 0x01	; 1
 150:	59 f4       	brne	.+22     	; 0x168 <DIO_voidSetPinDirection+0xc2>
 152:	21 b3       	in	r18, 0x11	; 17
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinDirection+0xb8>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinDirection+0xb4>
 162:	82 2b       	or	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret
 168:	21 b3       	in	r18, 0x11	; 17
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	02 c0       	rjmp	.+4      	; 0x174 <DIO_voidSetPinDirection+0xce>
 170:	88 0f       	add	r24, r24
 172:	99 1f       	adc	r25, r25
 174:	6a 95       	dec	r22
 176:	e2 f7       	brpl	.-8      	; 0x170 <DIO_voidSetPinDirection+0xca>
 178:	80 95       	com	r24
 17a:	82 23       	and	r24, r18
 17c:	81 bb       	out	0x11, r24	; 17
 17e:	08 95       	ret

00000180 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(uint8 Port, uint8 Pin, uint8 Value)
{
    switch (Port)
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	01 f1       	breq	.+64     	; 0x1c4 <DIO_voidSetPinValue+0x44>
 184:	30 f0       	brcs	.+12     	; 0x192 <DIO_voidSetPinValue+0x12>
 186:	82 30       	cpi	r24, 0x02	; 2
 188:	b1 f1       	breq	.+108    	; 0x1f6 <DIO_voidSetPinValue+0x76>
 18a:	83 30       	cpi	r24, 0x03	; 3
 18c:	09 f4       	brne	.+2      	; 0x190 <DIO_voidSetPinValue+0x10>
 18e:	4c c0       	rjmp	.+152    	; 0x228 <DIO_voidSetPinValue+0xa8>
 190:	08 95       	ret
    {
    case PortA: if(Value == High) Set( PortA_Reg,  Pin); else Clr( PortA_Reg, Pin); break;
 192:	41 30       	cpi	r20, 0x01	; 1
 194:	59 f4       	brne	.+22     	; 0x1ac <DIO_voidSetPinValue+0x2c>
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_voidSetPinValue+0x22>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_voidSetPinValue+0x1e>
 1a6:	82 2b       	or	r24, r18
 1a8:	8b bb       	out	0x1b, r24	; 27
 1aa:	08 95       	ret
 1ac:	2b b3       	in	r18, 0x1b	; 27
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_voidSetPinValue+0x38>
 1b4:	88 0f       	add	r24, r24
 1b6:	99 1f       	adc	r25, r25
 1b8:	6a 95       	dec	r22
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_voidSetPinValue+0x34>
 1bc:	80 95       	com	r24
 1be:	82 23       	and	r24, r18
 1c0:	8b bb       	out	0x1b, r24	; 27
 1c2:	08 95       	ret
    case PortB: if(Value == High) Set( PortB_Reg,  Pin); else Clr( PortB_Reg, Pin); break;
 1c4:	41 30       	cpi	r20, 0x01	; 1
 1c6:	59 f4       	brne	.+22     	; 0x1de <DIO_voidSetPinValue+0x5e>
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinValue+0x54>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinValue+0x50>
 1d8:	82 2b       	or	r24, r18
 1da:	88 bb       	out	0x18, r24	; 24
 1dc:	08 95       	ret
 1de:	28 b3       	in	r18, 0x18	; 24
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_voidSetPinValue+0x6a>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_voidSetPinValue+0x66>
 1ee:	80 95       	com	r24
 1f0:	82 23       	and	r24, r18
 1f2:	88 bb       	out	0x18, r24	; 24
 1f4:	08 95       	ret
    case PortC: if(Value == High) Set( PortC_Reg,  Pin); else Clr( PortC_Reg, Pin); break;
 1f6:	41 30       	cpi	r20, 0x01	; 1
 1f8:	59 f4       	brne	.+22     	; 0x210 <DIO_voidSetPinValue+0x90>
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinValue+0x86>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinValue+0x82>
 20a:	82 2b       	or	r24, r18
 20c:	85 bb       	out	0x15, r24	; 21
 20e:	08 95       	ret
 210:	25 b3       	in	r18, 0x15	; 21
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_voidSetPinValue+0x9c>
 218:	88 0f       	add	r24, r24
 21a:	99 1f       	adc	r25, r25
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_voidSetPinValue+0x98>
 220:	80 95       	com	r24
 222:	82 23       	and	r24, r18
 224:	85 bb       	out	0x15, r24	; 21
 226:	08 95       	ret
    case PortD: if(Value == High) Set( PortD_Reg,  Pin); else Clr( PortD_Reg, Pin); break;
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	59 f4       	brne	.+22     	; 0x242 <DIO_voidSetPinValue+0xc2>
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0xb8>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0xb4>
 23c:	82 2b       	or	r24, r18
 23e:	82 bb       	out	0x12, r24	; 18
 240:	08 95       	ret
 242:	22 b3       	in	r18, 0x12	; 18
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_voidSetPinValue+0xce>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_voidSetPinValue+0xca>
 252:	80 95       	com	r24
 254:	82 23       	and	r24, r18
 256:	82 bb       	out	0x12, r24	; 18
 258:	08 95       	ret

0000025a <Seg_Init>:
#include "../Include/Segments.h"


void Seg_Init(uint8 segment_ID)
{
 25a:	cf 93       	push	r28
 25c:	c8 2f       	mov	r28, r24
    DIO_voidSetPinDirection(Seg_PortA, Seg_Pin4, Output);//A
 25e:	41 e0       	ldi	r20, 0x01	; 1
 260:	64 e0       	ldi	r22, 0x04	; 4
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(Seg_PortA, Seg_Pin5, Output);//B
 268:	41 e0       	ldi	r20, 0x01	; 1
 26a:	65 e0       	ldi	r22, 0x05	; 5
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(Seg_PortA, Seg_Pin6, Output);//C
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	66 e0       	ldi	r22, 0x06	; 6
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
    DIO_voidSetPinDirection(Seg_PortA, Seg_Pin7, Output);//D
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	67 e0       	ldi	r22, 0x07	; 7
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
	if (segment_ID == 1)//EN1
 286:	c1 30       	cpi	r28, 0x01	; 1
 288:	59 f4       	brne	.+22     	; 0x2a0 <Seg_Init+0x46>
	{
		DIO_voidSetPinDirection(PortB, Pin2, Output);
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	62 e0       	ldi	r22, 0x02	; 2
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PortB, Pin2, High);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 29e:	23 c0       	rjmp	.+70     	; 0x2e6 <Seg_Init+0x8c>
	}
	else if (segment_ID == 2)//EN2
 2a0:	c2 30       	cpi	r28, 0x02	; 2
 2a2:	59 f4       	brne	.+22     	; 0x2ba <Seg_Init+0x60>
	{
		DIO_voidSetPinDirection(PortB, Pin1, Output);
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	61 e0       	ldi	r22, 0x01	; 1
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PortB, Pin1, High);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	61 e0       	ldi	r22, 0x01	; 1
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 2b8:	16 c0       	rjmp	.+44     	; 0x2e6 <Seg_Init+0x8c>
	}
	else if (segment_ID == 3)//BOTH
 2ba:	c3 30       	cpi	r28, 0x03	; 3
 2bc:	a1 f4       	brne	.+40     	; 0x2e6 <Seg_Init+0x8c>
	{
		DIO_voidSetPinDirection(PortB, Pin2, Output);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	62 e0       	ldi	r22, 0x02	; 2
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PortB, Pin2, High);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	62 e0       	ldi	r22, 0x02	; 2
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
		DIO_voidSetPinDirection(PortB, Pin1, Output);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	61 e0       	ldi	r22, 0x01	; 1
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 53 00 	call	0xa6	; 0xa6 <DIO_voidSetPinDirection>
		DIO_voidSetPinValue(PortB, Pin1, High);
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	61 e0       	ldi	r22, 0x01	; 1
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
	}
}
 2e6:	cf 91       	pop	r28
 2e8:	08 95       	ret

000002ea <Seg_Display>:

void Seg_Display(uint8 number)//, uint8 Seg_Number)
{
	switch (number)
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	8a 30       	cpi	r24, 0x0A	; 10
 2ee:	91 05       	cpc	r25, r1
 2f0:	08 f0       	brcs	.+2      	; 0x2f4 <Seg_Display+0xa>
 2f2:	d6 c0       	rjmp	.+428    	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 2f4:	fc 01       	movw	r30, r24
 2f6:	e6 5d       	subi	r30, 0xD6	; 214
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
 2fa:	0c 94 bd 03 	jmp	0x77a	; 0x77a <__tablejump2__>
    {

//													1											2												4												8
		case 0: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	64 e0       	ldi	r22, 0x04	; 4
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 308:	40 e0       	ldi	r20, 0x00	; 0
 30a:	65 e0       	ldi	r22, 0x05	; 5
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	66 e0       	ldi	r22, 0x06	; 6
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	67 e0       	ldi	r22, 0x07	; 7
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 326:	08 95       	ret
        case 1: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	64 e0       	ldi	r22, 0x04	; 4
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	65 e0       	ldi	r22, 0x05	; 5
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	66 e0       	ldi	r22, 0x06	; 6
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 346:	40 e0       	ldi	r20, 0x00	; 0
 348:	67 e0       	ldi	r22, 0x07	; 7
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 350:	08 95       	ret
        case 2: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	64 e0       	ldi	r22, 0x04	; 4
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	65 e0       	ldi	r22, 0x05	; 5
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	66 e0       	ldi	r22, 0x06	; 6
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	67 e0       	ldi	r22, 0x07	; 7
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 37a:	08 95       	ret
        case 3: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	64 e0       	ldi	r22, 0x04	; 4
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	65 e0       	ldi	r22, 0x05	; 5
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 390:	40 e0       	ldi	r20, 0x00	; 0
 392:	66 e0       	ldi	r22, 0x06	; 6
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 39a:	40 e0       	ldi	r20, 0x00	; 0
 39c:	67 e0       	ldi	r22, 0x07	; 7
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3a4:	08 95       	ret
        case 4: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 3a6:	40 e0       	ldi	r20, 0x00	; 0
 3a8:	64 e0       	ldi	r22, 0x04	; 4
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	65 e0       	ldi	r22, 0x05	; 5
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3ba:	41 e0       	ldi	r20, 0x01	; 1
 3bc:	66 e0       	ldi	r22, 0x06	; 6
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3c4:	40 e0       	ldi	r20, 0x00	; 0
 3c6:	67 e0       	ldi	r22, 0x07	; 7
 3c8:	80 e0       	ldi	r24, 0x00	; 0
 3ca:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3ce:	08 95       	ret
        case 5: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	64 e0       	ldi	r22, 0x04	; 4
 3d4:	80 e0       	ldi	r24, 0x00	; 0
 3d6:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	65 e0       	ldi	r22, 0x05	; 5
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3e4:	41 e0       	ldi	r20, 0x01	; 1
 3e6:	66 e0       	ldi	r22, 0x06	; 6
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3ee:	40 e0       	ldi	r20, 0x00	; 0
 3f0:	67 e0       	ldi	r22, 0x07	; 7
 3f2:	80 e0       	ldi	r24, 0x00	; 0
 3f4:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 3f8:	08 95       	ret
        case 6: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 3fa:	40 e0       	ldi	r20, 0x00	; 0
 3fc:	64 e0       	ldi	r22, 0x04	; 4
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	65 e0       	ldi	r22, 0x05	; 5
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	66 e0       	ldi	r22, 0x06	; 6
 412:	80 e0       	ldi	r24, 0x00	; 0
 414:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	67 e0       	ldi	r22, 0x07	; 7
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 422:	08 95       	ret
        case 7: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, Low); break;
 424:	41 e0       	ldi	r20, 0x01	; 1
 426:	64 e0       	ldi	r22, 0x04	; 4
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 42e:	41 e0       	ldi	r20, 0x01	; 1
 430:	65 e0       	ldi	r22, 0x05	; 5
 432:	80 e0       	ldi	r24, 0x00	; 0
 434:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	66 e0       	ldi	r22, 0x06	; 6
 43c:	80 e0       	ldi	r24, 0x00	; 0
 43e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	67 e0       	ldi	r22, 0x07	; 7
 446:	80 e0       	ldi	r24, 0x00	; 0
 448:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 44c:	08 95       	ret
        case 8: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, High); break;
 44e:	40 e0       	ldi	r20, 0x00	; 0
 450:	64 e0       	ldi	r22, 0x04	; 4
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 458:	40 e0       	ldi	r20, 0x00	; 0
 45a:	65 e0       	ldi	r22, 0x05	; 5
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 462:	40 e0       	ldi	r20, 0x00	; 0
 464:	66 e0       	ldi	r22, 0x06	; 6
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	67 e0       	ldi	r22, 0x07	; 7
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 476:	08 95       	ret
        case 9: DIO_voidSetPinValue(Seg_PortA, Seg_Pin4, High); DIO_voidSetPinValue(Seg_PortA, Seg_Pin5, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin6, Low); DIO_voidSetPinValue(Seg_PortA, Seg_Pin7, High); break;
 478:	41 e0       	ldi	r20, 0x01	; 1
 47a:	64 e0       	ldi	r22, 0x04	; 4
 47c:	80 e0       	ldi	r24, 0x00	; 0
 47e:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	65 e0       	ldi	r22, 0x05	; 5
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 48c:	40 e0       	ldi	r20, 0x00	; 0
 48e:	66 e0       	ldi	r22, 0x06	; 6
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 496:	41 e0       	ldi	r20, 0x01	; 1
 498:	67 e0       	ldi	r22, 0x07	; 7
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 4a0:	08 95       	ret

000004a2 <Seg_Off>:
*/
}

void Seg_Off(uint8 EN)
{
	if (EN == 1)
 4a2:	81 30       	cpi	r24, 0x01	; 1
 4a4:	29 f4       	brne	.+10     	; 0x4b0 <Seg_Off+0xe>
	{
		DIO_voidSetPinValue(PortB, Pin2, Low);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	62 e0       	ldi	r22, 0x02	; 2
 4aa:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 4ae:	08 95       	ret
	}
	else if (EN == 2)
 4b0:	82 30       	cpi	r24, 0x02	; 2
 4b2:	29 f4       	brne	.+10     	; 0x4be <Seg_Off+0x1c>
	{
		DIO_voidSetPinValue(PortB, Pin1, Low);
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 4be:	08 95       	ret

000004c0 <Seg_On>:
	
}

void Seg_On(uint8 EN)
{
	if (EN == 1)
 4c0:	81 30       	cpi	r24, 0x01	; 1
 4c2:	29 f4       	brne	.+10     	; 0x4ce <Seg_On+0xe>
	{
		DIO_voidSetPinValue(PortB, Pin2, High);
 4c4:	41 e0       	ldi	r20, 0x01	; 1
 4c6:	62 e0       	ldi	r22, 0x02	; 2
 4c8:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 4cc:	08 95       	ret
	}
	else if (EN == 2)
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	29 f4       	brne	.+10     	; 0x4dc <Seg_On+0x1c>
	{
		DIO_voidSetPinValue(PortB, Pin1, High);
 4d2:	41 e0       	ldi	r20, 0x01	; 1
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	0e 94 c0 00 	call	0x180	; 0x180 <DIO_voidSetPinValue>
 4dc:	08 95       	ret

000004de <Seg_Counter>:
	}
	
}

void Seg_Counter(uint8 Number, float Timer)
{
 4de:	ef 92       	push	r14
 4e0:	ff 92       	push	r15
 4e2:	0f 93       	push	r16
 4e4:	1f 93       	push	r17
 4e6:	cf 93       	push	r28
 4e8:	df 93       	push	r29
 4ea:	c8 2f       	mov	r28, r24
 4ec:	cb 01       	movw	r24, r22
 4ee:	ba 01       	movw	r22, r20
	uint16 Time_ms = Timer * 1000;
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	4a e7       	ldi	r20, 0x7A	; 122
 4f6:	54 e4       	ldi	r21, 0x44	; 68
 4f8:	0e 94 28 03 	call	0x650	; 0x650 <__mulsf3>
 4fc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fixunssfsi>
 500:	7b 01       	movw	r14, r22
	if(Number < 100)
 502:	c4 36       	cpi	r28, 0x64	; 100
 504:	08 f0       	brcs	.+2      	; 0x508 <Seg_Counter+0x2a>
 506:	45 c0       	rjmp	.+138    	; 0x592 <Seg_Counter+0xb4>
	{
		uint8 Ones = Number % 10;
 508:	1d ec       	ldi	r17, 0xCD	; 205
 50a:	c1 9f       	mul	r28, r17
 50c:	11 2d       	mov	r17, r1
 50e:	11 24       	eor	r1, r1
 510:	01 2f       	mov	r16, r17
 512:	06 95       	lsr	r16
 514:	06 95       	lsr	r16
 516:	06 95       	lsr	r16
 518:	00 0f       	add	r16, r16
 51a:	80 2f       	mov	r24, r16
 51c:	88 0f       	add	r24, r24
 51e:	88 0f       	add	r24, r24
 520:	08 0f       	add	r16, r24
 522:	c0 1b       	sub	r28, r16
 524:	0c 2f       	mov	r16, r28
		uint8 Tens = Number / 10;
 526:	16 95       	lsr	r17
 528:	16 95       	lsr	r17
 52a:	16 95       	lsr	r17
		for (uint16 i = 0; i < Time_ms / 20; i++)
 52c:	c0 e0       	ldi	r28, 0x00	; 0
 52e:	d0 e0       	ldi	r29, 0x00	; 0
 530:	22 c0       	rjmp	.+68     	; 0x576 <Seg_Counter+0x98>
		{
			Seg_Off(1);
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Seg_Off>
			Seg_Off(2);
 538:	82 e0       	ldi	r24, 0x02	; 2
 53a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Seg_Off>
			Seg_Display(Tens);
 53e:	81 2f       	mov	r24, r17
 540:	0e 94 75 01 	call	0x2ea	; 0x2ea <Seg_Display>
			Seg_On(1);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Seg_On>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	83 ec       	ldi	r24, 0xC3	; 195
 54c:	99 e0       	ldi	r25, 0x09	; 9
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <Seg_Counter+0x70>
 552:	00 c0       	rjmp	.+0      	; 0x554 <Seg_Counter+0x76>
 554:	00 00       	nop
			_delay_ms(10);
			Seg_Off(1);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	0e 94 51 02 	call	0x4a2	; 0x4a2 <Seg_Off>
			Seg_Display(Ones);
 55c:	80 2f       	mov	r24, r16
 55e:	0e 94 75 01 	call	0x2ea	; 0x2ea <Seg_Display>
			Seg_On(2);
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	0e 94 60 02 	call	0x4c0	; 0x4c0 <Seg_On>
 568:	83 ec       	ldi	r24, 0xC3	; 195
 56a:	99 e0       	ldi	r25, 0x09	; 9
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <Seg_Counter+0x8e>
 570:	00 c0       	rjmp	.+0      	; 0x572 <Seg_Counter+0x94>
 572:	00 00       	nop
	uint16 Time_ms = Timer * 1000;
	if(Number < 100)
	{
		uint8 Ones = Number % 10;
		uint8 Tens = Number / 10;
		for (uint16 i = 0; i < Time_ms / 20; i++)
 574:	21 96       	adiw	r28, 0x01	; 1
 576:	97 01       	movw	r18, r14
 578:	ad ec       	ldi	r26, 0xCD	; 205
 57a:	bc ec       	ldi	r27, 0xCC	; 204
 57c:	0e 94 c3 03 	call	0x786	; 0x786 <__umulhisi3>
 580:	92 95       	swap	r25
 582:	82 95       	swap	r24
 584:	8f 70       	andi	r24, 0x0F	; 15
 586:	89 27       	eor	r24, r25
 588:	9f 70       	andi	r25, 0x0F	; 15
 58a:	89 27       	eor	r24, r25
 58c:	c8 17       	cp	r28, r24
 58e:	d9 07       	cpc	r29, r25
 590:	80 f2       	brcs	.-96     	; 0x532 <Seg_Counter+0x54>
			Seg_Display(Ones);
			Seg_On(2);
			_delay_ms(10);
		}
	}
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	1f 91       	pop	r17
 598:	0f 91       	pop	r16
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	08 95       	ret

000005a0 <__fixunssfsi>:
 5a0:	0e 94 07 03 	call	0x60e	; 0x60e <__fp_splitA>
 5a4:	88 f0       	brcs	.+34     	; 0x5c8 <__fixunssfsi+0x28>
 5a6:	9f 57       	subi	r25, 0x7F	; 127
 5a8:	98 f0       	brcs	.+38     	; 0x5d0 <__fixunssfsi+0x30>
 5aa:	b9 2f       	mov	r27, r25
 5ac:	99 27       	eor	r25, r25
 5ae:	b7 51       	subi	r27, 0x17	; 23
 5b0:	b0 f0       	brcs	.+44     	; 0x5de <__fixunssfsi+0x3e>
 5b2:	e1 f0       	breq	.+56     	; 0x5ec <__fixunssfsi+0x4c>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	88 1f       	adc	r24, r24
 5ba:	99 1f       	adc	r25, r25
 5bc:	1a f0       	brmi	.+6      	; 0x5c4 <__fixunssfsi+0x24>
 5be:	ba 95       	dec	r27
 5c0:	c9 f7       	brne	.-14     	; 0x5b4 <__fixunssfsi+0x14>
 5c2:	14 c0       	rjmp	.+40     	; 0x5ec <__fixunssfsi+0x4c>
 5c4:	b1 30       	cpi	r27, 0x01	; 1
 5c6:	91 f0       	breq	.+36     	; 0x5ec <__fixunssfsi+0x4c>
 5c8:	0e 94 21 03 	call	0x642	; 0x642 <__fp_zero>
 5cc:	b1 e0       	ldi	r27, 0x01	; 1
 5ce:	08 95       	ret
 5d0:	0c 94 21 03 	jmp	0x642	; 0x642 <__fp_zero>
 5d4:	67 2f       	mov	r22, r23
 5d6:	78 2f       	mov	r23, r24
 5d8:	88 27       	eor	r24, r24
 5da:	b8 5f       	subi	r27, 0xF8	; 248
 5dc:	39 f0       	breq	.+14     	; 0x5ec <__fixunssfsi+0x4c>
 5de:	b9 3f       	cpi	r27, 0xF9	; 249
 5e0:	cc f3       	brlt	.-14     	; 0x5d4 <__fixunssfsi+0x34>
 5e2:	86 95       	lsr	r24
 5e4:	77 95       	ror	r23
 5e6:	67 95       	ror	r22
 5e8:	b3 95       	inc	r27
 5ea:	d9 f7       	brne	.-10     	; 0x5e2 <__fixunssfsi+0x42>
 5ec:	3e f4       	brtc	.+14     	; 0x5fc <__fixunssfsi+0x5c>
 5ee:	90 95       	com	r25
 5f0:	80 95       	com	r24
 5f2:	70 95       	com	r23
 5f4:	61 95       	neg	r22
 5f6:	7f 4f       	sbci	r23, 0xFF	; 255
 5f8:	8f 4f       	sbci	r24, 0xFF	; 255
 5fa:	9f 4f       	sbci	r25, 0xFF	; 255
 5fc:	08 95       	ret

000005fe <__fp_split3>:
 5fe:	57 fd       	sbrc	r21, 7
 600:	90 58       	subi	r25, 0x80	; 128
 602:	44 0f       	add	r20, r20
 604:	55 1f       	adc	r21, r21
 606:	59 f0       	breq	.+22     	; 0x61e <__fp_splitA+0x10>
 608:	5f 3f       	cpi	r21, 0xFF	; 255
 60a:	71 f0       	breq	.+28     	; 0x628 <__fp_splitA+0x1a>
 60c:	47 95       	ror	r20

0000060e <__fp_splitA>:
 60e:	88 0f       	add	r24, r24
 610:	97 fb       	bst	r25, 7
 612:	99 1f       	adc	r25, r25
 614:	61 f0       	breq	.+24     	; 0x62e <__fp_splitA+0x20>
 616:	9f 3f       	cpi	r25, 0xFF	; 255
 618:	79 f0       	breq	.+30     	; 0x638 <__fp_splitA+0x2a>
 61a:	87 95       	ror	r24
 61c:	08 95       	ret
 61e:	12 16       	cp	r1, r18
 620:	13 06       	cpc	r1, r19
 622:	14 06       	cpc	r1, r20
 624:	55 1f       	adc	r21, r21
 626:	f2 cf       	rjmp	.-28     	; 0x60c <__fp_split3+0xe>
 628:	46 95       	lsr	r20
 62a:	f1 df       	rcall	.-30     	; 0x60e <__fp_splitA>
 62c:	08 c0       	rjmp	.+16     	; 0x63e <__fp_splitA+0x30>
 62e:	16 16       	cp	r1, r22
 630:	17 06       	cpc	r1, r23
 632:	18 06       	cpc	r1, r24
 634:	99 1f       	adc	r25, r25
 636:	f1 cf       	rjmp	.-30     	; 0x61a <__fp_splitA+0xc>
 638:	86 95       	lsr	r24
 63a:	71 05       	cpc	r23, r1
 63c:	61 05       	cpc	r22, r1
 63e:	08 94       	sec
 640:	08 95       	ret

00000642 <__fp_zero>:
 642:	e8 94       	clt

00000644 <__fp_szero>:
 644:	bb 27       	eor	r27, r27
 646:	66 27       	eor	r22, r22
 648:	77 27       	eor	r23, r23
 64a:	cb 01       	movw	r24, r22
 64c:	97 f9       	bld	r25, 7
 64e:	08 95       	ret

00000650 <__mulsf3>:
 650:	0e 94 3b 03 	call	0x676	; 0x676 <__mulsf3x>
 654:	0c 94 ac 03 	jmp	0x758	; 0x758 <__fp_round>
 658:	0e 94 9e 03 	call	0x73c	; 0x73c <__fp_pscA>
 65c:	38 f0       	brcs	.+14     	; 0x66c <__mulsf3+0x1c>
 65e:	0e 94 a5 03 	call	0x74a	; 0x74a <__fp_pscB>
 662:	20 f0       	brcs	.+8      	; 0x66c <__mulsf3+0x1c>
 664:	95 23       	and	r25, r21
 666:	11 f0       	breq	.+4      	; 0x66c <__mulsf3+0x1c>
 668:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_inf>
 66c:	0c 94 9b 03 	jmp	0x736	; 0x736 <__fp_nan>
 670:	11 24       	eor	r1, r1
 672:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>

00000676 <__mulsf3x>:
 676:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_split3>
 67a:	70 f3       	brcs	.-36     	; 0x658 <__mulsf3+0x8>

0000067c <__mulsf3_pse>:
 67c:	95 9f       	mul	r25, r21
 67e:	c1 f3       	breq	.-16     	; 0x670 <__mulsf3+0x20>
 680:	95 0f       	add	r25, r21
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	55 1f       	adc	r21, r21
 686:	62 9f       	mul	r22, r18
 688:	f0 01       	movw	r30, r0
 68a:	72 9f       	mul	r23, r18
 68c:	bb 27       	eor	r27, r27
 68e:	f0 0d       	add	r31, r0
 690:	b1 1d       	adc	r27, r1
 692:	63 9f       	mul	r22, r19
 694:	aa 27       	eor	r26, r26
 696:	f0 0d       	add	r31, r0
 698:	b1 1d       	adc	r27, r1
 69a:	aa 1f       	adc	r26, r26
 69c:	64 9f       	mul	r22, r20
 69e:	66 27       	eor	r22, r22
 6a0:	b0 0d       	add	r27, r0
 6a2:	a1 1d       	adc	r26, r1
 6a4:	66 1f       	adc	r22, r22
 6a6:	82 9f       	mul	r24, r18
 6a8:	22 27       	eor	r18, r18
 6aa:	b0 0d       	add	r27, r0
 6ac:	a1 1d       	adc	r26, r1
 6ae:	62 1f       	adc	r22, r18
 6b0:	73 9f       	mul	r23, r19
 6b2:	b0 0d       	add	r27, r0
 6b4:	a1 1d       	adc	r26, r1
 6b6:	62 1f       	adc	r22, r18
 6b8:	83 9f       	mul	r24, r19
 6ba:	a0 0d       	add	r26, r0
 6bc:	61 1d       	adc	r22, r1
 6be:	22 1f       	adc	r18, r18
 6c0:	74 9f       	mul	r23, r20
 6c2:	33 27       	eor	r19, r19
 6c4:	a0 0d       	add	r26, r0
 6c6:	61 1d       	adc	r22, r1
 6c8:	23 1f       	adc	r18, r19
 6ca:	84 9f       	mul	r24, r20
 6cc:	60 0d       	add	r22, r0
 6ce:	21 1d       	adc	r18, r1
 6d0:	82 2f       	mov	r24, r18
 6d2:	76 2f       	mov	r23, r22
 6d4:	6a 2f       	mov	r22, r26
 6d6:	11 24       	eor	r1, r1
 6d8:	9f 57       	subi	r25, 0x7F	; 127
 6da:	50 40       	sbci	r21, 0x00	; 0
 6dc:	9a f0       	brmi	.+38     	; 0x704 <__mulsf3_pse+0x88>
 6de:	f1 f0       	breq	.+60     	; 0x71c <__mulsf3_pse+0xa0>
 6e0:	88 23       	and	r24, r24
 6e2:	4a f0       	brmi	.+18     	; 0x6f6 <__mulsf3_pse+0x7a>
 6e4:	ee 0f       	add	r30, r30
 6e6:	ff 1f       	adc	r31, r31
 6e8:	bb 1f       	adc	r27, r27
 6ea:	66 1f       	adc	r22, r22
 6ec:	77 1f       	adc	r23, r23
 6ee:	88 1f       	adc	r24, r24
 6f0:	91 50       	subi	r25, 0x01	; 1
 6f2:	50 40       	sbci	r21, 0x00	; 0
 6f4:	a9 f7       	brne	.-22     	; 0x6e0 <__mulsf3_pse+0x64>
 6f6:	9e 3f       	cpi	r25, 0xFE	; 254
 6f8:	51 05       	cpc	r21, r1
 6fa:	80 f0       	brcs	.+32     	; 0x71c <__mulsf3_pse+0xa0>
 6fc:	0c 94 95 03 	jmp	0x72a	; 0x72a <__fp_inf>
 700:	0c 94 22 03 	jmp	0x644	; 0x644 <__fp_szero>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	e4 f3       	brlt	.-8      	; 0x700 <__mulsf3_pse+0x84>
 708:	98 3e       	cpi	r25, 0xE8	; 232
 70a:	d4 f3       	brlt	.-12     	; 0x700 <__mulsf3_pse+0x84>
 70c:	86 95       	lsr	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b7 95       	ror	r27
 714:	f7 95       	ror	r31
 716:	e7 95       	ror	r30
 718:	9f 5f       	subi	r25, 0xFF	; 255
 71a:	c1 f7       	brne	.-16     	; 0x70c <__mulsf3_pse+0x90>
 71c:	fe 2b       	or	r31, r30
 71e:	88 0f       	add	r24, r24
 720:	91 1d       	adc	r25, r1
 722:	96 95       	lsr	r25
 724:	87 95       	ror	r24
 726:	97 f9       	bld	r25, 7
 728:	08 95       	ret

0000072a <__fp_inf>:
 72a:	97 f9       	bld	r25, 7
 72c:	9f 67       	ori	r25, 0x7F	; 127
 72e:	80 e8       	ldi	r24, 0x80	; 128
 730:	70 e0       	ldi	r23, 0x00	; 0
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	08 95       	ret

00000736 <__fp_nan>:
 736:	9f ef       	ldi	r25, 0xFF	; 255
 738:	80 ec       	ldi	r24, 0xC0	; 192
 73a:	08 95       	ret

0000073c <__fp_pscA>:
 73c:	00 24       	eor	r0, r0
 73e:	0a 94       	dec	r0
 740:	16 16       	cp	r1, r22
 742:	17 06       	cpc	r1, r23
 744:	18 06       	cpc	r1, r24
 746:	09 06       	cpc	r0, r25
 748:	08 95       	ret

0000074a <__fp_pscB>:
 74a:	00 24       	eor	r0, r0
 74c:	0a 94       	dec	r0
 74e:	12 16       	cp	r1, r18
 750:	13 06       	cpc	r1, r19
 752:	14 06       	cpc	r1, r20
 754:	05 06       	cpc	r0, r21
 756:	08 95       	ret

00000758 <__fp_round>:
 758:	09 2e       	mov	r0, r25
 75a:	03 94       	inc	r0
 75c:	00 0c       	add	r0, r0
 75e:	11 f4       	brne	.+4      	; 0x764 <__fp_round+0xc>
 760:	88 23       	and	r24, r24
 762:	52 f0       	brmi	.+20     	; 0x778 <__fp_round+0x20>
 764:	bb 0f       	add	r27, r27
 766:	40 f4       	brcc	.+16     	; 0x778 <__fp_round+0x20>
 768:	bf 2b       	or	r27, r31
 76a:	11 f4       	brne	.+4      	; 0x770 <__fp_round+0x18>
 76c:	60 ff       	sbrs	r22, 0
 76e:	04 c0       	rjmp	.+8      	; 0x778 <__fp_round+0x20>
 770:	6f 5f       	subi	r22, 0xFF	; 255
 772:	7f 4f       	sbci	r23, 0xFF	; 255
 774:	8f 4f       	sbci	r24, 0xFF	; 255
 776:	9f 4f       	sbci	r25, 0xFF	; 255
 778:	08 95       	ret

0000077a <__tablejump2__>:
 77a:	ee 0f       	add	r30, r30
 77c:	ff 1f       	adc	r31, r31
 77e:	05 90       	lpm	r0, Z+
 780:	f4 91       	lpm	r31, Z
 782:	e0 2d       	mov	r30, r0
 784:	09 94       	ijmp

00000786 <__umulhisi3>:
 786:	a2 9f       	mul	r26, r18
 788:	b0 01       	movw	r22, r0
 78a:	b3 9f       	mul	r27, r19
 78c:	c0 01       	movw	r24, r0
 78e:	a3 9f       	mul	r26, r19
 790:	70 0d       	add	r23, r0
 792:	81 1d       	adc	r24, r1
 794:	11 24       	eor	r1, r1
 796:	91 1d       	adc	r25, r1
 798:	b2 9f       	mul	r27, r18
 79a:	70 0d       	add	r23, r0
 79c:	81 1d       	adc	r24, r1
 79e:	11 24       	eor	r1, r1
 7a0:	91 1d       	adc	r25, r1
 7a2:	08 95       	ret

000007a4 <_exit>:
 7a4:	f8 94       	cli

000007a6 <__stop_program>:
 7a6:	ff cf       	rjmp	.-2      	; 0x7a6 <__stop_program>
