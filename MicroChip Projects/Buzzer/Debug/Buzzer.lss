
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000027a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b2  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006cb  00000000  00000000  00000c6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000480  00000000  00000000  00001339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  000017bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f2  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e8  00000000  00000000  00001c5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001f42  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 3b 01 	jmp	0x276	; 0x276 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
    /* Replace with your application code */
	Buzzer_Init();
  6c:	0e 94 4f 00 	call	0x9e	; 0x9e <Buzzer_Init>
    while (1) 
    {
		Buzzer_SetHigh();
  70:	0e 94 55 00 	call	0xaa	; 0xaa <Buzzer_SetHigh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f e7       	ldi	r18, 0x7F	; 127
  76:	84 e8       	ldi	r24, 0x84	; 132
  78:	9e e1       	ldi	r25, 0x1E	; 30
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	80 40       	sbci	r24, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
		_delay_ms(10000);
		Buzzer_SetLow();
  86:	0e 94 5b 00 	call	0xb6	; 0xb6 <Buzzer_SetLow>
  8a:	2f e7       	ldi	r18, 0x7F	; 127
  8c:	84 e8       	ldi	r24, 0x84	; 132
  8e:	9e e1       	ldi	r25, 0x1E	; 30
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
  9c:	e9 cf       	rjmp	.-46     	; 0x70 <main+0x4>

0000009e <Buzzer_Init>:
#include "../Include/Buzzer.h"

void Buzzer_Init()
{
    DIO_voidSetPinDirection(Buzzer_PortA, Buzzer_Pin3, Output);
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_voidSetPinDirection>
  a8:	08 95       	ret

000000aa <Buzzer_SetHigh>:
}

void Buzzer_SetHigh()
{
    DIO_voidSetPinValue(Buzzer_PortA, Buzzer_Pin3, High);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_voidSetPinValue>
  b4:	08 95       	ret

000000b6 <Buzzer_SetLow>:
}

void Buzzer_SetLow()
{
    DIO_voidSetPinValue(Buzzer_PortA, Buzzer_Pin3, Low);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_voidSetPinValue>
  c0:	08 95       	ret

000000c2 <DIO_voidSetPinDirection>:
    case PortB: Loc_uint8Result = Get( PinB_Reg,  Pin); break;
    case PortC: Loc_uint8Result = Get( PinC_Reg,  Pin); break;
    case PortD: Loc_uint8Result = Get( PinD_Reg,  Pin); break;
    }
    return Loc_uint8Result;
}
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	01 f1       	breq	.+64     	; 0x106 <DIO_voidSetPinDirection+0x44>
  c6:	30 f0       	brcs	.+12     	; 0xd4 <DIO_voidSetPinDirection+0x12>
  c8:	82 30       	cpi	r24, 0x02	; 2
  ca:	b1 f1       	breq	.+108    	; 0x138 <DIO_voidSetPinDirection+0x76>
  cc:	83 30       	cpi	r24, 0x03	; 3
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_voidSetPinDirection+0x10>
  d0:	4c c0       	rjmp	.+152    	; 0x16a <DIO_voidSetPinDirection+0xa8>
  d2:	08 95       	ret
  d4:	41 30       	cpi	r20, 0x01	; 1
  d6:	59 f4       	brne	.+22     	; 0xee <DIO_voidSetPinDirection+0x2c>
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_voidSetPinDirection+0x22>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_voidSetPinDirection+0x1e>
  e8:	82 2b       	or	r24, r18
  ea:	8a bb       	out	0x1a, r24	; 26
  ec:	08 95       	ret
  ee:	2a b3       	in	r18, 0x1a	; 26
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_voidSetPinDirection+0x38>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_voidSetPinDirection+0x34>
  fe:	80 95       	com	r24
 100:	82 23       	and	r24, r18
 102:	8a bb       	out	0x1a, r24	; 26
 104:	08 95       	ret
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	59 f4       	brne	.+22     	; 0x120 <DIO_voidSetPinDirection+0x5e>
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_voidSetPinDirection+0x54>
 112:	88 0f       	add	r24, r24
 114:	99 1f       	adc	r25, r25
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_voidSetPinDirection+0x50>
 11a:	82 2b       	or	r24, r18
 11c:	87 bb       	out	0x17, r24	; 23
 11e:	08 95       	ret
 120:	27 b3       	in	r18, 0x17	; 23
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_voidSetPinDirection+0x6a>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_voidSetPinDirection+0x66>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
 136:	08 95       	ret
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	59 f4       	brne	.+22     	; 0x152 <DIO_voidSetPinDirection+0x90>
 13c:	24 b3       	in	r18, 0x14	; 20
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_voidSetPinDirection+0x86>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_voidSetPinDirection+0x82>
 14c:	82 2b       	or	r24, r18
 14e:	84 bb       	out	0x14, r24	; 20
 150:	08 95       	ret
 152:	24 b3       	in	r18, 0x14	; 20
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_voidSetPinDirection+0x9c>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_voidSetPinDirection+0x98>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	84 bb       	out	0x14, r24	; 20
 168:	08 95       	ret
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	59 f4       	brne	.+22     	; 0x184 <DIO_voidSetPinDirection+0xc2>
 16e:	21 b3       	in	r18, 0x11	; 17
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_voidSetPinDirection+0xb8>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_voidSetPinDirection+0xb4>
 17e:	82 2b       	or	r24, r18
 180:	81 bb       	out	0x11, r24	; 17
 182:	08 95       	ret
 184:	21 b3       	in	r18, 0x11	; 17
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_voidSetPinDirection+0xce>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_voidSetPinDirection+0xca>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	81 bb       	out	0x11, r24	; 17
 19a:	08 95       	ret

0000019c <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(uint8 Port, uint8 Pin, uint8 Value)
{
    switch (Port)
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	01 f1       	breq	.+64     	; 0x1e0 <DIO_voidSetPinValue+0x44>
 1a0:	30 f0       	brcs	.+12     	; 0x1ae <DIO_voidSetPinValue+0x12>
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	b1 f1       	breq	.+108    	; 0x212 <DIO_voidSetPinValue+0x76>
 1a6:	83 30       	cpi	r24, 0x03	; 3
 1a8:	09 f4       	brne	.+2      	; 0x1ac <DIO_voidSetPinValue+0x10>
 1aa:	4c c0       	rjmp	.+152    	; 0x244 <DIO_voidSetPinValue+0xa8>
 1ac:	08 95       	ret
    {
    case PortA: if(Value == High) Set( PortA_Reg,  Pin); else Clr( PortA_Reg, Pin); break;
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_voidSetPinValue+0x2c>
 1b2:	2b b3       	in	r18, 0x1b	; 27
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_voidSetPinValue+0x22>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_voidSetPinValue+0x1e>
 1c2:	82 2b       	or	r24, r18
 1c4:	8b bb       	out	0x1b, r24	; 27
 1c6:	08 95       	ret
 1c8:	2b b3       	in	r18, 0x1b	; 27
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_voidSetPinValue+0x38>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_voidSetPinValue+0x34>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	8b bb       	out	0x1b, r24	; 27
 1de:	08 95       	ret
    case PortB: if(Value == High) Set( PortB_Reg,  Pin); else Clr( PortB_Reg, Pin); break;
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_voidSetPinValue+0x5e>
 1e4:	28 b3       	in	r18, 0x18	; 24
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinValue+0x54>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinValue+0x50>
 1f4:	82 2b       	or	r24, r18
 1f6:	88 bb       	out	0x18, r24	; 24
 1f8:	08 95       	ret
 1fa:	28 b3       	in	r18, 0x18	; 24
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_voidSetPinValue+0x6a>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_voidSetPinValue+0x66>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	88 bb       	out	0x18, r24	; 24
 210:	08 95       	ret
    case PortC: if(Value == High) Set( PortC_Reg,  Pin); else Clr( PortC_Reg, Pin); break;
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_voidSetPinValue+0x90>
 216:	25 b3       	in	r18, 0x15	; 21
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_voidSetPinValue+0x86>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_voidSetPinValue+0x82>
 226:	82 2b       	or	r24, r18
 228:	85 bb       	out	0x15, r24	; 21
 22a:	08 95       	ret
 22c:	25 b3       	in	r18, 0x15	; 21
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_voidSetPinValue+0x9c>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_voidSetPinValue+0x98>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	85 bb       	out	0x15, r24	; 21
 242:	08 95       	ret
    case PortD: if(Value == High) Set( PortD_Reg,  Pin); else Clr( PortD_Reg, Pin); break;
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	59 f4       	brne	.+22     	; 0x25e <DIO_voidSetPinValue+0xc2>
 248:	22 b3       	in	r18, 0x12	; 18
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_voidSetPinValue+0xb8>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_voidSetPinValue+0xb4>
 258:	82 2b       	or	r24, r18
 25a:	82 bb       	out	0x12, r24	; 18
 25c:	08 95       	ret
 25e:	22 b3       	in	r18, 0x12	; 18
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	90 e0       	ldi	r25, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_voidSetPinValue+0xce>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	6a 95       	dec	r22
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_voidSetPinValue+0xca>
 26e:	80 95       	com	r24
 270:	82 23       	and	r24, r18
 272:	82 bb       	out	0x12, r24	; 18
 274:	08 95       	ret

00000276 <_exit>:
 276:	f8 94       	cli

00000278 <__stop_program>:
 278:	ff cf       	rjmp	.-2      	; 0x278 <__stop_program>
