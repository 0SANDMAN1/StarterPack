
LED Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000004be  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000572  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e0  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010a8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b8  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007a9  00000000  00000000  00001f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  000026cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e7  00000000  00000000  0000281c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a1b  00000000  00000000  00002f03  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  0000391e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 16 02 	call	0x42c	; 0x42c <main>
  7a:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_WriteChannel>:
		case DIO_PortD:
		BitValue = GetBit(PIND_Reg,BitNo);
		break;
	}
	return BitValue;
}
  82:	98 2f       	mov	r25, r24
  84:	96 95       	lsr	r25
  86:	96 95       	lsr	r25
  88:	96 95       	lsr	r25
  8a:	87 70       	andi	r24, 0x07	; 7
  8c:	91 30       	cpi	r25, 0x01	; 1
  8e:	21 f1       	breq	.+72     	; 0xd8 <DIO_WriteChannel+0x56>
  90:	30 f0       	brcs	.+12     	; 0x9e <DIO_WriteChannel+0x1c>
  92:	92 30       	cpi	r25, 0x02	; 2
  94:	f1 f1       	breq	.+124    	; 0x112 <DIO_WriteChannel+0x90>
  96:	93 30       	cpi	r25, 0x03	; 3
  98:	09 f4       	brne	.+2      	; 0x9c <DIO_WriteChannel+0x1a>
  9a:	58 c0       	rjmp	.+176    	; 0x14c <DIO_WriteChannel+0xca>
  9c:	08 95       	ret
  9e:	61 30       	cpi	r22, 0x01	; 1
  a0:	69 f4       	brne	.+26     	; 0xbc <DIO_WriteChannel+0x3a>
  a2:	4b b3       	in	r20, 0x1b	; 27
  a4:	21 e0       	ldi	r18, 0x01	; 1
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	b9 01       	movw	r22, r18
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_WriteChannel+0x2e>
  ac:	66 0f       	add	r22, r22
  ae:	77 1f       	adc	r23, r23
  b0:	8a 95       	dec	r24
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_WriteChannel+0x2a>
  b4:	cb 01       	movw	r24, r22
  b6:	84 2b       	or	r24, r20
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	08 95       	ret
  bc:	4b b3       	in	r20, 0x1b	; 27
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_WriteChannel+0x48>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_WriteChannel+0x44>
  ce:	cb 01       	movw	r24, r22
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8b bb       	out	0x1b, r24	; 27
  d6:	08 95       	ret
  d8:	61 30       	cpi	r22, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <DIO_WriteChannel+0x74>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WriteChannel+0x68>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	8a 95       	dec	r24
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WriteChannel+0x64>
  ee:	cb 01       	movw	r24, r22
  f0:	84 2b       	or	r24, r20
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	08 95       	ret
  f6:	48 b3       	in	r20, 0x18	; 24
  f8:	21 e0       	ldi	r18, 0x01	; 1
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	b9 01       	movw	r22, r18
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_WriteChannel+0x82>
 100:	66 0f       	add	r22, r22
 102:	77 1f       	adc	r23, r23
 104:	8a 95       	dec	r24
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_WriteChannel+0x7e>
 108:	cb 01       	movw	r24, r22
 10a:	80 95       	com	r24
 10c:	84 23       	and	r24, r20
 10e:	88 bb       	out	0x18, r24	; 24
 110:	08 95       	ret
 112:	61 30       	cpi	r22, 0x01	; 1
 114:	69 f4       	brne	.+26     	; 0x130 <DIO_WriteChannel+0xae>
 116:	45 b3       	in	r20, 0x15	; 21
 118:	21 e0       	ldi	r18, 0x01	; 1
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	b9 01       	movw	r22, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_WriteChannel+0xa2>
 120:	66 0f       	add	r22, r22
 122:	77 1f       	adc	r23, r23
 124:	8a 95       	dec	r24
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_WriteChannel+0x9e>
 128:	cb 01       	movw	r24, r22
 12a:	84 2b       	or	r24, r20
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	08 95       	ret
 130:	45 b3       	in	r20, 0x15	; 21
 132:	21 e0       	ldi	r18, 0x01	; 1
 134:	30 e0       	ldi	r19, 0x00	; 0
 136:	b9 01       	movw	r22, r18
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_WriteChannel+0xbc>
 13a:	66 0f       	add	r22, r22
 13c:	77 1f       	adc	r23, r23
 13e:	8a 95       	dec	r24
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_WriteChannel+0xb8>
 142:	cb 01       	movw	r24, r22
 144:	80 95       	com	r24
 146:	84 23       	and	r24, r20
 148:	85 bb       	out	0x15, r24	; 21
 14a:	08 95       	ret
 14c:	61 30       	cpi	r22, 0x01	; 1
 14e:	69 f4       	brne	.+26     	; 0x16a <DIO_WriteChannel+0xe8>
 150:	42 b3       	in	r20, 0x12	; 18
 152:	21 e0       	ldi	r18, 0x01	; 1
 154:	30 e0       	ldi	r19, 0x00	; 0
 156:	b9 01       	movw	r22, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_WriteChannel+0xdc>
 15a:	66 0f       	add	r22, r22
 15c:	77 1f       	adc	r23, r23
 15e:	8a 95       	dec	r24
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_WriteChannel+0xd8>
 162:	cb 01       	movw	r24, r22
 164:	84 2b       	or	r24, r20
 166:	82 bb       	out	0x12, r24	; 18
 168:	08 95       	ret
 16a:	42 b3       	in	r20, 0x12	; 18
 16c:	21 e0       	ldi	r18, 0x01	; 1
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	b9 01       	movw	r22, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_WriteChannel+0xf6>
 174:	66 0f       	add	r22, r22
 176:	77 1f       	adc	r23, r23
 178:	8a 95       	dec	r24
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_WriteChannel+0xf2>
 17c:	cb 01       	movw	r24, r22
 17e:	80 95       	com	r24
 180:	84 23       	and	r24, r20
 182:	82 bb       	out	0x12, r24	; 18
 184:	08 95       	ret

00000186 <DIO_ConfigChannel>:
void DIO_ConfigChannel(DIO_ChannelTypes ChannelId,DIO_DirTypes direction){
	DIO_PortTypes Portx = ChannelId/8;
 186:	98 2f       	mov	r25, r24
 188:	96 95       	lsr	r25
 18a:	96 95       	lsr	r25
 18c:	96 95       	lsr	r25
	DIO_ChannelTypes BitNo = ChannelId%8;
 18e:	87 70       	andi	r24, 0x07	; 7
	switch(Portx){
 190:	91 30       	cpi	r25, 0x01	; 1
 192:	21 f1       	breq	.+72     	; 0x1dc <DIO_ConfigChannel+0x56>
 194:	30 f0       	brcs	.+12     	; 0x1a2 <DIO_ConfigChannel+0x1c>
 196:	92 30       	cpi	r25, 0x02	; 2
 198:	f1 f1       	breq	.+124    	; 0x216 <DIO_ConfigChannel+0x90>
 19a:	93 30       	cpi	r25, 0x03	; 3
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_ConfigChannel+0x1a>
 19e:	58 c0       	rjmp	.+176    	; 0x250 <DIO_ConfigChannel+0xca>
 1a0:	08 95       	ret
		case DIO_PortA:
		if (direction == Output)
 1a2:	61 30       	cpi	r22, 0x01	; 1
 1a4:	69 f4       	brne	.+26     	; 0x1c0 <DIO_ConfigChannel+0x3a>
		{
			SetBit(DDRA_Reg,BitNo);
 1a6:	4a b3       	in	r20, 0x1a	; 26
 1a8:	21 e0       	ldi	r18, 0x01	; 1
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	b9 01       	movw	r22, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_ConfigChannel+0x2e>
 1b0:	66 0f       	add	r22, r22
 1b2:	77 1f       	adc	r23, r23
 1b4:	8a 95       	dec	r24
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_ConfigChannel+0x2a>
 1b8:	cb 01       	movw	r24, r22
 1ba:	84 2b       	or	r24, r20
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	08 95       	ret
		}
		else
		{
			ClearBit(DDRA_Reg,BitNo);
 1c0:	4a b3       	in	r20, 0x1a	; 26
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_ConfigChannel+0x48>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_ConfigChannel+0x44>
 1d2:	cb 01       	movw	r24, r22
 1d4:	80 95       	com	r24
 1d6:	84 23       	and	r24, r20
 1d8:	8a bb       	out	0x1a, r24	; 26
 1da:	08 95       	ret
		}
		break;
		
		case DIO_PortB:
		if (direction == Output)
 1dc:	61 30       	cpi	r22, 0x01	; 1
 1de:	69 f4       	brne	.+26     	; 0x1fa <DIO_ConfigChannel+0x74>
		{
			SetBit(DDRB_Reg,BitNo);
 1e0:	47 b3       	in	r20, 0x17	; 23
 1e2:	21 e0       	ldi	r18, 0x01	; 1
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	b9 01       	movw	r22, r18
 1e8:	02 c0       	rjmp	.+4      	; 0x1ee <DIO_ConfigChannel+0x68>
 1ea:	66 0f       	add	r22, r22
 1ec:	77 1f       	adc	r23, r23
 1ee:	8a 95       	dec	r24
 1f0:	e2 f7       	brpl	.-8      	; 0x1ea <DIO_ConfigChannel+0x64>
 1f2:	cb 01       	movw	r24, r22
 1f4:	84 2b       	or	r24, r20
 1f6:	87 bb       	out	0x17, r24	; 23
 1f8:	08 95       	ret
		}
		else
		{
			ClearBit(DDRB_Reg,BitNo);
 1fa:	47 b3       	in	r20, 0x17	; 23
 1fc:	21 e0       	ldi	r18, 0x01	; 1
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	b9 01       	movw	r22, r18
 202:	02 c0       	rjmp	.+4      	; 0x208 <DIO_ConfigChannel+0x82>
 204:	66 0f       	add	r22, r22
 206:	77 1f       	adc	r23, r23
 208:	8a 95       	dec	r24
 20a:	e2 f7       	brpl	.-8      	; 0x204 <DIO_ConfigChannel+0x7e>
 20c:	cb 01       	movw	r24, r22
 20e:	80 95       	com	r24
 210:	84 23       	and	r24, r20
 212:	87 bb       	out	0x17, r24	; 23
 214:	08 95       	ret
		}
		break;
		
		case DIO_PortC:
		if (direction == Output)
 216:	61 30       	cpi	r22, 0x01	; 1
 218:	69 f4       	brne	.+26     	; 0x234 <DIO_ConfigChannel+0xae>
		{
			SetBit(DDRC_Reg,BitNo);
 21a:	44 b3       	in	r20, 0x14	; 20
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	b9 01       	movw	r22, r18
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_ConfigChannel+0xa2>
 224:	66 0f       	add	r22, r22
 226:	77 1f       	adc	r23, r23
 228:	8a 95       	dec	r24
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_ConfigChannel+0x9e>
 22c:	cb 01       	movw	r24, r22
 22e:	84 2b       	or	r24, r20
 230:	84 bb       	out	0x14, r24	; 20
 232:	08 95       	ret
		}
		else
		{
			ClearBit(DDRC_Reg,BitNo);
 234:	44 b3       	in	r20, 0x14	; 20
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	b9 01       	movw	r22, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_ConfigChannel+0xbc>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	8a 95       	dec	r24
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_ConfigChannel+0xb8>
 246:	cb 01       	movw	r24, r22
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	84 bb       	out	0x14, r24	; 20
 24e:	08 95       	ret
		}
		break;
		
		case DIO_PortD:
		if (direction == Output)
 250:	61 30       	cpi	r22, 0x01	; 1
 252:	69 f4       	brne	.+26     	; 0x26e <DIO_ConfigChannel+0xe8>
		{
			SetBit(DDRD_Reg,BitNo);
 254:	41 b3       	in	r20, 0x11	; 17
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_ConfigChannel+0xdc>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_ConfigChannel+0xd8>
 266:	cb 01       	movw	r24, r22
 268:	84 2b       	or	r24, r20
 26a:	81 bb       	out	0x11, r24	; 17
 26c:	08 95       	ret
		}
		else
		{
			ClearBit(DDRD_Reg,BitNo);
 26e:	41 b3       	in	r20, 0x11	; 17
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_ConfigChannel+0xf6>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_ConfigChannel+0xf2>
 280:	cb 01       	movw	r24, r22
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	81 bb       	out	0x11, r24	; 17
 288:	08 95       	ret

0000028a <DIO_Init>:
void DIO_Init(){
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	DIO_ChannelTypes count = DIO_ChannelA0;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	a0 c0       	rjmp	.+320    	; 0x3ce <DIO_Init+0x144>
	{
		Portx = count/8;
 28e:	98 2f       	mov	r25, r24
 290:	96 95       	lsr	r25
 292:	96 95       	lsr	r25
 294:	96 95       	lsr	r25
		BitNo = count%8;
 296:	28 2f       	mov	r18, r24
 298:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 29a:	91 30       	cpi	r25, 0x01	; 1
 29c:	61 f1       	breq	.+88     	; 0x2f6 <DIO_Init+0x6c>
 29e:	38 f0       	brcs	.+14     	; 0x2ae <DIO_Init+0x24>
 2a0:	92 30       	cpi	r25, 0x02	; 2
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <DIO_Init+0x1c>
 2a4:	4c c0       	rjmp	.+152    	; 0x33e <DIO_Init+0xb4>
 2a6:	93 30       	cpi	r25, 0x03	; 3
 2a8:	09 f4       	brne	.+2      	; 0x2ac <DIO_Init+0x22>
 2aa:	6d c0       	rjmp	.+218    	; 0x386 <DIO_Init+0xfc>
 2ac:	8f c0       	rjmp	.+286    	; 0x3cc <DIO_Init+0x142>
			case DIO_PortA:
			if (PinCfg[count].direction == Output)
 2ae:	e8 2f       	mov	r30, r24
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	ee 0f       	add	r30, r30
 2b4:	ff 1f       	adc	r31, r31
 2b6:	e0 5a       	subi	r30, 0xA0	; 160
 2b8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ba:	90 81       	ld	r25, Z
 2bc:	91 30       	cpi	r25, 0x01	; 1
 2be:	69 f4       	brne	.+26     	; 0x2da <DIO_Init+0x50>
			{
				SetBit(DDRA_Reg,BitNo);
 2c0:	9a b3       	in	r25, 0x1a	; 26
 2c2:	41 e0       	ldi	r20, 0x01	; 1
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	ba 01       	movw	r22, r20
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <DIO_Init+0x44>
 2ca:	66 0f       	add	r22, r22
 2cc:	77 1f       	adc	r23, r23
 2ce:	2a 95       	dec	r18
 2d0:	e2 f7       	brpl	.-8      	; 0x2ca <DIO_Init+0x40>
 2d2:	9b 01       	movw	r18, r22
 2d4:	29 2b       	or	r18, r25
 2d6:	2a bb       	out	0x1a, r18	; 26
 2d8:	79 c0       	rjmp	.+242    	; 0x3cc <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRA_Reg,BitNo);
 2da:	9a b3       	in	r25, 0x1a	; 26
 2dc:	41 e0       	ldi	r20, 0x01	; 1
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	ba 01       	movw	r22, r20
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_Init+0x5e>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	2a 95       	dec	r18
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_Init+0x5a>
 2ec:	9b 01       	movw	r18, r22
 2ee:	20 95       	com	r18
 2f0:	29 23       	and	r18, r25
 2f2:	2a bb       	out	0x1a, r18	; 26
 2f4:	6b c0       	rjmp	.+214    	; 0x3cc <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortB:
			if (PinCfg[count].direction == Output)
 2f6:	e8 2f       	mov	r30, r24
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	ee 0f       	add	r30, r30
 2fc:	ff 1f       	adc	r31, r31
 2fe:	e0 5a       	subi	r30, 0xA0	; 160
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	90 81       	ld	r25, Z
 304:	91 30       	cpi	r25, 0x01	; 1
 306:	69 f4       	brne	.+26     	; 0x322 <DIO_Init+0x98>
			{
				SetBit(DDRB_Reg,BitNo);
 308:	97 b3       	in	r25, 0x17	; 23
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	ba 01       	movw	r22, r20
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_Init+0x8c>
 312:	66 0f       	add	r22, r22
 314:	77 1f       	adc	r23, r23
 316:	2a 95       	dec	r18
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_Init+0x88>
 31a:	9b 01       	movw	r18, r22
 31c:	29 2b       	or	r18, r25
 31e:	27 bb       	out	0x17, r18	; 23
 320:	55 c0       	rjmp	.+170    	; 0x3cc <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRB_Reg,BitNo);
 322:	97 b3       	in	r25, 0x17	; 23
 324:	41 e0       	ldi	r20, 0x01	; 1
 326:	50 e0       	ldi	r21, 0x00	; 0
 328:	ba 01       	movw	r22, r20
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_Init+0xa6>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	2a 95       	dec	r18
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_Init+0xa2>
 334:	9b 01       	movw	r18, r22
 336:	20 95       	com	r18
 338:	29 23       	and	r18, r25
 33a:	27 bb       	out	0x17, r18	; 23
 33c:	47 c0       	rjmp	.+142    	; 0x3cc <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortC:
			if (PinCfg[count].direction == Output)
 33e:	e8 2f       	mov	r30, r24
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ee 0f       	add	r30, r30
 344:	ff 1f       	adc	r31, r31
 346:	e0 5a       	subi	r30, 0xA0	; 160
 348:	ff 4f       	sbci	r31, 0xFF	; 255
 34a:	90 81       	ld	r25, Z
 34c:	91 30       	cpi	r25, 0x01	; 1
 34e:	69 f4       	brne	.+26     	; 0x36a <DIO_Init+0xe0>
			{
				SetBit(DDRC_Reg,BitNo);
 350:	94 b3       	in	r25, 0x14	; 20
 352:	41 e0       	ldi	r20, 0x01	; 1
 354:	50 e0       	ldi	r21, 0x00	; 0
 356:	ba 01       	movw	r22, r20
 358:	02 c0       	rjmp	.+4      	; 0x35e <DIO_Init+0xd4>
 35a:	66 0f       	add	r22, r22
 35c:	77 1f       	adc	r23, r23
 35e:	2a 95       	dec	r18
 360:	e2 f7       	brpl	.-8      	; 0x35a <DIO_Init+0xd0>
 362:	9b 01       	movw	r18, r22
 364:	29 2b       	or	r18, r25
 366:	24 bb       	out	0x14, r18	; 20
 368:	31 c0       	rjmp	.+98     	; 0x3cc <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRC_Reg,BitNo);
 36a:	94 b3       	in	r25, 0x14	; 20
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	50 e0       	ldi	r21, 0x00	; 0
 370:	ba 01       	movw	r22, r20
 372:	02 c0       	rjmp	.+4      	; 0x378 <DIO_Init+0xee>
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	2a 95       	dec	r18
 37a:	e2 f7       	brpl	.-8      	; 0x374 <DIO_Init+0xea>
 37c:	9b 01       	movw	r18, r22
 37e:	20 95       	com	r18
 380:	29 23       	and	r18, r25
 382:	24 bb       	out	0x14, r18	; 20
 384:	23 c0       	rjmp	.+70     	; 0x3cc <DIO_Init+0x142>
			}
			break;
			
			case DIO_PortD:
			if (PinCfg[count].direction == Output)
 386:	e8 2f       	mov	r30, r24
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	e0 5a       	subi	r30, 0xA0	; 160
 390:	ff 4f       	sbci	r31, 0xFF	; 255
 392:	90 81       	ld	r25, Z
 394:	91 30       	cpi	r25, 0x01	; 1
 396:	69 f4       	brne	.+26     	; 0x3b2 <DIO_Init+0x128>
			{
				SetBit(DDRD_Reg,BitNo);
 398:	91 b3       	in	r25, 0x11	; 17
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	ba 01       	movw	r22, r20
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <DIO_Init+0x11c>
 3a2:	66 0f       	add	r22, r22
 3a4:	77 1f       	adc	r23, r23
 3a6:	2a 95       	dec	r18
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <DIO_Init+0x118>
 3aa:	9b 01       	movw	r18, r22
 3ac:	29 2b       	or	r18, r25
 3ae:	21 bb       	out	0x11, r18	; 17
 3b0:	0d c0       	rjmp	.+26     	; 0x3cc <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRD_Reg,BitNo);
 3b2:	91 b3       	in	r25, 0x11	; 17
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	ba 01       	movw	r22, r20
 3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <DIO_Init+0x136>
 3bc:	66 0f       	add	r22, r22
 3be:	77 1f       	adc	r23, r23
 3c0:	2a 95       	dec	r18
 3c2:	e2 f7       	brpl	.-8      	; 0x3bc <DIO_Init+0x132>
 3c4:	9b 01       	movw	r18, r22
 3c6:	20 95       	com	r18
 3c8:	29 23       	and	r18, r25
 3ca:	21 bb       	out	0x11, r18	; 17
void DIO_Init(){
	DIO_PortTypes Portx;
	DIO_ChannelTypes BitNo;
	DIO_ChannelTypes count = DIO_ChannelA0;
	
	for (count=DIO_ChannelA0;count<PINCOUNT;count++)
 3cc:	8f 5f       	subi	r24, 0xFF	; 255
 3ce:	80 32       	cpi	r24, 0x20	; 32
 3d0:	08 f4       	brcc	.+2      	; 0x3d4 <DIO_Init+0x14a>
 3d2:	5d cf       	rjmp	.-326    	; 0x28e <DIO_Init+0x4>
			}
			break;
		}
	}
	
 3d4:	08 95       	ret

000003d6 <LED_Init>:
*/
#include "LED.h"

void LED_Init()
{
	DIO_ConfigChannel(DIO_ChannelD3, Output); //LED 2
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	8b e1       	ldi	r24, 0x1B	; 27
 3da:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelC7, Output); //LED 1
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	87 e1       	ldi	r24, 0x17	; 23
 3e2:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_ConfigChannel>
	DIO_ConfigChannel(DIO_ChannelC2, Output); //LED 0
 3e6:	61 e0       	ldi	r22, 0x01	; 1
 3e8:	82 e1       	ldi	r24, 0x12	; 18
 3ea:	0e 94 c3 00 	call	0x186	; 0x186 <DIO_ConfigChannel>
 3ee:	08 95       	ret

000003f0 <LED2_ON>:
}

void LED2_ON()
{
	DIO_WriteChannel(DIO_ChannelD3, STD_High);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	8b e1       	ldi	r24, 0x1B	; 27
 3f4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 3f8:	08 95       	ret

000003fa <LED1_ON>:
}

void LED1_ON()
{
	DIO_WriteChannel(DIO_ChannelC7, STD_High);
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	87 e1       	ldi	r24, 0x17	; 23
 3fe:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 402:	08 95       	ret

00000404 <LED0_ON>:
}

void LED0_ON()
{
	DIO_WriteChannel(DIO_ChannelC2, STD_High);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	82 e1       	ldi	r24, 0x12	; 18
 408:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 40c:	08 95       	ret

0000040e <LED2_OFF>:
}

void LED2_OFF()
{
	DIO_WriteChannel(DIO_ChannelD3, STD_Low);
 40e:	60 e0       	ldi	r22, 0x00	; 0
 410:	8b e1       	ldi	r24, 0x1B	; 27
 412:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 416:	08 95       	ret

00000418 <LED1_OFF>:
}

void LED1_OFF()
{
	DIO_WriteChannel(DIO_ChannelC7, STD_Low);
 418:	60 e0       	ldi	r22, 0x00	; 0
 41a:	87 e1       	ldi	r24, 0x17	; 23
 41c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 420:	08 95       	ret

00000422 <LED0_OFF>:
}

void LED0_OFF()
{
	DIO_WriteChannel(DIO_ChannelC2, STD_Low);
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	82 e1       	ldi	r24, 0x12	; 18
 426:	0e 94 41 00 	call	0x82	; 0x82 <DIO_WriteChannel>
 42a:	08 95       	ret

0000042c <main>:


int main(void)
{
	/* Replace with your application code */
	DIO_Init();
 42c:	0e 94 45 01 	call	0x28a	; 0x28a <DIO_Init>
	LED_Init();
 430:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <LED_Init>
	//Buzzer_Init();
	while (1)
	{
		LED0_ON();
 434:	0e 94 02 02 	call	0x404	; 0x404 <LED0_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 438:	2f ef       	ldi	r18, 0xFF	; 255
 43a:	83 ed       	ldi	r24, 0xD3	; 211
 43c:	90 e3       	ldi	r25, 0x30	; 48
 43e:	21 50       	subi	r18, 0x01	; 1
 440:	80 40       	sbci	r24, 0x00	; 0
 442:	90 40       	sbci	r25, 0x00	; 0
 444:	e1 f7       	brne	.-8      	; 0x43e <main+0x12>
 446:	00 c0       	rjmp	.+0      	; 0x448 <main+0x1c>
 448:	00 00       	nop
		_delay_ms(1000);
		LED1_ON();
 44a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <LED1_ON>
 44e:	2f ef       	ldi	r18, 0xFF	; 255
 450:	83 ed       	ldi	r24, 0xD3	; 211
 452:	90 e3       	ldi	r25, 0x30	; 48
 454:	21 50       	subi	r18, 0x01	; 1
 456:	80 40       	sbci	r24, 0x00	; 0
 458:	90 40       	sbci	r25, 0x00	; 0
 45a:	e1 f7       	brne	.-8      	; 0x454 <main+0x28>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <main+0x32>
 45e:	00 00       	nop
		_delay_ms(1000);
		LED2_ON();
 460:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <LED2_ON>
 464:	2f ef       	ldi	r18, 0xFF	; 255
 466:	83 ed       	ldi	r24, 0xD3	; 211
 468:	90 e3       	ldi	r25, 0x30	; 48
 46a:	21 50       	subi	r18, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <main+0x3e>
 472:	00 c0       	rjmp	.+0      	; 0x474 <main+0x48>
 474:	00 00       	nop
		_delay_ms(1000);
		LED0_OFF();
 476:	0e 94 11 02 	call	0x422	; 0x422 <LED0_OFF>
 47a:	2f ef       	ldi	r18, 0xFF	; 255
 47c:	83 ed       	ldi	r24, 0xD3	; 211
 47e:	90 e3       	ldi	r25, 0x30	; 48
 480:	21 50       	subi	r18, 0x01	; 1
 482:	80 40       	sbci	r24, 0x00	; 0
 484:	90 40       	sbci	r25, 0x00	; 0
 486:	e1 f7       	brne	.-8      	; 0x480 <main+0x54>
 488:	00 c0       	rjmp	.+0      	; 0x48a <main+0x5e>
 48a:	00 00       	nop
		_delay_ms(1000);
		LED1_OFF();
 48c:	0e 94 0c 02 	call	0x418	; 0x418 <LED1_OFF>
 490:	2f ef       	ldi	r18, 0xFF	; 255
 492:	83 ed       	ldi	r24, 0xD3	; 211
 494:	90 e3       	ldi	r25, 0x30	; 48
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <main+0x6a>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <main+0x74>
 4a0:	00 00       	nop
		_delay_ms(1000);
		LED2_OFF();
 4a2:	0e 94 07 02 	call	0x40e	; 0x40e <LED2_OFF>
 4a6:	2f ef       	ldi	r18, 0xFF	; 255
 4a8:	83 ed       	ldi	r24, 0xD3	; 211
 4aa:	90 e3       	ldi	r25, 0x30	; 48
 4ac:	21 50       	subi	r18, 0x01	; 1
 4ae:	80 40       	sbci	r24, 0x00	; 0
 4b0:	90 40       	sbci	r25, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <main+0x80>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <main+0x8a>
 4b6:	00 00       	nop
 4b8:	bd cf       	rjmp	.-134    	; 0x434 <main+0x8>

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
