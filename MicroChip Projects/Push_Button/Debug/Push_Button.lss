
Push_Button.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002ae  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008b7  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065c  00000000  00000000  00000c23  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d4  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003a8  00000000  00000000  000016bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000378  00000000  00000000  00001a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 2b 01 	jmp	0x256	; 0x256 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:


int main(void)
{
	/* Replace with your application code */
	DIO_voidSetPinDirection(PortB, Pin0, Input); //PB0
  6c:	40 e0       	ldi	r20, 0x00	; 0
  6e:	60 e0       	ldi	r22, 0x00	; 0
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD, Pin6, Input); //PB1
  76:	40 e0       	ldi	r20, 0x00	; 0
  78:	66 e0       	ldi	r22, 0x06	; 6
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD, Pin2, Input); //PB2
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	62 e0       	ldi	r22, 0x02	; 2
  84:	83 e0       	ldi	r24, 0x03	; 3
  86:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC, Pin2, Output); //LED 0
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortC, Pin7, Output); //LED 1
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	67 e0       	ldi	r22, 0x07	; 7
  98:	82 e0       	ldi	r24, 0x02	; 2
  9a:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PortD, Pin3, Output); //LED 2
  9e:	41 e0       	ldi	r20, 0x01	; 1
  a0:	63 e0       	ldi	r22, 0x03	; 3
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	0e 94 8f 00 	call	0x11e	; 0x11e <DIO_voidSetPinDirection>
	//uint8 x;
	while (1)
	{
		if (DIO_uint8GetPinValue(PortB, Pin0) == 1)
  a8:	60 e0       	ldi	r22, 0x00	; 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_uint8GetPinValue>
  b0:	81 30       	cpi	r24, 0x01	; 1
  b2:	71 f4       	brne	.+28     	; 0xd0 <main+0x64>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	81 ee       	ldi	r24, 0xE1	; 225
  b8:	94 e0       	ldi	r25, 0x04	; 4
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x4e>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x58>
  c4:	00 00       	nop
		{
			_delay_ms(100);
			Toggle(PortC_Reg, Pin2);
  c6:	95 b3       	in	r25, 0x15	; 21
  c8:	84 e0       	ldi	r24, 0x04	; 4
  ca:	89 27       	eor	r24, r25
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	ec cf       	rjmp	.-40     	; 0xa8 <main+0x3c>
		} else if (DIO_uint8GetPinValue(PortD, Pin6) == 1)
  d0:	66 e0       	ldi	r22, 0x06	; 6
  d2:	83 e0       	ldi	r24, 0x03	; 3
  d4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_uint8GetPinValue>
  d8:	81 30       	cpi	r24, 0x01	; 1
  da:	69 f4       	brne	.+26     	; 0xf6 <main+0x8a>
  dc:	2f ef       	ldi	r18, 0xFF	; 255
  de:	81 ee       	ldi	r24, 0xE1	; 225
  e0:	94 e0       	ldi	r25, 0x04	; 4
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x76>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x80>
  ec:	00 00       	nop
		{
			_delay_ms(100);
			Toggle(PortC_Reg, Pin7);
  ee:	85 b3       	in	r24, 0x15	; 21
  f0:	80 58       	subi	r24, 0x80	; 128
  f2:	85 bb       	out	0x15, r24	; 21
  f4:	d9 cf       	rjmp	.-78     	; 0xa8 <main+0x3c>
		} else if (DIO_uint8GetPinValue(PortD, Pin2) == 1)
  f6:	62 e0       	ldi	r22, 0x02	; 2
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <DIO_uint8GetPinValue>
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	99 f6       	brne	.-90     	; 0xa8 <main+0x3c>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	81 ee       	ldi	r24, 0xE1	; 225
 106:	94 e0       	ldi	r25, 0x04	; 4
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x9c>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0xa6>
 112:	00 00       	nop
		{
			_delay_ms(100);
			Toggle(PortD_Reg, Pin3);
 114:	92 b3       	in	r25, 0x12	; 18
 116:	88 e0       	ldi	r24, 0x08	; 8
 118:	89 27       	eor	r24, r25
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	c5 cf       	rjmp	.-118    	; 0xa8 <main+0x3c>

0000011e <DIO_voidSetPinDirection>:
#include "../Include/bit_math.h"
#include "../Include/DIO.h"
 
void DIO_voidSetPinDirection(uint8 Port, uint8 Pin, uint8 Direction)
{
    switch (Port)
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	01 f1       	breq	.+64     	; 0x162 <DIO_voidSetPinDirection+0x44>
 122:	30 f0       	brcs	.+12     	; 0x130 <DIO_voidSetPinDirection+0x12>
 124:	82 30       	cpi	r24, 0x02	; 2
 126:	b1 f1       	breq	.+108    	; 0x194 <DIO_voidSetPinDirection+0x76>
 128:	83 30       	cpi	r24, 0x03	; 3
 12a:	09 f4       	brne	.+2      	; 0x12e <DIO_voidSetPinDirection+0x10>
 12c:	4c c0       	rjmp	.+152    	; 0x1c6 <DIO_voidSetPinDirection+0xa8>
 12e:	08 95       	ret
    {
        case PortA: if (Direction == Output) Set(DDRA_Reg, Pin); else Clr(DDRA_Reg, Pin); break;
 130:	41 30       	cpi	r20, 0x01	; 1
 132:	59 f4       	brne	.+22     	; 0x14a <DIO_voidSetPinDirection+0x2c>
 134:	2a b3       	in	r18, 0x1a	; 26
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_voidSetPinDirection+0x22>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_voidSetPinDirection+0x1e>
 144:	82 2b       	or	r24, r18
 146:	8a bb       	out	0x1a, r24	; 26
 148:	08 95       	ret
 14a:	2a b3       	in	r18, 0x1a	; 26
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	02 c0       	rjmp	.+4      	; 0x156 <DIO_voidSetPinDirection+0x38>
 152:	88 0f       	add	r24, r24
 154:	99 1f       	adc	r25, r25
 156:	6a 95       	dec	r22
 158:	e2 f7       	brpl	.-8      	; 0x152 <DIO_voidSetPinDirection+0x34>
 15a:	80 95       	com	r24
 15c:	82 23       	and	r24, r18
 15e:	8a bb       	out	0x1a, r24	; 26
 160:	08 95       	ret
        case PortB: if (Direction == Output) Set(DDRB_Reg, Pin); else Clr(DDRB_Reg, Pin); break;
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	59 f4       	brne	.+22     	; 0x17c <DIO_voidSetPinDirection+0x5e>
 166:	27 b3       	in	r18, 0x17	; 23
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_voidSetPinDirection+0x54>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_voidSetPinDirection+0x50>
 176:	82 2b       	or	r24, r18
 178:	87 bb       	out	0x17, r24	; 23
 17a:	08 95       	ret
 17c:	27 b3       	in	r18, 0x17	; 23
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_voidSetPinDirection+0x6a>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_voidSetPinDirection+0x66>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	87 bb       	out	0x17, r24	; 23
 192:	08 95       	ret
        case PortC: if (Direction == Output) Set(DDRC_Reg, Pin); else Clr(DDRC_Reg, Pin); break;
 194:	41 30       	cpi	r20, 0x01	; 1
 196:	59 f4       	brne	.+22     	; 0x1ae <DIO_voidSetPinDirection+0x90>
 198:	24 b3       	in	r18, 0x14	; 20
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_voidSetPinDirection+0x86>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_voidSetPinDirection+0x82>
 1a8:	82 2b       	or	r24, r18
 1aa:	84 bb       	out	0x14, r24	; 20
 1ac:	08 95       	ret
 1ae:	24 b3       	in	r18, 0x14	; 20
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_voidSetPinDirection+0x9c>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_voidSetPinDirection+0x98>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	84 bb       	out	0x14, r24	; 20
 1c4:	08 95       	ret
        case PortD: if (Direction == Output) Set(DDRD_Reg, Pin); else Clr(DDRD_Reg, Pin); break;
 1c6:	41 30       	cpi	r20, 0x01	; 1
 1c8:	59 f4       	brne	.+22     	; 0x1e0 <DIO_voidSetPinDirection+0xc2>
 1ca:	21 b3       	in	r18, 0x11	; 17
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <DIO_voidSetPinDirection+0xb8>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <DIO_voidSetPinDirection+0xb4>
 1da:	82 2b       	or	r24, r18
 1dc:	81 bb       	out	0x11, r24	; 17
 1de:	08 95       	ret
 1e0:	21 b3       	in	r18, 0x11	; 17
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	02 c0       	rjmp	.+4      	; 0x1ec <DIO_voidSetPinDirection+0xce>
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	6a 95       	dec	r22
 1ee:	e2 f7       	brpl	.-8      	; 0x1e8 <DIO_voidSetPinDirection+0xca>
 1f0:	80 95       	com	r24
 1f2:	82 23       	and	r24, r18
 1f4:	81 bb       	out	0x11, r24	; 17
 1f6:	08 95       	ret

000001f8 <DIO_uint8GetPinValue>:
}

uint8 DIO_uint8GetPinValue(uint8 Port, uint8 Pin)
{
    uint8 Loc_uint8Result = 0;
    switch (Port)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	79 f0       	breq	.+30     	; 0x21a <DIO_uint8GetPinValue+0x22>
 1fc:	28 f0       	brcs	.+10     	; 0x208 <DIO_uint8GetPinValue+0x10>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	a9 f0       	breq	.+42     	; 0x22c <DIO_uint8GetPinValue+0x34>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	e9 f0       	breq	.+58     	; 0x240 <DIO_uint8GetPinValue+0x48>
 206:	25 c0       	rjmp	.+74     	; 0x252 <DIO_uint8GetPinValue+0x5a>
    {
    case PortA: Loc_uint8Result = Get( PinA_Reg,  Pin); break;
 208:	89 b3       	in	r24, 0x19	; 25
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_uint8GetPinValue+0x1a>
 20e:	95 95       	asr	r25
 210:	87 95       	ror	r24
 212:	6a 95       	dec	r22
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_uint8GetPinValue+0x16>
 216:	81 70       	andi	r24, 0x01	; 1
 218:	08 95       	ret
    case PortB: Loc_uint8Result = Get( PinB_Reg,  Pin); break;
 21a:	86 b3       	in	r24, 0x16	; 22
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_uint8GetPinValue+0x2c>
 220:	95 95       	asr	r25
 222:	87 95       	ror	r24
 224:	6a 95       	dec	r22
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_uint8GetPinValue+0x28>
 228:	81 70       	andi	r24, 0x01	; 1
 22a:	08 95       	ret
    case PortC: Loc_uint8Result = Get( PinC_Reg,  Pin); break;
 22c:	80 91 13 00 	lds	r24, 0x0013	; 0x800013 <__TEXT_REGION_LENGTH__+0x7f8013>
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_uint8GetPinValue+0x40>
 234:	95 95       	asr	r25
 236:	87 95       	ror	r24
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_uint8GetPinValue+0x3c>
 23c:	81 70       	andi	r24, 0x01	; 1
 23e:	08 95       	ret
    case PortD: Loc_uint8Result = Get( PinD_Reg,  Pin); break;
 240:	80 b3       	in	r24, 0x10	; 16
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_uint8GetPinValue+0x52>
 246:	95 95       	asr	r25
 248:	87 95       	ror	r24
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_uint8GetPinValue+0x4e>
 24e:	81 70       	andi	r24, 0x01	; 1
 250:	08 95       	ret
    }
}

uint8 DIO_uint8GetPinValue(uint8 Port, uint8 Pin)
{
    uint8 Loc_uint8Result = 0;
 252:	80 e0       	ldi	r24, 0x00	; 0
    case PortB: Loc_uint8Result = Get( PinB_Reg,  Pin); break;
    case PortC: Loc_uint8Result = Get( PinC_Reg,  Pin); break;
    case PortD: Loc_uint8Result = Get( PinD_Reg,  Pin); break;
    }
    return Loc_uint8Result;
}
 254:	08 95       	ret

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
